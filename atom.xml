<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-10-04T09:55:40+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Teaching Kids to Build &amp; Program a Drawing Robot]]></title>
            <link href="/blog/2019/10/04/teaching-kids-to-build-and-program-a-drawing-robot"/>
            <updated>2019-10-04T11:02:01+00:00</updated>
            <id>/blog/2019/10/04/teaching-kids-to-build-and-program-a-drawing-robot</id>
            <content type="html"><![CDATA[<p>Starting tomorrow until October 20th, it's <a href="https://codeweek.eu/">EU Code Week 2019</a>; that time of year to get young adults excited about programming.<br />
Just as last year, several members of our team are taking part in one of the initiatives for that European Code Week; we'll be giving a workshop to 11 year olds by building a little robot with them next Thursday.<br />
This blog post puts a spotlight on these initiatives and explains how you can help.</p>

<h2 id="%F0%9F%87%AA%F0%9F%87%BA-european-code-week">üá™üá∫ European Code Week</h2>

<p>During 15 days <a href="https://codeweek.eu/events">hundreds of activities</a> happen all over Europe that want to celebrate creativity, problem solving and collaboration through programming and other tech activities.</p>

<p>You probably need little convincing that digital literacy is super important in today's world. Getting young adults interested in programming is one way of driving that.</p>

<blockquote>
  <p>"It's about Pia, who felt like she had to study law, even though she always enjoyed maths and playing with computers. It's about Alice, who dreams about making robots because her parents don't allow her to have a cat." - <a href="https://codeweek.eu/about">codeweek.eu/about</a></p>
</blockquote>

<p>The initiative started in 2013 and had grown to 44000 activities reaching 2.7 million people all over Europe by last year, all run by volunteers. The EU Code Week includes a.o. well-known initiatives like CoderDojo.</p>

<p><img src="/images/2019-10-04-teaching-kids-to-build-andprogram-a-drawing-robot/code-week-participation.png" alt="Code Week Participants" /></p>

<h2 id="%F0%9F%A4%96-wegostem">ü§ñ WeGoSTEM</h2>

<p>One of the other organisations taking part in the EU Code Weeks since a few years, has its roots in the hometown of Clarabridge Engage: WeGoSTEM.<br />
<em>(STEM is short for Science, Technology, Engineering &amp; Mathematics, an acronym often used in education to refer to these fields, as part of a curriculum that is interdisciplinary &amp; using an applied approach.)</em></p>

<p>WeGoSTEM's mission is to organise a fun workshop in as many schools as possible (mainly in Brussels &amp; Flanders) to give as many 11 to 12 year olds as possible a first introduction to programming. Here's the robot we're building:</p>

<p><img src="/images/2019-10-04-teaching-kids-to-build-andprogram-a-drawing-robot/drawing.png" alt="The Drawing Bot In Action" /></p>

<p>WeGoSTEM is a project of the NGO's <a href="https://dwengo.org/">Dwengo</a> &amp; <a href="http://www.shegoesict.be/">SheGoesICT</a>. Dwengo is organising teaching activities for people who want to experiment with micro-controllers, all around the world, and more specifically in socially-disadvantaged countries. SheGoesICT has as clear goal to advocate gender diversity in IT companies in Belgium.</p>

<p>The NGO's behind WeGoSTEM have diversity and inclusion in their DNA, so it's no wonder that also in the workshops they give, they focus first and foremost on reaching as many girls as boys, and focus on giving workshops in schools with many children from disadvantaged groups and rural schools. 
<em>(In 2018, 29% of the children who participated in WeGoSTEM had a special socio-economic status (SES), while the average is only 20%.)</em></p>

<p>I've joined a few workshops that teached programming concepts to kids on Wednesday afternoons or during weekends, but there's no denying these are too often an affair for boys, and for kids from economically advantaged parents. For me personally, WeGoSTEM‚Äôs focus on inclusion, is a very big motivation to volunteer for this project.</p>

<p>By the end of the workshop the main goal is to have given every single kid a fun experience. (Not about building the most complex robot, or have the most advanced programming sequence ...) The only goal is to play around with a micro-controller and use the basics of a visual programming language.</p>

<h2 id="%E2%9C%8B-how-it-is-to-volunteer">‚úã How it is to volunteer</h2>

<p>So if you sign-up to volunteer, what actually happens? First, you indicate one or more dates you're available to give the workshop in a school, and area of preference. (This year, Jared and me are heading to a school in Bruges.)<br />
There's also several training sessions around Belgium where the core team of WeGoSTEM explain the project, structure of a typical workshop, you get the time to build &amp; play with the robot yourself, and meet the other volunteers.</p>

<p>When you visit the schools, you're a team of 3 coaches (of which almost always 1 has given the workshop previously).</p>

<ul>
<li>üó£ The workshop starts with a little chat with the class to see what they know and like and find exciting about robots. <em>(Ideal place to test our dad-jokes about mowing robots ‚ò∫Ô∏è.)</em></li>
<li>üé® In a next exercise it's about trying to show kids what it is to program: one volunteer kid instructs the rest of the class to make a certain drawing. At this point it often shows the importance of clear instructions.</li>
<li>üî© And then of course: building the robot (with Knex-like blocks) and a Dwenguino-board (a pre-assembled Arduino with several sensors).</li>
<li>üíª Once the whole robot is build you help the kids to program the robot with Blockly. Blockly is Google technology that you can use &amp; embed in other projects. (You can play with an online simulator of the Dwenguino/Blockly software over here: <a href="https://dwengo.org/dwenguinoblockly/">dwengo.org/dwenguinoblockly</a>.)</li>
<li>üòÑ By the end of the workshop the goal is to send every kid home with a smile and a drawing.</li>
</ul>

<p>Oh, and in the afternoon, you do it all over again, for another class.</p>

<p>The whole experience - standing in front of a class room and having kids so eager to experiment with programming - is absolutely wonderful. And also quite exhausting (no need to convince me of the importance of good teachers, after only a single day in their shoes üòÖ.)</p>

<p>Maybe you helped inspire a kid to choose an education path focusing on STEM? Maybe you gave the teacher of that class the empowerment &amp; tools to incorporate programming in some of their lessons? Maybe you helped show policy makers the importance of digital literacy and drive change?</p>

<p><img src="/images/2019-10-04-teaching-kids-to-build-andprogram-a-drawing-robot/class.png" alt="A class with all their drawings ..." /></p>

<p>WeGoSTEM is 100% supported by volunteers in all participating countries. Workshops for the code week start next week, but there's definitely some free spots for coaches still. If you want to participate, check out the dedicated websites: <a href="https://wegostem.be/">WeGoSTEM Belgium</a> and <a href="https://wegostem.gr/">WeGoSTEM Greece</a>.<br />
After the Code Week, all volunteers can also always use the workshop materials needed to give an extra sessions in a school where you have a friend, kid or nephew or niece, so if you want to help us host a workshop, do let us know ...</p>

<p>Although the costs to run this project are very low (probably among the lowest euro-per-kid for STEM projects in Belgium), they can always use some extra help. WeGoSTEM is working with several partners that donate money, laptops, or help source volunteers amongst their employees.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[A tale of a small JavaScript bug]]></title>
            <link href="/blog/2019/10/02/a-tale-of-a-small-javascript-bug"/>
            <updated>2019-10-02T14:30:00+00:00</updated>
            <id>/blog/2019/10/02/a-tale-of-a-small-javascript-bug</id>
            <content type="html"><![CDATA[<p>Sometimes it's assumed that the frontend is a relatively harmless place to be programming. We've been proven wrong once again.</p>

<h2 id="%F0%9F%94%A5%F0%9F%90%B6%E2%98%95%EF%B8%8F%F0%9F%94%A5-this-is-fine">üî•üê∂‚òïÔ∏èüî• This is fine</h2>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/this-is-fine.png" alt="This is fine" /></p>

<p>For a few months now, we have been seeing relatively high loads on our web servers. The loads varied from around 90% of the total CPU power available, to a bit over 100% in peak hours. We assumed that this was normal and that our product was just being used more (which it was), and that this was a natural burden on the load on our servers. The approach we were going to take was to continue scaling horizontally.</p>

<p>Two weeks ago however, we noticed huge daily load spikes (up to 1000% of our capacity) during peak hours. We got alert SMS'es of Redis that couldn't handle the amount of requests, and saw Kibana logs of very slow user requests to certain routes, effectively rendering our application unusable at times. It was "all hands on deck" immediately, and we started digging. Before we could find out what was happening it stopped again, and the load dropped to what we assumed was "normal load". We found, also using Kibana, that there was a huge amount of calls to our <code>/find</code> endpoint, and so we decided to implement a <a href="/blog/2017/05/02/sliding-window-rate-limiter-redis/">rate limiter</a> on those, to prevent our app from going down, and buy us some time to look for the actual issue. However, we couldn't see why that endpoint was hit so hard.</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/kibana.png" alt="Kibana showing a lot of requests for one user in a short time frame" /></p>

<h2 id="%F0%9F%90%9B%F0%9F%95%B5%EF%B8%8F%E2%80%8D%E2%99%82%EF%B8%8F--bug-hunting">üêõüïµÔ∏è‚Äç‚ôÇÔ∏è  Bug Hunting</h2>

<p>A few days later, when we were hit with a huge amount of calls again (this time, they were ratelimited and not producing those huge loads on our servers, but we could see them in the logs and in Kibana), we noticed that most of them were coming from only a limited number of customers. We tried to work in our app as they would do, but couldn't reproduce it. After some time however, we noticed in the network tab of the browser we were working in, that the same call to the <code>/find</code> endpoint was done multiple times simultaneously! Bingo!</p>

<p>Or not Bingo? The code seemed to be fine: When we mount our inbox's react component, we use <code>Sonora.on(eventname, callback)</code> to bind a callback to a given websocket eventname (Sonora is an abstraction around <a href="https://socket.io/">socket.io</a>). When we unmount the react component again, we call <code>Sonora.off(eventname, callback)</code> to stop listening for those events. When such an event comes in, we would potentially need more info from the backend and a call to the <code>/find</code> endpoint is issued. It definitely looked like we didn't unregister the callbacks when unmounting that component, given how we saw multiple calls being made simultaneously in the console's network tab, whenever a websocket message came in.</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/performance-tab.png" alt="Browser's performance tab showing lots of calls to the find endpoint" /></p>

<p>While everything was looking okay in the consuming code of the Sonora <code>.on()</code> and <code>.off()</code> methods, we concluded that something must've been wrong in the wrapper around socket.io itself. When looking inside the <code>.on()</code> method, we found out that there was a debugging statement added like this:</p>

<pre><code class="javascript">const Sonora = {
    // ...

    on: (event, callback) =&gt; {
        socket.on(
            event,
            () =&gt; {
                console.log('some debugging here');

                callback.apply(this, arguments);
            }
        );
    }

    // ...
}
</code></pre>

<p>As you can see, we wrapped the actual callback inside an anonymous function, and passed that on to Socket.io's <code>.on()</code> handler. Now, when calling <code>.off()</code>, we sent along the original callback which didn't match the wrapped one, and nothing was removed. Since it's possible to have multiple callbacks for each incoming event, this resulted in the same callback being added time after time and not being removed. So we had basically made all our clients do <em>loads</em> of unnecessary calls to <code>/find</code> by adding a debugging statement! And believe it or not, this debugging statement was there for a while! (Thanks git blame!)</p>

<h2 id="%F0%9F%94%A8%F0%9F%91%A9%E2%80%8D%F0%9F%94%A7-fixing-it">üî®üë©‚Äçüîß Fixing it</h2>

<p>The fix was easy enough: don't add that anonymous function.</p>

<p>The load on our servers dropped immediately when we put that small change into production, and not only during peak hours. It seemed that we had been on a tipping point. A few more users online at any given time, a few more open tabs with our application running in them. The servers constantly running at semi-high loads. And then we went over it. üî•</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/loads-dropping.png" alt="Graph displaying the huge drop in load on our servers" /></p>

<p>Along the way we did some other optimisations:</p>

<ul>
<li>we implemented a rate limiter on the <code>/find</code> endpoint</li>
<li>we disallowed to register exactly the same callback twice for the same event using <code>Sonora.on()</code></li>
<li>we fixed a second bug in <code>Sonora.off()</code> where we didn't remove the correct callbacks sometimes</li>
</ul>

<h2 id="%F0%9F%98%87%F0%9F%92%AD-and-they-lived-happily-ever-after">üòáüí≠ And they lived happily ever after</h2>

<p>This was the tale of the small JavaScript bug bringing down the huge web application, a modern David and Goliath if you will. Frontend debugging <em>tricks</em> can take down your application! Every change is important, certainly changes that happen in code that's used very frequently. Some changes that look inconspicuous can over time become real bottlenecks. Tools like Kibana and the browser profiler &amp; network tabs really helped us a great deal finding the issue, so don't forget what you have at your disposal.</p>

<p>We hope you enjoyed reading about our failures! Happy debugging! üëã</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How I Hacked My Future Through Clarabridge]]></title>
            <link href="/blog/2019/09/02/how-i-hacked-my-future-through-clarabridge"/>
            <updated>2019-09-02T11:00:00+00:00</updated>
            <id>/blog/2019/09/02/how-i-hacked-my-future-through-clarabridge</id>
            <content type="html"><![CDATA[<p>A few months ago, Mohammed joined our Clarabridge Engage development team for an internship and he has since then become one of our full team members. This blog post is about his story and how <a href="https://hackyourfuture.be/">HackYourFuture.be</a> helped him find a place in our company, the technology industry of Gent, and ultimately Belgium.</p>

<blockquote>
  <p>‚ÄúThree years ago I decided to leave my homeland, after an exhausting period of war, destruction and loss. I left my family hoping to improve my future and achieve my ambition. 
  Belgium was my destination and by now I‚Äôm pretty sure that it was the right choice. When I got the Belgian residence I started to search for a job based on my resume in Palestine. I had graduated from the 'Information and Technology department' in Gaza, but I knew that I needed more experience and knowledge if I wanted to make it work here.‚Äù - Mohammed</p>
</blockquote>

<h2 id="my-experience-at-hackyourfuture">My Experience at HackYourFuture</h2>

<p>In his search for more education and building more experience, Mohammed was helped by the <a href="https://www.vdab.be/">VDAB</a>, Flanders‚Äô public employment service. They suggested he attend the HackYourFuture course.
HackYourFuture was founded in 2015 in Amsterdam, with the aim to enable refugees to build digital skills for a career in web development, facilitate the integration of newcomers, and address the shortage of qualified workforce in the IT sector, a shortage reflected by the amount of open positions we have here at <a href="http://clarabridge.com/careers">Clarabridge</a>.<br />
In May 2018, HackYourFuture Belgium launched its first class in Belgium with 13 highly motivated students, Mohammed being one of them.</p>

<p>Mohammed recalls the course was a perfect match for him for several reasons:</p>

<blockquote>
  <p>‚ÄúThe course covered programming languages with interesting modules (CSS, HTML, JavaScript, Node.js, React).  Each of the modules are taught by volunteer coaches with experience in the field of programming.‚Äú<br />
  ‚ÄúBecause the courses were given on Sundays, it allowed me extra spare time to continue my Dutch lessons and driving lessons. And although I‚Äôm learning Dutch, the fact that the lessons were taught in English helped me too.‚Äù</p>
</blockquote>

<p><center>
<img src="/images/2019-09-02-how-i-hacked-my-future-through-clarabridge/first-class.jpeg" alt="The first class of HackYourFuture Belgium" /><br />
<em>The first class of HackYourFuture Belgium</em>
</center></p>

<p>During 6 months the students followed these lessons and for the last 9 weeks they worked on a project together in smaller groups.</p>

<blockquote>
  <p>‚ÄúThe coaches of HackYourFuture were as excited as we were, because for most of them it was their first time teaching. During the week, when we studied and worked on our assignments, they were always available through Slack to answer our questions.</p>
</blockquote>

<p>When asked about what makes the HackYourFuture bootcamp stand out from following any of the online courses plentifully available through the internet, Mohammed points to the team aspect:</p>

<blockquote>
  <p>‚ÄúBy the final project we worked in groups of three, and every Sunday we divided the work between us. During the week we also kept in touch, and often we could use the HackYourFuture offices to work on the project.‚Äù</p>
</blockquote>

<p>Mohammed‚Äôs project involved making a website for an institution from Brussels that would help homeless people and refugees to find the right information and help more easily. At the end of the course each team presented that project. At this graduation event one of our Clarabridge team members was also present.<br />
Of course, for the students, it now became real. Mohammed: ‚ÄúWe were worried about the next step, which would either be an internship or a job.‚Äù HackYourFuture assigned each student a mentor that would help the student take that next step.</p>

<p><center>
<img src="/images/2019-09-02-how-i-hacked-my-future-through-clarabridge/mohammed-graduation.jpeg" alt="Mohammed at the graduation" /><br />
<em>Mohammed at the graduation</em>
</center></p>

<h2 id="starting-the-internship-at-clarabridge">Starting the internship at Clarabridge</h2>

<p>This was the time when our company came into view for Mohammed. After having seen the projects at the HackYourFuture graduation event, we were impressed how far they got in only 9 weeks. We invited Mohammed for an interview, and his dedication immediately struck us. He explained what he was able to build, and what he learned at the HackYourFuture course, and this for us was the main deciding factor for offering an internship.</p>

<blockquote>
  <p>‚ÄúI was lucky to get a four month internship at <a href="https://www.clarabridge.com">Clarabridge</a> in Ghent, Belgium. I have learned new things every day, being surrounded by experienced and talented developers and engineers who are very helpful and very patient. They didn‚Äôt seem to get bored of my hundreds of questions.‚Äù</p>
</blockquote>

<p>When an intern joins our team, we first of all look for the right project to work on. The ideal project is typically a stand-alone new feature (so the scope of it is clearly defined), challenging enough (from a technical and product perspective), should have as less external factors as possible (so there‚Äôs as little roadblocks as possible), involves enough existing components of the codebase (to evaluate how easy a person finds their way), and most importantly: a project that results in something that we can take into production and is visual to our clients and team. Having that success experience of having your code shipped into production is something we always strive for.</p>

<p>Mohammed started his work on an importer-system that would allow our customers to upload an Excel file with a list of account related settings. The feature would mean a huge time-saver for customers who want to configure several canned responses, tags, or saved filters at once.<br />
Mohammed was assigned a specific mentor in our team as well (who helped on an almost daily basis), but the whole team got involved in reviewing parts of Mohammed‚Äôs code.</p>

<p><center>
<img src="/images/2019-09-02-how-i-hacked-my-future-through-clarabridge/pull-request.png" alt="Mohammed‚Äôs first major Pull Request" /><br />
<em>Mohammed‚Äôs first major Pull Request</em>
</center></p>

<h2 id="what-i-learned">What I learned</h2>

<p>Four months later, when this and several other projects of Mohammed's have been taken into production, we asked Mohammed what some of his main takeaways since his start in our team are:</p>

<ul>
<li><p>üè† ‚ÄúWhen I started at Clarabridge, my main worry was that I had never written a line of PHP code in my life. I was wondering how I‚Äôd be able to get the hang of a complete language in only a couple of months. But actually, I quickly realised that learning PHP was the least of my concerns. Instead, my mentor and I focused a lot on how to write code using the principles of S.O.L.I.D. I probably learned more about programming trying to structure my code this way, than learning about language syntax.‚Äù</p></li>
<li><p>‚úÇÔ∏è ‚ÄúI always had to keep in mind that I was writing code for others. At some point in the future, another developer in the team will work on what I wrote, so I had to think wider and wiser, and take future uses and possibilities of my code into account. I refactored my code several times because of this.‚Äù</p></li>
<li><p>üî® ‚ÄúIt‚Äôs sometimes tempting to fix an issue by writing code around it, but I realised that often this just causes a new issue. I try to to take more time to solve the problem at its root.‚Äù</p></li>
<li><p>üìö ‚ÄúWhen I started my internship, I read the blog posts on this <a href="https://engagor.github.io/">Clarabridge Developers Blog</a>. Unfortunately, I had a hard time understanding some of the content. A month later, I re-read them and could already understand more. Until this day, I keep reading the posts which didn‚Äôt make sense at that time. Being part of an ambitious team who reads a lot, encouraged me to learn and read more too.‚Äù</p></li>
<li><p>üëØ ‚ÄúIt‚Äôs often a balance between trying to find the answer on your own, and avoiding to be stuck for too long, and eventually asking for help. Time is valuable.<br />
I started to trust my teammates‚Äô opinions, and worked on giving them a reason to trust me back. I learnt to avoid saying ‚ÄúI can do it alone‚Äù  or ‚ÄúIt is a piece of cake‚Äù. Instead I said ‚ÄúI‚Äôll try to do it but I may need your help‚Äù. The team loves to help each other; so if you need help, just say it. When getting help from others, my teammates often had other personal perspectives. I learned to accept that, and picked from those that suited me. Eventually, by experience, you will have your own perspective.‚Äù</p></li>
<li><p>üëæ ‚ÄúNever underestimate another programmer, even if you know that you have more experience than him; always try to listen, discuss and understand. 
During the summer holidays, a talented 18 year old student joined our team. He didn‚Äôt know a lot about our application, but in a very short period of time he implemented more than 12 small improvements to the product. The whole team was impressed by what he has done. Because the improvements he worked on were smaller, easy to understand projects, I also learned from him by reviewing and checking his Pull Requests.‚Äù</p></li>
</ul>

<p>That the most important lessons Mohammed lists are mainly about communication and how to learn from others, and the impact of that on how your code is structured, really show he‚Äôs become an integral part of our development team. It‚Äôs also a testament to the way a product is always built by a team of people (and not a single 10x engineer).
So it‚Äôs no surprise that the project Mohammed is currently helping to build is one of our most requested features.</p>

<h2 id="what-is-next%2C-and-how-can-you-help%3F">What is next, and how can you help?</h2>

<blockquote>
  <p>‚ÄúFor me, HackYourFuture was my starting point. I was invited to be an assistant coach in the upcoming course - now at its fourth edition already. For me this is a great opportunity to pay back some of their generosity, and of course to continue learning.‚Äù - Mohammed</p>
</blockquote>

<p>Know that HackYourFuture is run by volunteers. They are always on the lookout for people who work with challenging technologies in innovative companies. If you feel like sharing some of your knowledge with the students, maybe think about <a href="https://docs.google.com/forms/d/e/1FAIpQLSef3OH8546MJNllcvrv7KomHelqzrKNpnLRVbI1ZqbeajnluA/viewform">becoming a coach</a>?<br />
Helping as a coach can mean giving a few lessons, but also just being around when the students do their work, and trying to help out where possible.<br />
Know that HackYourFuture is not only about programming, it‚Äôs also a real <a href="https://www.facebook.com/HackYFutureBE/">community</a> supporting and helping each other to start a new career in Belgium.</p>

<p><center>
<img src="/images/2019-09-02-how-i-hacked-my-future-through-clarabridge/coaches.jpeg" alt="HackYourFuture Coaches" /><br />
<em>HackYourFuture Coaches</em>
</center></p>

<p>If you‚Äôre a company interested in hiring some of the graduates, we hope Mohammed‚Äôs story helps. We can attest that the students are trained to perform well as junior web developers in a modern IT team, write clean code, and think like problem solvers. From this experience we especially remember the student‚Äôs eagerness to learn and start a development career.</p>

<h2 id="mohammed-thanks">Mohammed thanks</h2>

<blockquote>
  <p>‚ÄúClarabridge is my home now, so one of my responsibilities is to make it bigger and keep it safe and shining.<br />
  With this post, I also want to thank everyone who helped me through my journey, by encouraging words or advice, or even a smile.<br />
  Thanks HackYourFuture and all of the coaches who showed the way for us, especially Frederik De Bleser who believed in me and kept giving me advice even after the course.<br />
  Thanks to my mentors at Clarabridge: Anthony, Toon and Cedric. And the other teammates who didn‚Äôt hesitate when I asked for help: Jenne, Gheerwijn, Thibaut, Thomas, Jared, Jasper, Hans and Erik. And thanks to Jurriaan who gave me the opportunity to be one of his team members, and for being a human before being a team leader.‚Äù</p>
</blockquote>

<h2 id="want-to-join-the-course%2C-or-do-an-internship-too%3F">Want to join the course, or do an internship too?</h2>

<p>If you feel like joining a HackYourFuture course, know they always accept applications. <em>(The 6th course is starting in a few days!)</em><br />
And of course, we also invite recent graduates or others interested in doing an internship in our team, to <a href="&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#106;&#x75;&#x72;&#114;&#105;a&#x61;&#110;&#46;p&#x65;&#x72;&#115;&#121;&#x6e;&#x40;&#99;&#108;a&#x72;&#x61;&#98;&#114;&#x69;&#x64;&#103;&#101;&#x2e;&#x63;&#111;&#109;">contact us</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Why Inheritance Makes Me Cry]]></title>
            <link href="/blog/2019/07/05/why-inheritance-makes-me-cry"/>
            <updated>2019-07-05T11:00:00+00:00</updated>
            <id>/blog/2019/07/05/why-inheritance-makes-me-cry</id>
            <content type="html"><![CDATA[<p>People receiving code reviews from me on a regular basis will know this by now, but if I see inheritance happening in new code, I get moody. I look the <code>extends</code> in the eye and prepare for battle. I pick up my <em>SOLID</em> axe and start examining the principle that will allow me to slay this sub-class beast. And then I cry a little because I'll have to explain again where this centuries-old grudge comes from.</p>

<p>Now, don't get me wrong. I do understand the usefulness of inheritance in very specific cases. But most of the time when I encounter a subclassed beast during a code review I go all out offensive on it. Let's explore why:</p>

<h2 id="single-responsibility-principle">Single Responsibility Principle</h2>

<p>If you've been Object Oriented Programming for some time and you've been looking around a bit, you've definitely encountered the <a href="https://en.wikipedia.org/wiki/SOLID">SOLID principles</a>. These are basically principles (not rules) that, when followed, will help you produce code that's easier to comprehend, change and test than when you were not following them. The first principle is the Single Responsibility Principle, which states that <em>a class should have only one responsibility</em>, or "one reason for change".</p>

<p>Let's try and use that to mitigate this case of inheritance:</p>

<pre><code class="php">interface Users
{
    public function getById(UserId $id): User;
}

class UsersDB implements Users
{
    protected $db;

    public function __construct(DB $db)
    {
        $this-&gt;db = $db;
    }

    public function getById(UserId $id): User
    {
        // ...
    }
}

class UsersCached extends UsersDB
{
    protected $cache;

    public function __construct(Cache $cache, DB $db)
    {
        parent::__construct($db);

        $this-&gt;cache = $cache;
    }

    public function getById(UserId $id): User
    {
        // get from cache?

        // if not in cache
        $user = parent::getById($id);

        // put in cache

        return $user;
    }
}
</code></pre>

<p>Apart from all other issues that we have here, let's try to find out if the <em>Single Responsibility Principle</em> holds for this implementation. Looking at the class <code>UsersDB</code>, we can clearly see that it has just one responsibility: it represents a bunch of <code>User</code>s that are persisted to our database. It has no other reasons to change than for the purpose of representing users persisted in our database.</p>

<p>Now let's look at the <code>UsersCached</code> implementation. It represents a bunch of <code>User</code>s as well, in this case it caches them. We could think that this class has only one responsibility, until we see the <code>parent::getById()</code> call. It basically calls a method that we inherited (so it's available in our class) from the parent class. The knowledge needed to query the database is actually in our class because of the inheritance!</p>

<p>You could argue that it's still ok since it's clearly a parent class and nothing's wrong there, but let's look at it through the lense of <em>a class should have only one reason for change</em>. What if we decide that the constructor of the <code>UsersDB</code> class will now take a <code>PDO</code> instance instead of our own <code>DB</code> class? Guess what! The implementation of our <code>UsersCached</code> needs to change as well, because it needs to pass the PDO instance on to its parent. So a decision about the database made us change the caching class. And it's obvious that changing the caching mechanism would also affect the caching class. Which gives us more than one reason for change of this class.</p>

<p>This is clearly a violation of the Single Responsibility Principle.</p>

<p>We could fix this e.g. by using the <a href="https://en.wikipedia.org/wiki/Decorator_pattern">Decorator Pattern</a>:</p>

<pre><code class="php">interface Users
{
    public function getById(UserId $id): User;
}

final class UsersDB implements Users
{
    private $db;

    public function __construct(DB $db)
    {
        $this-&gt;db = $db;
    }

    public function getById(UserId $id): User
    {
        // ...
    }
}

final class UsersCached implements Users
{
    private $users;
    private $cache;

    public function __construct(Users $users, Cache $cache)
    {
        $this-&gt;users = $users;
        $this-&gt;cache = $cache;
    }

    public function getById(UserId $id): User
    {
        // get from cache?

        // if not in cache, get from nested user object
        $user = $this-&gt;users-&gt;getById($id);

        // put in cache

        return $user;
    }
}
</code></pre>

<p>As you can see, it's only a very small change.</p>

<ul>
<li>we added <code>final</code> keywords to our classes and <code>private</code> to our variables to indicate that we don't want inheritance to happen üòè</li>
<li>we made both classes <code>implement</code> the <code>Users</code> interface</li>
<li>we injected an implementation of the <code>Users</code> interface into the constructor of the <code>UsersCached</code>, which will be called when no user is found in the cache.</li>
</ul>

<p>You could try and argue that this is no better because we still rely on the <code>Users</code> interface to stay stable. But if that interface changes, the responsibility "representing a bunch of users" changes, which is exactly the one responsibility that we have for our class. Changing the implementation of our <code>UsersDB</code> class will not affect the <code>UsersCached</code> class anymore, except when the contract of the interface is broken. Great!</p>

<h2 id="dependency-inversion-principle">Dependency Inversion Principle</h2>

<p>Let's take a short second look at the same code examples from above, now while trying to look at it from another one of the SOLID principles, the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion Principle</a>. The principle comes down to <em>depending on abstractions instead of concretions</em>. In the case of the first example, the <code>UsersCached</code> extends <code>UsersDB</code>, which it needs when there's nothing found in the cache. We depend on a concrete class, which is a violation of the principle. In the second example, we made <code>UsersCached</code> implement the interface directly instead of extending from <code>UsersDB</code>. We then inject another implementation of <code>Users</code> in the constructor of <code>UsersCached</code>. Since we depend on the <em>interface</em> here, we don't depend on a concrete class anymore, and any implementation of the <code>Users</code> interface should work! This solution follows the principle! An added benifit of this is that our <code>UsersCached</code> instance is now much easier to test: we just need to inject a fake <code>Users</code> interface and see if it gets called when the cache doesn't have the value that we look for.</p>

<p>You could do the same with the other SOLID principles really, take e.g. <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>. If a class extends from our class, it can easily overwrite a method to behave completely differently than what it was, so the principle doesn't hold. Again, it's easy to make a violation there.</p>

<h2 id="shared-dependencies">Shared Dependencies</h2>

<p>Now that we have a few SOLID reasons to say that inheritance is not a desirable solution for our problems, let's look at some other ways that I think it is misused. Consider this example:</p>

<pre><code class="php">abstract class Notification
{
    protected $id;

    public function __construct(Id $id)
    {
        $this-&gt;id = $id;
    }

    public function toUrl($relative = true): string
    {
        $path = "/notifications/{$this-&gt;id}";

        if ($relative === true) {
            return $path;
        } else {
            return "https://domain.of.application{$path}";
        }
    }
}
</code></pre>

<p>I see this kind abstract classes quite often. It's a form of deduplication (people think they shouldn't repeat code), but what's problematic is the fact that you won't always know what kinds of exceptions to the rule there are going to be. Consider a class <code>AccountSpecificNotification</code> which extends from <code>Notification</code>. It wants to overwrite the <code>toUrl()</code> method, because account specific notifications are at <code>/account/{accountId}/notifications/{notificationId}</code>. Trouble is, we have to again implement the absolute and relative paths rule, and the chance of making mistakes becomes higher. Also the absolute URL of our domain is now in two classes. The knowledge about converting a notification to a URL is also in two classes. If we have a few of these exceptions, stuff gets difficult to keep track of.</p>

<p>As a solution, you could just make this class an interface and specify the <code>toUrl()</code> method on <code>Notification</code> instances. This way you always know the implementation for a certain type of <code>Notification</code> will be in the class itself. Then you'll have to live with the duplication. This is personally how I often do it. I <a href="https://medium.com/@nicolopigna/this-is-not-the-dry-you-are-looking-for-a316ed3f445f">duplicate stuff when in doubt and refactor later</a>, with the benefit of hindsight.</p>

<p>Another thing that you could do is look at the <code>toUrl()</code> method, and see that it's in fact a shared dependency between <code>Notification</code>s with another responsibility than "representing a notification". It could become another class. Let's write a separate class for it:</p>

<pre><code class="php">final class NotificationToUrl
{
    public function getRelativeUrlForNotification(Notification $notification): string
    {
        $url = '/notifications/' . $notification-&gt;getId();

        if ($notification instanceof AccountSpecificNotification) {
            $url = '/account/' . $notification-&gt;getAccountId();
            $url .= '/notifications/' . $notification-&gt;getId();
        }

        return $url;
    }

    public function getFullUrlForNotification(Notification $notification): string
    {
        $path = $this-&gt;getRelativeUrlForNotification($notification);

        return "https://domain.of.application{$path}";
    }
}
</code></pre>

<p>Of course this is not perfect either, but it's at least a bit better from some standpoints: we get all the knowledge of converting notifications to URLs in one place, and we don't need inheritance!</p>

<h2 id="in-short">In short</h2>

<p>If you're using inheritance to fix a problem, I propose that you take a second and ask yourself why. In this post I propose a few ways of looking at inheritance that could help you come to a better solution in some cases.</p>

<ul>
<li>Are you violating one of the SOLID principles? Try and look for a solution where you can adhere to them more.</li>
<li>Are you trying to remove duplication? Try to <a href="https://medium.com/@nicolopigna/this-is-not-the-dry-you-are-looking-for-a316ed3f445f">postpone your decisions about the abstraction</a> that you're going to use to remove the duplication.</li>
<li>Do you have a shared method that multiple classes need? Try extracting it to a separate class.</li>
</ul>

<p>Since most of the time one of these methods produces a result that I find more desirable as explained in this post, I'll mostly oppose strongly against the use of inheritance when it's not strictly needed.</p>

<p>Hope that you'll be with me on slaying this beast! Until next time, happy programming! üê≤</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Exceptional Exceptions]]></title>
            <link href="/blog/2019/05/22/exceptional-exceptions"/>
            <updated>2019-05-22T15:00:00+00:00</updated>
            <id>/blog/2019/05/22/exceptional-exceptions</id>
            <content type="html"><![CDATA[<p>You've made it to this post thinking "Why do we still need to talk about Exceptions?". Well, they're used everywhere in OOP codebases, but sometimes they're used in a way that make debugging a bit difficult. Let's look at some ways to make debugging exceptions a bit more fun!</p>

<p>You know that feeling when you're trying to investigate an Exception that was thrown, but you can't seem to find the origin of it? You dig a bit deeper and you find that it's an exception that was caught and not rethrown, e.g.:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!');
}
</code></pre>

<p>Now, when you encounter this <code>SomethingWentWrongException</code>, you'll see that the trace takes you back to the 6th line of this code example. All information that was inside the <code>VeryDescriptiveException</code>, including its message, stack trace and other useful information is gone. Of course, debugging that error in <code>doSomeImportantStuffWith()</code> would be much easier if you had all that info.</p>

<pre><code class="php">Fatal error: Uncaught SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withoutPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<h2 id="prevent-information-loss-by-using-%60%24previous%60">Prevent information loss by using <code>$previous</code></h2>

<p>The obvious answer to this simplified example would be to just rethrow the <code>VeryDescriptiveException</code> instead of throwing a more general <code>SomethingWentWrongException</code>... And that would be valid, but let's say we're implementing an Interface that prescribes that we only throw <code>SomethingWentWrongException</code>s. We can't let the <code>VeryDescriptiveException</code> through or we'll break the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>. We want to throw that specific <code>SomethingWentWrongException</code>, while still somehow preserving the information of that previous exception that we caught. Let's check <a href="https://www.php.net/manual/en/exception.construct.php">the docs</a>:</p>

<p><img src="/images/2019-05-24-exceptional-exceptions/php-docs-exception-construct.png" alt="PHP Docs for the Exception Constructor" /></p>

<p>That <code>Throwable $previous = null</code> is what we're looking for! I've almost never seen this being used in the wild, but it's great for our usecase:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!', 0, $e);
}
</code></pre>

<p>this results in this error:</p>

<pre><code class="php">Fatal error: Uncaught VeryDescriptiveException: hello there! in test.php:15
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(23): Test-&gt;doSomeImportantStuffWith('test')
#1 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#2 {main}

Next SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<p>As you can see, the stack trace of the original exception along with the one we wrapped it in are presented to us on error! We can see the message as well, and we can even add our own properties to the exception and be presented with them here if we just implement the <code>__toString()</code> method of the exception.</p>

<h2 id="custom-properties-in-exceptions">Custom properties in exceptions</h2>

<p>Let's say we've been building an API client that does some HTTP requests to an endpoint. Something can go wrong during the HTTP request, and we want to thrown an <code>ApiConnectionFailed</code> exception whenever the HTTP response code is not <code>2xx</code> or something else fails, so that the rest of our application has one single Exception it needs to prepare for. It would be very handy to debug if that exception contained our HTTP Request &amp; Response objects, e.g.:</p>

<pre><code class="php">final class ApiConnectionFailed extends Exception
{
    private $request;
    private $response;

    public static function withHttpRequestAndResponse(
        $message,
        Request $request = null,
        Response $response = null,
        Throwable $previous = null
    ) {
        $exception = new static($message, 0, $previous);
        $exception-&gt;request = $request;
        $exception-&gt;response = $response;

        return $exception;
    }

    public function __toString()
    {
        $string = parent::__toString();
        $string .= "\n{$this-&gt;request}";
        $string .= "\n{$this-&gt;response}";

        return $string;
    }
}
</code></pre>

<p>As you can see, we used a <a href="http://verraes.net/2014/06/named-constructors-in-php/">named constructor</a> <code>withHttpRequestAndResponse</code> to be able to keep the default constructor for Exceptions, but to also be able to construct it using a lot of extra relevant debugging information. This means that this Exception behaves like other exceptions and is very transparent to other developers.</p>

<p>If something fails, we'll construct the exception like this:</p>

<pre><code class="php">try {
    $response = $httpClient-&gt;execute($request);
} catch (HttpClientException $e) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'Http connection could not be established',
        $request,
        null,
        $e
    );
}

if ($response-&gt;getResponseCode() === 500) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'We got a 500 error from the host',
        $request,
        $response
    );
}
</code></pre>

<p>The exception will always contain all relevant information to be able to debug.</p>

<h2 id="recap">Recap</h2>

<p>To quickly recap, you can make your life a lot easier by</p>

<ul>
<li>providing exceptions with descriptive names</li>
<li>providing the <code>$previous</code> exception when rethrowing</li>
<li>providing all relevant data to an exception</li>
<li>providing named constructors for your exceptions to be able to add debugging info but keep the original constructor</li>
</ul>

<p>Hope that helps! Until next time, have fun coding! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Implementation Details]]></title>
            <link href="/blog/2019/01/28/lambda-implementation-details"/>
            <updated>2019-01-28T14:30:00+00:00</updated>
            <id>/blog/2019/01/28/lambda-implementation-details</id>
            <content type="html"><![CDATA[<p><strong>This is the sixth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%F0%9F%A4%94-how-do-you-hide-your-internals%3F">ü§î How do you hide your internals?</h2>

<p>In OOP, we're used to hiding the implementation details of our classes by using interfaces. We can just define a contract that the rest of the application needs to adhere to, and keep the knowledge of the internals completely separate from the rest of the system. Let's look at a simple interface:</p>

<pre><code class="php">&lt;?php

namespace Dns;

interface Client
{
    public function resolve(Request $request): Response;
}
</code></pre>

<p>As a consumer of this interface, we actually know everything we need to know to start programming. We'll inject the class we're making with a <code>DNS\Client</code> instance later, the actual implementation of it doesn't concern us right now. We have enough information to create our application knowing that we can send the client a <code>Request</code> and get a <code>Response</code> back. The internals of the <code>Dns\Client</code> can be changed at will, without altering our program.</p>

<p>For me, this was the biggest breakthrough of learning an Object Oriented language, the moment when using interfaces as contracts clicked. That's why, when I started to dive into Functional Programming languages, I wasn't really happy with what I saw. Where were the interfaces at?</p>

<h2 id="%F0%9F%98%85-exporting-from-modules-as-interface">üòÖ Exporting from modules as interface</h2>

<p>The first Functional Programming language I learnt was <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>. It was great! When you start learning it, you start to see the recursion patterns, see that syntax is only so important as the language makes it, and countless other nice things (programming with continuations, anyone?). What bothered me was that lists are used as the main data structure everywhere! You'll sometimes find libraries that do something like this:</p>

<pre><code class="scheme">(define address
  (list "Toon Daelman" "FooBarStreet 42" "9000 Ghent" "Belgium"))
</code></pre>

<p>Yes, that's a workable data structure, but it's not ideal... To get a person's country from their address, you need to do something like this:</p>

<pre><code class="scheme">(list-ref address 3)
</code></pre>

<p>Which means, from the <code>address</code> list, take the <code>3rd</code> (zero-based) index. That's not very readable at all, and it doesn't hide any of the details of our data structure. If we want to change it, every function interacting with this data structure will need to change as well.</p>

<p>Luckily, the problem was me. I didn't look far enough, and most people working with lisps have other ways of hiding their internals, for instance:</p>

<pre><code class="scheme">(module address (address country)
  (import scheme)

  (define address
    (lambda (name line1 line2 country)
      (list name line1 line2 country)))

  (define country
    (lambda (address)
      (list-ref address 3)))
)
</code></pre>

<p>This is a scheme module, that exports two functions <code>address</code> and <code>country</code>. It uses the base library <code>scheme</code>. It defines a function <code>address</code>, that acts like a constructor and returns a black box object, that you can deconstruct using separate functions. In this case we only have a <code>country</code> function that takes an <code>address</code> and returns its <code>country</code>. Consuming modules of this <code>address</code> module need only now the constructor and the other functions, not that the underlying object is still a list!</p>

<p>And this lets us change the implementation as well!</p>

<pre><code class="scheme">(module address (address country)
  (import scheme)

  (define address
    (lambda (name line1 line2 country)
      (vector name line1 line2 country)))

  (define country
    (lambda (address)
      (vector-ref address 3)))
)
</code></pre>

<p>We're now using <code>vector</code>s as the datatype for <code>address</code> instead of <code>list</code>s, but the <code>address</code> constructor and the <code>country</code> getter function are still called the same and behave exactly the same. We could use the records features as well, still keeping the same public interface...</p>

<h2 id="%F0%9F%8E%A9-types">üé© Types</h2>

<p>The second Functional Programming language I started to look into was <a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a>. It immediately blew my mind with its type system. Let's check out this piece of code:</p>

<pre><code class="haskell">type AddressLine = String
type Country = String

data Address = Address
  { name :: String
  , line1 :: AddressLine
  , line2 :: AddressLine
  , country :: Country
  } deriving (Show)

countryFrom :: Address -&gt; Country
countryFrom = country
</code></pre>

<p>We define two type aliasses <code>AddressLine</code> and <code>Country</code>. Then we say that an <code>Address</code> consists of a <code>name</code>, a <code>line1</code> which is an <code>AddressLine</code>, a <code>line2</code> (also an <code>AddressLine</code>) and a <code>country</code> of the type <code>Country</code>. Then we define a function called <code>countryFrom</code> that takes an <code>Address</code> and returns a <code>Country</code>, which is implemented by just saying it's equal to <code>country</code>, the function that is automatically created to unwrap <code>Record</code>s.</p>

<p>In fact, creating the <code>countryFrom</code> function was just done as an example to show off the type annotations in a situation analogous to the previous example in scheme. The type system in Haskell allows us to not only write the contract of a function, but it allows us to write abstractions as well! Check this out:</p>

<pre><code class="haskell">head :: [a] -&gt; a
</code></pre>

<p>This is the type of the <code>head</code> function, which operates on lists. It takes a list of <code>a</code>s and returns an <code>a</code>. The <code>a</code> is a <em>type variable</em>, it substitutes for every type you can think of. This way, you can strictly type a function that can work with all sorts of types! Take for instance a list of <code>Address</code>es! Call <code>head</code> on that list, and you'll get the first <code>Address</code> of the list.</p>

<p>üé©‚û°Ô∏èüê∞</p>

<p>üòç I love this, it's like magic! And it goes even further. Let's say you want to be able to declare the function <code>==</code> which takes two arguments and checks if they're equal to each other. You would think that that would be easy using <em>type variables</em>, doing something like this:</p>

<pre><code class="haskell">(==) :: a -&gt; a -&gt; Bool
</code></pre>

<p>Which means, a function <code>==</code> which takes two arguments of the same type (we use <code>a</code> for both arguments, which means we don't care which type it is, but it should be the same for both arguments) and returns a <code>Bool</code>. The problem is that there's no certainty that the type <code>a</code> has a concept of equality to it. It could be that we want to be able to define our own rules for equality on a type-by-type basis as well... That's why that signature <code>a -&gt; a -&gt; Bool</code> isn't enough.</p>

<p>Haskell actually has another abstraction over their types to allow us to put the <code>a -&gt; a -&gt; Bool</code> in a context:</p>

<pre><code class="haskell">class Eq a where
  (==) :: a -&gt; a -&gt; Bool
  x == y = not (x /= y)

  (/=) :: a -&gt; a -&gt; Bool
  x /= y = not (x == y)
</code></pre>

<p>This is a typeclass named <code>Eq</code> that defines equality for every type <code>a</code> that we say is part of the typeclass. It defines two functions, <code>==</code> and <code>/=</code>, which both take two arguments of the type <code>a</code> and return a <code>Bool</code>. What's also nice, is that they're both defined in terms of each other. <code>==</code> says that it's <code>not (/=)</code> and vice versa.</p>

<p>Now, if we want to make our <code>Address</code> type part of the typeclass <code>Eq</code>, we can just implement the <code>==</code> function, and we get the other one for free because it's defined in terms of <code>==</code>. Let's look at an example:</p>

<pre><code class="haskell">instance Eq Address where
  x == y = sameAddressLines &amp;&amp; sameCountry
    where sameAddressLines = (line1 x == line1 y) &amp;&amp; (line2 x == line2 y)
          sameCountry = country x == country y
</code></pre>

<p>In this case, we say <code>Address</code>es are the same if their <code>AddressLine</code>s and <code>Country</code> are the same. We don't take <code>name</code> into consideration. Now we can <code>==</code> on <code>Address</code>es everywhere. If you don't need special rules for deriving equality for a given type, the Haskell compiler can derive it for your type using the <code>deriving (Eq)</code> statement.</p>

<h2 id="%F0%9F%A4%93-what-can-we-learn-from-this%3F">ü§ì What can we learn from this?</h2>

<p>We've seen two ways of how implementation details can be hidden in a functional programming environment. When we're in Object Oriented environments we do almost the same things, but we use interfaces for them. And we use interfaces to describe contracts for many other things we want to do. That's why I'm sometimes confused when I stumble upon an interface: what's the primary reason for it to be here? Is it there to define a contract for external systems? Is it meant to hide implementation details or is it just part of a design pattern used in this package? Is it a marking interface used to indicate the type of the implementing class? Not every class needs to be implementing an interface... It already has one! All public methods of a concrete class can be seen as its public interface. And I think in most cases like the first example in scheme where we want to hide the internals of a datatype, a concrete class can be enough (think <code>ValueObject</code>s).</p>

<p>I find that in Object Oriented Programming, thinking about types as you do when writing e.g. Haskell, tends to help when defining your interfaces effectively. One of the biggest differences is the manifestation of side-effects: In Haskell, there's a type for functions with side effects, while interfaces in Object Oriented languages mostly don't give you any insights into that (I've often thought about annotating side-effects in the docblocks of my interfaces).</p>

<p>While PHP doesn't allow you to implement your own Equality rules for your classes, some Object Oriented languages do. Compare these examples:</p>

<pre><code class="php">$foo == $bar;
</code></pre>

<pre><code class="php">$foo-&gt;equals($bar);
</code></pre>

<p>In the first example, we can't influence how PHP compares two instances of our class, while in the second one, we have complete control (even over the name of the method). It depends on taste what's best, certainly when your language allows you to overload <code>==</code> for your classes. Always try to make it as readable as possible!</p>

<p>Wow, we made it through! Hope to see you in the next episode! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Our Favorite Content Of 2018]]></title>
            <link href="/blog/2019/01/04/our-favorite-content-of-2018"/>
            <updated>2019-01-04T13:00:00+00:00</updated>
            <id>/blog/2019/01/04/our-favorite-content-of-2018</id>
            <content type="html"><![CDATA[<p>As a team, we consume A LOT of blog posts, YouTube videos, podcasts, and tweets about software development and related topics each year. Like <a href="/blog/2017/12/22/our-favorite-content-of-2017">last year</a>, we asked everyone in the team to share their favorite stuff that they found online, so that you can read it too. Here we go!</p>

<h1 id="people">People</h1>

<h3 id="the-art-of-job-interviewing"><a href="https://www.artofwork.co/job-interviewing">The Art of Job Interviewing</a></h3>

<p>Toon thinks this is the most complete and thought-through blogpost about interviewing people that you can find, and there are a lot of good ideas to try out in your company!</p>

<h3 id="when-no-gender-fits"><a href="https://uxplanet.org/when-no-gender-fits-33301c3cab53">When No Gender Fits</a></h3>

<p>Jurriaan has been working towards gender neutral design of our application, which is why this blogpost comes up. We often don't even see the way we're biased, and this blogpost shows us where to look.</p>

<h3 id="our-first-year-of-growth"><a href="https://medium.com/women-code-be/our-first-year-of-growth-6384eba5a3e2">Our First Year Of Growth</a></h3>

<p>Ursula has told us a few times about women.code(be), and this blogpost is a nice read about what they did in 2018!</p>

<h1 id="agile-%26-pair-programming">Agile &amp; Pair Programming</h1>

<h3 id="alan-cooper-thread-on-agile-%26-pair-programming"><a href="https://twitter.com/MrAlanCooper/status/1060553914209071106">Alan Cooper thread on Agile &amp; Pair Programming</a></h3>

<p>We were really into pair programming the last months of the year, and found this thread really inspiring!</p>

<h3 id="how-to-keep-pair-programming-digestible"><a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">How To Keep Pair Programming Digestible</a></h3>

<p>This is a fine blogpost with some tips that helped us to keep our sanity this year, during the <a href="/blog/2018/12/07/one-month-of-pairing">pair programming by default</a> experiment.</p>

<h1 id="software-design">Software Design</h1>

<h3 id="extremely-defensive-php"><a href="https://www.youtube.com/watch?v=Gl9td0zGLhw">Extremely Defensive PHP</a></h3>

<p>Jasper saw this talk by Marco Pivetta, and although Marco has been giving this talk for some years now, on multiple conferences, it's still a great talk to see!</p>

<h3 id="game-devs-vs-c%2B%2B"><a href="https://twitter.com/aras_p/status/1076947443823136768">Game Devs vs C++</a></h3>

<p>Jeffry was reading a lot of <a href="https://twitter.com/aras_p/status/1076947443823136768">twitter<sup>1</sup></a> <a href="http://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/">threads<sup>2</sup></a> <a href="https://twitter.com/SebAaltonen/status/1080069784644059139">about<sup>3</sup></a> <a href="https://twitter.com/lucasmeijer/status/1080782217092030464">this<sup>4</sup></a> over Christmas. Check them out!</p>

<h3 id="overreacted"><a href="https://overreacted.io/">Overreacted</a></h3>

<p>Anthony recommends this blog about mostly React stuff! Great content, good examples... What else do you want?</p>

<h1 id="frameworks">Frameworks</h1>

<h3 id="stop-learning-frameworks"><a href="https://sizovs.net/2018/12/17/stop-learning-frameworks/">Stop Learning Frameworks</a></h3>

<p>Jurriaan liked this blog post. We're developers, software engineers, programmers. We're not only specialized in a framework! What we study is the way of solving problems, and frameworks are merely tools for our craft. This is valuable advice that has been given to us over the years, and people new to development tend to forget.</p>

<h3 id="the-end-of-silex"><a href="https://symfony.com/blog/the-end-of-silex">The End Of Silex</a></h3>

<p>We're sad to see our favorite "framework as a library" go, but it's safe to say that it served its purpose incredibly well. Thanks Silex!</p>

<h3 id="tailwind-css"><a href="https://tailwindcss.com/">Tailwind CSS</a></h3>

<p>Tailwind CSS has been hot news in the frontend community, which is why Thomas wanted to share this link. A new CSS Framework? Again? Yes, and this time, the design principles used are a little different than before. Check it out!</p>

<h1 id="social-media">Social Media</h1>

<h3 id="bbc-thread-on-social-media-mining-to-solve-war-crimes"><a href="https://twitter.com/BBCAfrica/status/1044186344153583616">BBC thread on Social Media Mining To Solve War Crimes</a></h3>

<p>The way BBC reporters used social media and readily available tools like Google Maps to investigate this War Crime is really impressive. The power of social media is confirmed yet again.</p>

<h3 id="thread-about-repeal-the-8th"><a href="https://threadreaderapp.com/thread/1000701354204069888.html">Thread about Repeal The 8th</a></h3>

<p>Ursula thinks this is a fascinating read about how social media was used for the "repeal the 8th campaign" in Ireland. It compares to how Trump used social media too... Relevant to the times!</p>

<h3 id="the-most-sophisticated-piece-of-code-ever-written"><a href="https://www.quora.com/What-is-the-most-sophisticated-piece-of-software-code-ever-written/answer/John-Byrd-2">The Most Sophisticated Piece Of Code Ever Written</a></h3>

<p>Plugged by Toon, this is a lengthy explanation of why Stuxnet might be the most advanced piece of code ever written. Even if you don't agree, it's a very nice read!</p>

<p>Those were some of our highlights for 2018, have a great 2019!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Experiment: Pair Programming By Default]]></title>
            <link href="/blog/2018/12/07/one-month-of-pairing"/>
            <updated>2018-12-07T16:00:00+00:00</updated>
            <id>/blog/2018/12/07/one-month-of-pairing</id>
            <content type="html"><![CDATA[<p>As you could already read in some of our <a href="/blog/2017/05/22/implementing-little-big-details-on-offsite-bootcamp">previous</a> <a href="/blog/2017/03/01/batman-chatman">blogposts</a>, we are a relatively small team, with some loose rules for working together. Up until one month ago, everyone just picked a project from the roadmap and started implementing, and there was a rotation system within the team to always have two people available to help out our support team to assess bugs &amp; fix issues respectively.</p>

<h2 id="%F0%9F%92%AD%F0%9F%98%B0-about-silos-%26-issue-fatigue">üí≠üò∞ About Silos &amp; Issue-Fatigue</h2>

<p>As you can imagine, this works really well for projects that are small and well defined, and for teams where everyone is of the same skill level, and has the same development practices. People are not in each other's ways, and you can "horizontally scale" your team. The only trouble is, we're a small team, we have senior and junior developer profiles, and our projects are mostly not so small. The result of this, is that the person implementing a feature is most likely the only one that <strong>really</strong> knows the feature inside out. So the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> for every feature was basically 1. For some features we had insane knowledge silos.</p>

<p>There's a similar story to the support rotation system within the team: the people talking to support and fixing bugs most likely didn't implement the features where the bugs appeared. If they did, the bugs were quickly fixed, and if not, people had to try and understand code written by someone else that they'd never seen <strong>over and over</strong> again. Not ideal. And the result was that for me personally, weeks when I was Batman (yes that's how we call the lucky engineer that's solving bugs that week) were the most draining periods of the year.</p>

<h2 id="%E2%9A%97%EF%B8%8F%F0%9F%94%AC-the-experiment">‚öóÔ∏èüî¨ The Experiment</h2>

<p>We do weekly roundups, and after an exhausting week of being Batman, I, expressed my feelings towards the Silos and the Batman weeks. The whole team actually agreed that the situation was not perfect, and we decided it was time for an experiment:</p>

<ul>
<li>Split up the (already small) team in two groups of people (3 to 4 people per group) that will always try to work together on the same feature.</li>
<li>Start every day together with your team (at the same computer or over <a href="https://get.slack.help/hc/en-us/articles/216771908-Make-calls-in-Slack">Slack Voice Calls</a>) trying to solve issues or create features using Pair Programming techniques. Split up the team for "monkey-jobs".</li>
<li>Both teams provide one team member per week to be Batman or Robin. They form their own team and tackle bugs together.</li>
</ul>

<p>We limited the scope of the experiment to the winter release, so 3 months. So far we did a (very limited) retrospective every week.</p>

<h2 id="%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB%F0%9F%91%A8%E2%80%8D%F0%9F%92%BB-what-have-we-learned-so-far%3F">üë©‚Äçüíªüë®‚Äçüíª What have we learned so far?</h2>

<p>We've only been doing this for 4 weeks, so I might be jumping to conclusions here. So far the experience has been positive!</p>

<ul>
<li>It's great to be able to verify your ideas immediately, and to try and build a shared understanding of the problem you're working on.</li>
<li>Pair Programming is exhausting, but it works! We feel the velocity gain and the concentration boost. We find that we're writing better code. We feel productive.</li>
<li>We're aware that it's exhausting and we take a lot of breaks, stop early when we're tired.</li>
<li>We're using Slack as team communication tool, and when someone is working at home, we can just keep Pair Programming because of the built-in voice calls and screen sharing. Slack even allows you to share your mouse and keyboard with the person at the other side of the call (that is, if you've installed Slack from their website instead of from the App Store).</li>
<li>We found this great blogpost with some basics to <a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">keep Pair Programming digestible</a>, by my friend <a href="https://twitter.com/woutersioen">Wouter Sioen</a>.</li>
<li>We've done some ad-hoc pair programming in the past, but starting the day at the same computer really helps you keep it up and encourages you to do it more often.</li>
<li>Batman and Robin are <em>way faster</em> at finding and fixing bugs than when they were working alone. Having that extra developer by your side improves your bug finding experience massively. When working alone, overlooking a small mistake could take up hours, while your pair could spot that in seconds. Our CTO <a href="https://twitter.com/oemebamo">Jurriaan Persyn</a> pointed out that we've fixed a third more issues than last month, even some that were open for a long time already!</li>
</ul>

<h2 id="%F0%9F%93%9A%F0%9F%A7%90-some-resources">üìöüßê Some resources</h2>

<ul>
<li><a href="https://tuple.app/pair-programming-guide/">Tuple's Pair Programming Guide with lots of good tips!</a></li>
<li><a href="http://www.davefarley.net/?p=267">Blog: Pair Programming For Introverts</a></li>
<li><a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">Blog: How To Keep Pair Programming Digestible</a></li>
<li><a href="https://www.martinfowler.com/bliki/PairProgrammingMisconceptions.html">Blog: Martin Fowler on Pair Programming Misconceptions</a></li>
<li><a href="http://wiki.c2.com/?ExtremeProgramming">WikiWikiWeb on Extreme Programming</a></li>
<li><a href="https://twitter.com/MrAlanCooper/status/1060558122916278272">Great twitter thread by @MrAlanCooper about Pair Programming</a></li>
<li><a href="https://twitter.com/mathiasverraes/status/1063063502254936065">Mathias Verraes talking about Pair Programming for quality</a></li>
</ul>

<p>We hope we can keep it up! ü§û</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Syntax]]></title>
            <link href="/blog/2018/11/28/lambda-syntax"/>
            <updated>2018-11-28T11:30:00+00:00</updated>
            <id>/blog/2018/11/28/lambda-syntax</id>
            <content type="html"><![CDATA[<p><strong>This is the fifth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%E2%9C%A8-syntactic-sugar">‚ú® Syntactic Sugar</h2>

<p>When I was first reading <a href="http://learnyouahaskell.com/">Learn You A Haskell For Great Good</a>, I came across the term <em>Syntactic Sugar</em> and I was confused... My background in OOP languages made me cringe a little when I read about how you can create your own syntax in Haskell using infix operators and DSLs. It even goes so far that some functional languages have almost no syntax at all! Let's look at an example of "sugar":</p>

<pre><code class="haskell">map reverse
    (filter (\x -&gt; length x &lt; 5)
            ["foo", "bar", "baz", "qux", "ramsam"])
</code></pre>

<p>We're taking the list <code>["foo", "bar", "baz", "qux", "ramsam"]</code>, filtering out items that are 5 characters or longer, and reversing them all, one by one. The result is <code>["oof", "rab", "zab", "xuq"]</code>.</p>

<p>We can make this a little bit more readable by using Haskell's <code>$</code> infix operator, which allows us to remove some of the parentheses by evaluating the expression on its righthand side first:</p>

<pre><code class="haskell">map reverse $ filter (\x -&gt; length x &lt; 5) $ ["foo", "bar", "baz", "qux", "ramsam"]
</code></pre>

<p>Although the parentheses are gone, we still have to read from right to left if we want to know what exactly the result of this will be. We basically pipe the result of the expression on the right of the <code>$</code> to the expression on the left side of it. Some languages like F# have the <code>|&gt;</code> operator which allows you to pipe from left to right, so the exact opposite of the <code>$</code> operator. It's not idiomatic Haskell, but in some cases we might want to use it to create some clarity.</p>

<p>Since we know <code>|&gt;</code> is the exact opposite of <code>$</code>, let's just try to write it ourselves. In Haskell, infix operators are just normal functions with two parameters. Here's an example:</p>

<pre><code class="haskell">*repl &gt; 2 + 3
5

*repl &gt; (+) 2 3
5
</code></pre>

<p>The function <code>(+)</code> can be used as a normal Haskell function, writing the function first and its arguments after it, or as an infix operator, without the parentheses. So we know <code>($)</code> is a function taking two parameters, and we have <code>flip</code> which takes a function with two parameters, and flips the order of them!</p>

<pre><code class="haskell">(|&gt;) = flip ($)
</code></pre>

<p>Easy! Let's now write the original example using <code>(|&gt;)</code>:</p>

<pre><code class="haskell">["foo", "bar", "baz", "qux", "ramsam"]
  |&gt; filter (\x -&gt; length x &lt; 5)
  |&gt; map reverse
</code></pre>

<p>We created our own syntactic sugar! We can now read this left to right, or top to bottom as you will. The result of the first expression you read will be "piped" to the next as the last parameter! We get the exact same result <code>["oof", "rab", "zab", "xuq"]</code>.</p>

<h2 id="%F0%9F%92%AC-domain-language">üí¨ Domain Language</h2>

<p>As you saw in the last example, we can create our own infix functions in Haskell. This can be very useful to create more readable code, using the language of the domain. Let's see a typical example of a function that doesn't do that:</p>

<pre><code class="haskell">changeAddress :: Client -&gt; Address -&gt; Client
</code></pre>

<p>Now when we use this function in the classical way, it looks like this:</p>

<pre><code class="haskell">let abbeyRoad3 = "3 Abbey Road, London NW8 9AY, UK"
let updatedClient = changeAddress client abbeyRoad3
</code></pre>

<p>which doesn't read very well... What if we could use an infix here?</p>

<pre><code class="haskell">let updatedClient = client `changedAddressTo` abbeyRoad3
</code></pre>

<p>Using backticks we can use a function as an infix operator. The only thing we needed to change was the name of the function, and now this looks like a sentence!</p>

<p><code>client changedAddressTo abbeyRoad3</code></p>

<p>This is now the function type:</p>

<pre><code class="haskell">changedAddressTo :: Client -&gt; Address -&gt; Client
</code></pre>

<p>So a simple changed lead to a better understanding of the code.</p>

<h2 id="%F0%9F%93%89-the-absolute-minimum">üìâ The Absolute Minimum</h2>

<p>In the previous examples, you could see how we can mold the existing syntax to our likings, and use that to create very understandable code. Now let's see what happens when you take a language that has almost no syntax at all, like <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">scheme</a>. Literally, the only syntax in scheme is <code>(</code> and <code>)</code>. The rest are functions. Let's check out some code:</p>

<pre><code class="scheme">(define sum
  (lambda (list)
    (cond
      ((null? list) 0)
      (else (+ (car list) (sum (cdr list)))))))
</code></pre>

<p>As you can see, there are lots of <code>(</code>s and <code>)</code>s. Basically, every <code>()</code> combo is a function call.</p>

<ul>
<li><code>(define name body)</code> defines a variable. In this case, it's called <code>sum</code>.</li>
<li><code>(lambda (arguments) body)</code> defines a function. In this case, it has an argument called <code>list</code>.</li>
<li><code>(cond (condition result1) (else result2))</code> creates a conditional. If the <code>condition</code> is <code>#t</code> (true), we return <code>result1</code>, else <code>result2</code>.</li>
<li><code>(null? list)</code> checks if a list is empty.</li>
<li><code>(+ a b)</code> returns the sum of two numbers.</li>
<li><code>(car list)</code> returns the first item of a list (the <code>head</code> of the list).</li>
<li><code>(sum list)</code> is the recursive call to our own defined function.</li>
<li><code>(cdr list)</code> returns a list without its <code>head</code> (the <code>tail</code> of the list).</li>
</ul>

<p>Almost all of the above functions can be defined in <code>scheme</code> itself. That's why you'll find a lot of <code>scheme</code> parsers or environments written in <code>scheme</code>. Even the datatype of a list can be written as a function! And it doesn't end there! Scheme has support for macros which will let you manipulate your own code!</p>

<h2 id="%F0%9F%A4%B7%E2%80%8D%E2%99%82%EF%B8%8F-what%27s-the-point%3F">ü§∑‚Äç‚ôÇÔ∏è What's the point?</h2>

<p>My point isn't that you should try to minimize the amount of syntax to have a good language, but I'm always looking for better ways to write stuff. This means that languages where you can create your own syntax have a high appeal to me. I love to read code that tells a story, so that my brain can try and understand the problem &amp; the solution at hand, instead of the code. I think a lot of functional programming languages have strong support for writing code like this, compared to most OOP languages.</p>

<p>That doesn't mean we can't apply a lot of this in our day-to-day OOP codebases. See what you can do to make your code more meaningful. Can you give your classes, functions and variables better names? How can you lower the cognitive overhead needed to understand the code? How can we bring developer time down? Experimenting with this is something we can do in all languages, but it gets easier if we try and look around to the other languages and ecosystems around us! Don't get stuck in the idioms of the language you're spending the most time with, try stuff, look around, conquer the world!</p>

<p>It's also worth mentioning that there are whole communities around "designing software according to the domain" and "using the language of the domain". If you want to learn more, check out <a href="http://dddcommunity.org/book/evans_2003/">Domain Driven Design</a>! I've been going to the <a href="https://dddeurope.com/">DDD Europe Conference</a> and <a href="https://www.meetup.com/dddbelgium/">DDD Belgium meetups</a> for a few years now, and I must say, a lof of DDD people are trying functional languages!</p>

<p>That concludes this post. See you in the <a href="/blog/2019/01/28/lambda-implementation-details">next Lambda To The Rescue post</a>! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Monoids]]></title>
            <link href="/blog/2018/10/08/lambda-monoids"/>
            <updated>2018-10-08T10:30:00+00:00</updated>
            <id>/blog/2018/10/08/lambda-monoids</id>
            <content type="html"><![CDATA[<p><strong>This is the fourth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%E2%98%95%EF%B8%8F-ordering-some-coffees">‚òïÔ∏è Ordering some coffees</h2>

<p>In the previous posts, you already came across a few functional programming concepts. Let's explore one more. Let's say we went to a coffee bar and we want to calculate the total price of an order of coffees:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50
</code></pre>

<p>If you want to quickly do this from the top of your head, it makes sense to calculate it like this:</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= (2.50 + 2.50) + (2.90 + 2.10) + 4.50
= 5             + 5             + 4.50
= 10                            + 4.50
= 14.50
</code></pre>

<p>instead of</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= 2.50 + (2.50 + 2.90) + (2.10 + 4.50)
= 2.50 + 5.40          + 6.60
= 7.90                 + 6.60
= 14.50
</code></pre>

<p>As you already knew, these two approaches yield the same results. We say the location of the <code>(</code> and <code>)</code> when doing <code>+</code> isn't important, or <code>+</code> is <em>associative</em>.</p>

<p>Usually the receipt has a line "service" with some service costs of the order as well. In this case, since we ordered more than 4 coffees, we get service for free. The actual receipt looked like this:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50

- service         ‚Ç¨ 0
</code></pre>

<p>Does this change our calculation?</p>

<pre><code class="haskell">(2.50 + 2.50) + (2.90 + 2.10) + 4.50 + 0
= 5           + 5             + 4.50 + 0
= 10                          + 4.50 + 0
= 14.50                              + 0
= 14.50
</code></pre>

<p>Not at all! We conclude that 0 is "neutral" in that it doesn't change our calculations when using <code>+</code>. We call this <code>0</code> value <em>identity</em>.</p>

<h2 id="%F0%9F%A7%90-monoids">üßê Monoids</h2>

<p>Now, when we find these two properties (associativity and neutral element) for a function and its data, we found a <em>Monoid</em>. Cool! Let's see if we can find some other Monoids!</p>

<p>Let's see if a list of integers, and the operation <code>++</code> (append) form a Monoid:</p>

<pre><code class="haskell">$ ([1, 2] ++ [3, 4]) ++ [5, 6]
[1, 2, 3, 4, 5, 6]

$ [1, 2] ++ ([3, 4] ++ [5, 6])
[1, 2, 3, 4, 5, 6]
</code></pre>

<p>Ok, we have associativity, let's check if we can find a neutral element. How about the empty list?</p>

<pre><code class="haskell">$ [1, 2] ++ []
[1, 2]
</code></pre>

<p>Nice! We found another Monoid!</p>

<p>How about this:</p>

<pre><code class="haskell">data DiskUsage = DiskUsage { server :: String
                           , consumed :: Int
                           } deriving (Eq, Show)

data ServerStats = ServerStats { totalInGB :: Int
                               , perServer :: [DiskUsage]
                               } deriving (Eq, Show)

mergeServerStats :: ServerStats -&gt; ServerStats -&gt; ServerStats
mergeServerStats a b = ServerStats { totalInGB = totalInGB a + totalInGB b
                                   , perServer = perServer a ++ perServer b
                                   }
</code></pre>

<p>A program we could use to measure disk usage in our fictional data center's server racks returns <code>ServerStats</code> per rack. For every server in the rack, there's a <code>DiskUsage</code> entry in the <code>perServer</code> list. To easily calculate the total disk usage in our fictional data center, we just use <code>mergeServerStats</code> to sum it all, <em>et voil√†</em> we get one <code>ServerStats</code> with a total amount of GB used, and a list of all servers with their <code>DiskUsage</code>. (Note that the <code>totalInGB</code> can be totally wrong in this example. In a real world application you would just calculate that from the <code>perServer</code> value at all times. It's there because of convenience: you can immedately see how much disk usage is for a given rack.)</p>

<p>The question is, is this a <strong>Monoid</strong>? ü§î</p>

<p>To talk about a Monoid, we know we need a datatype. In this case we have <code>ServerStats</code>. Good. We also need a binary operation. We have <code>mergeServerStats</code>. Nice! We're halfway there. Let's see if we have the other stuff we need:</p>

<ul>
<li><p>associativity:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$ bar = DiskUsage { server = "bar", consumed = 99 }
$ baz = DiskUsage { server = "baz", consumed = 1 }
$ qux = DiskUsage { server = "qux", consumed = 0 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ rack2 = ServerStats { totalInGB = 100, perServer = [bar, baz] }
$ rack3 = ServerStats { totalInGB = 0, perServer = [qux] }
$
$ result1 = mergeServerStats (mergeServerStats rack1 rack2) rack3
$ result2 = mergeServerStats rack1 (mergeServerStats rack2 rack3)
$
$ result1 == result2
True
</code></pre>

<p>Applying <code>mergeServerStats</code> first to <code>rack1</code> and <code>rack2</code>, and then applying the same function to the result of the first calculation and <code>rack3</code> had the same result as first applying <code>mergeServerStats</code> to <code>rack1</code> and the result of applying that same function to <code>rack2</code> and <code>rack3</code>. We have associativity!</p></li>
<li><p>neutral element:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ neutral = ServerStats { totalInGB = 0, perServer = [] }
$
$ result = mergeServerStats rack1 neutral
$
$ result == rack1
True
</code></pre>

<p>We were able to find a <code>ServerStats</code> value <code>neutral</code> that, when appended to another value <code>rack1</code> using <code>mergeServerStats</code> resulted in the same value as <code>rack1</code> again! This means we have a neutral element!</p></li>
</ul>

<p>We can conclude that <code>ServerStats</code> forms a Monoid with its operation <code>mergeServerStats</code>.</p>

<h2 id="%F0%9F%92%B0-usefulness">üí∞ Usefulness</h2>

<p>Now why is this such a big deal? Why do we keep rambling on about this? Let's evaluate this next question from our fictional operations engineers:</p>

<blockquote>
  <p>Our datacenter grew quickly and we now have 10 racks with 10 servers each. We have a script that produces a <code>ServerStats</code> entry per rack. We want to know the total disk usage across all racks. Can we do this?</p>
</blockquote>

<p>We quickly head back to <a href="/blog/2018/06/27/lambda-recursion/#recognizing-a-pattern">last "Lambda To The Rescue" episode</a> and check out the paragraph about <code>fold</code>. Let's see if folds can help us!</p>

<pre><code class="haskell">$ foldr mergeServerStats neutral [ rack1, rack2, rack3, ... ]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          , ...
                          ]
            }
</code></pre>

<p>As you can see, we used all aspects of the Monoid in this example. We used the <em>neutral element</em> to have a starting value for our <code>foldl</code> invocation. We gave <code>foldl</code> the <code>mergeServerStats</code> binary operation over our datatype, and didn't worry about order of evaluation, which is where the <code>associativity</code> was helpful (we don't have to worry about implementation of <code>foldl</code>).</p>

<p>So, when we find out we're working with a Monoid, we immediately know we can <code>fold</code> easily over lists of that datatype!</p>

<p>In fact, if you're acquainted with <em>MapReduce</em>, a strategy for processing lots of data, you'll see that having a list of data allows you to <code>map</code> over it, and finding a Monoid between the datatype inside that list and the operation you want to do will allow you to <code>reduce</code> (or <code>fold</code>) easily over the list. Now you know what to look for!</p>

<p>Aside from "knowing what we can do with it", there's another benefit to understanding <code>Monoid</code>s, and that is <em>familiarity</em>. If you're checking out a codebase, and you find a Monoid instance, you'll feel right at home, and you'll understand the operations done on that particular datatype much easier than before. Which leads me to "formalizing".</p>

<h2 id="%F0%9F%A4%AF-formalizing">ü§Ø Formalizing</h2>

<p>You can even go further with this: in Haskell, there's a datatype <code>Monoid</code> which formalizes these properties in a typeclass:</p>

<pre><code class="haskell">class Monoid m where
  mempty :: m
  mappend :: m -&gt; m -&gt; m
  mconcat :: [m] -&gt; m
  mconcat = foldr mappend mempty
</code></pre>

<p>This means that you can formalize that your datatype &amp; operation combo is a <code>Monoid</code> instance, because it has a neutral element <code>mempty</code> and a binary operation <code>mappend</code>. You then get <code>mconcat</code> for free, which is the same as doing the <code>foldr</code> of the last example. Let's do this for our <code>ServerStats</code> type:</p>

<pre><code class="haskell">instance Monoid ServerStats where
  mempty = ServerStats { totalInGB = 0, perServer = [] }
  mappend = mergeServerStats
</code></pre>

<p>We can now do this:</p>

<pre><code class="haskell">$ mconcat [rack1, rack2, rack3]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          ]
            }
</code></pre>

<p>This <code>mconcat</code> function thus comes for free and will work on any <code>Monoid</code>! You can mostly guess the behaviour of this function whenever you see it!</p>

<h2 id="%F0%9F%98%85-back-to-oop">üòÖ Back to OOP</h2>

<p>What to do with this knowledge in the Object Oriented world? We use lists to work with objects of the same type constantly, and do operations on objects in those lists to gather new information. Most of the time I see this, it's done using <code>foreach</code> or something like it. However, as far as I'm concerned there's no difference to the Functional Programming world here. If you already embrace <code>map</code>, <code>filter</code> and <code>reduce</code>, you should also be thinking about the datastructure inside the list: is it a <em>Monoid</em>? You'll then understand better how it will behave when doing operations on it and you'll immediately know which the best reducer functions are!</p>

<p>That concludes this post. Hope to see you for <a href="/blog/2018/11/28/lambda-syntax">the next one</a>! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
    </feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-07-08T11:32:51+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Why Inheritance Makes Me Cry]]></title>
            <link href="/blog/2019/07/05/why-inheritance-makes-me-cry"/>
            <updated>2019-07-05T11:00:00+00:00</updated>
            <id>/blog/2019/07/05/why-inheritance-makes-me-cry</id>
            <content type="html"><![CDATA[<p>People receiving code reviews from me on a regular basis will know this by now, but if I see inheritance happening in new code, I get moody. I look the <code>extends</code> in the eye and prepare for battle. I pick up my <em>SOLID</em> axe and start examining the principle that will allow me to slay this sub-class beast. And then I cry a little because I'll have to explain again where this centuries-old grudge comes from.</p>

<p>Now, don't get me wrong. I do understand the usefulness of inheritance in very specific cases. But most of the time when I encounter a subclassed beast during a code review I go all out offensive on it. Let's explore why:</p>

<h2 id="single-responsibility-principle">Single Responsibility Principle</h2>

<p>If you've been Object Oriented Programming for some time and you've been looking around a bit, you've definitely encountered the <a href="https://en.wikipedia.org/wiki/SOLID">SOLID principles</a>. These are basically principles (not rules) that, when followed, will help you produce code that's easier to comprehend, change and test than when you were not following them. The first principle is the Single Responsibility Principle, which states that <em>a class should have only one responsibility</em>, or "one reason for change".</p>

<p>Let's try and use that to mitigate this case of inheritance:</p>

<pre><code class="php">interface Users
{
    public function getById(UserId $id): User;
}

class UsersDB implements Users
{
    protected $db;

    public function __construct(DB $db)
    {
        $this-&gt;db = $db;
    }

    public function getById(UserId $id): User
    {
        // ...
    }
}

class UsersCached extends UsersDB
{
    protected $cache;

    public function __construct(Cache $cache, DB $db)
    {
        parent::__construct($db);

        $this-&gt;cache = $cache;
    }

    public function getById(UserId $id): User
    {
        // get from cache?

        // if not in cache
        $user = parent::getById($id);

        // put in cache

        return $user;
    }
}
</code></pre>

<p>Apart from all other issues that we have here, let's try to find out if the <em>Single Responsibility Principle</em> holds for this implementation. Looking at the class <code>UsersDB</code>, we can clearly see that it has just one responsibility: it represents a bunch of <code>User</code>s that are persisted to our database. It has no other reasons to change than for the purpose of representing users persisted in our database.</p>

<p>Now let's look at the <code>UsersCached</code> implementation. It represents a bunch of <code>User</code>s as well, in this case it caches them. We could think that this class has only one responsibility, until we see the <code>parent::getById()</code> call. It basically calls a method that we inherited (so it's available in our class) from the parent class. The knowledge needed to query the database is actually in our class because of the inheritance!</p>

<p>You could argue that it's still ok since it's clearly a parent class and nothing's wrong there, but let's look at it through the lense of <em>a class should have only one reason for change</em>. What if we decide that the constructor of the <code>UsersDB</code> class will now take a <code>PDO</code> instance instead of our own <code>DB</code> class? Guess what! The implementation of our <code>UsersCached</code> needs to change as well, because it needs to pass the PDO instance on to its parent. So a decision about the database made us change the caching class. And it's obvious that changing the caching mechanism would also affect the caching class. Which gives us more than one reason for change of this class.</p>

<p>This is clearly a violation of the Single Responsibility Principle.</p>

<p>We could fix this e.g. by using the <a href="https://en.wikipedia.org/wiki/Decorator_pattern">Decorator Pattern</a>:</p>

<pre><code class="php">interface Users
{
    public function getById(UserId $id): User;
}

final class UsersDB implements Users
{
    private $db;

    public function __construct(DB $db)
    {
        $this-&gt;db = $db;
    }

    public function getById(UserId $id): User
    {
        // ...
    }
}

final class UsersCached implements Users
{
    private $users;
    private $cache;

    public function __construct(Users $users, Cache $cache)
    {
        $this-&gt;users = $users;
        $this-&gt;cache = $cache;
    }

    public function getById(UserId $id): User
    {
        // get from cache?

        // if not in cache, get from nested user object
        $user = $this-&gt;users-&gt;getById($id);

        // put in cache

        return $user;
    }
}
</code></pre>

<p>As you can see, it's only a very small change.</p>

<ul>
<li>we added <code>final</code> keywords to our classes and <code>private</code> to our variables to indicate that we don't want inheritance to happen üòè</li>
<li>we made both classes <code>implement</code> the <code>Users</code> interface</li>
<li>we injected an implementation of the <code>Users</code> interface into the constructor of the <code>UsersCached</code>, which will be called when no user is found in the cache.</li>
</ul>

<p>You could try and argue that this is no better because we still rely on the <code>Users</code> interface to stay stable. But if that interface changes, the responsibility "representing a bunch of users" changes, which is exactly the one responsibility that we have for our class. Changing the implementation of our <code>UsersDB</code> class will not affect the <code>UsersCached</code> class anymore, except when the contract of the interface is broken. Great!</p>

<h2 id="dependency-inversion-principle">Dependency Inversion Principle</h2>

<p>Let's take a short second look at the same code examples from above, now while trying to look at it from another one of the SOLID principles, the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion Principle</a>. The principle comes down to <em>depending on abstractions instead of concretions</em>. In the case of the first example, the <code>UsersCached</code> extends <code>UsersDB</code>, which it needs when there's nothing found in the cache. We depend on a concrete class, which is a violation of the principle. In the second example, we made <code>UsersCached</code> implement the interface directly instead of extending from <code>UsersDB</code>. We then inject another implementation of <code>Users</code> in the constructor of <code>UsersCached</code>. Since we depend on the <em>interface</em> here, we don't depend on a concrete class anymore, and any implementation of the <code>Users</code> interface should work! This solution follows the principle! An added benifit of this is that our <code>UsersCached</code> instance is now much easier to test: we just need to inject a fake <code>Users</code> interface and see if it gets called when the cache doesn't have the value that we look for.</p>

<p>You could do the same with the other SOLID principles really, take e.g. <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>. If a class extends from our class, it can easily overwrite a method to behave completely differently than what it was, so the principle doesn't hold. Again, it's easy to make a violation there.</p>

<h2 id="shared-dependencies">Shared Dependencies</h2>

<p>Now that we have a few SOLID reasons to say that inheritance is not a desirable solution for our problems, let's look at some other ways that I think it is misused. Consider this example:</p>

<pre><code class="php">abstract class Notification
{
    protected $id;

    public function __construct(Id $id)
    {
        $this-&gt;id = $id;
    }

    public function toUrl($relative = true): string
    {
        $path = "/notifications/{$this-&gt;id}";

        if ($relative === true) {
            return $path;
        } else {
            return "https://domain.of.application{$path}";
        }
    }
}
</code></pre>

<p>I see this kind abstract classes quite often. It's a form of deduplication (people think they shouldn't repeat code), but what's problematic is the fact that you won't always know what kinds of exceptions to the rule there are going to be. Consider a class <code>AccountSpecificNotification</code> which extends from <code>Notification</code>. It wants to overwrite the <code>toUrl()</code> method, because account specific notifications are at <code>/account/{accountId}/notifications/{notificationId}</code>. Trouble is, we have to again implement the absolute and relative paths rule, and the chance of making mistakes becomes higher. Also the absolute URL of our domain is now in two classes. The knowledge about converting a notification to a URL is also in two classes. If we have a few of these exceptions, stuff gets difficult to keep track of.</p>

<p>As a solution, you could just make this class an interface and specify the <code>toUrl()</code> method on <code>Notification</code> instances. This way you always know the implementation for a certain type of <code>Notification</code> will be in the class itself. Then you'll have to live with the duplication. This is personally how I often do it. I <a href="https://medium.com/@nicolopigna/this-is-not-the-dry-you-are-looking-for-a316ed3f445f">duplicate stuff when in doubt and refactor later</a>, with the benefit of hindsight.</p>

<p>Another thing that you could do is look at the <code>toUrl()</code> method, and see that it's in fact a shared dependency between <code>Notification</code>s with another responsibility than "representing a notification". It could become another class. Let's write a separate class for it:</p>

<pre><code class="php">final class NotificationToUrl
{
    public function getRelativeUrlForNotification(Notification $notification): string
    {
        $url = '/notifications/' . $notification-&gt;getId();

        if ($notification instanceof AccountSpecificNotification) {
            $url = '/account/' . $notification-&gt;getAccountId();
            $url .= '/notifications/' . $notification-&gt;getId();
        }

        return $url;
    }

    public function getFullUrlForNotification(Notification $notification): string
    {
        $path = $this-&gt;getRelativeUrlForNotification($notification);

        return "https://domain.of.application{$path}";
    }
}
</code></pre>

<p>Of course this is not perfect either, but it's at least a bit better from some standpoints: we get all the knowledge of converting notifications to URLs in one place, and we don't need inheritance!</p>

<h2 id="in-short">In short</h2>

<p>If you're using inheritance to fix a problem, I propose that you take a second and ask yourself why. In this post I propose a few ways of looking at inheritance that could help you come to a better solution in some cases.</p>

<ul>
<li>Are you violating one of the SOLID principles? Try and look for a solution where you can adhere to them more.</li>
<li>Are you trying to remove duplication? Try to <a href="https://medium.com/@nicolopigna/this-is-not-the-dry-you-are-looking-for-a316ed3f445f">postpone your decisions about the abstraction</a> that you're going to use to remove the duplication.</li>
<li>Do you have a shared method that multiple classes need? Try extracting it to a separate class.</li>
</ul>

<p>Since most of the time one of these methods produces a result that I find more desirable as explained in this post, I'll mostly oppose strongly against the use of inheritance when it's not strictly needed.</p>

<p>Hope that you'll be with me on slaying this beast! Until next time, happy programming! üê≤</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Exceptional Exceptions]]></title>
            <link href="/blog/2019/05/22/exceptional-exceptions"/>
            <updated>2019-05-22T15:00:00+00:00</updated>
            <id>/blog/2019/05/22/exceptional-exceptions</id>
            <content type="html"><![CDATA[<p>You've made it to this post thinking "Why do we still need to talk about Exceptions?". Well, they're used everywhere in OOP codebases, but sometimes they're used in a way that make debugging a bit difficult. Let's look at some ways to make debugging exceptions a bit more fun!</p>

<p>You know that feeling when you're trying to investigate an Exception that was thrown, but you can't seem to find the origin of it? You dig a bit deeper and you find that it's an exception that was caught and not rethrown, e.g.:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!');
}
</code></pre>

<p>Now, when you encounter this <code>SomethingWentWrongException</code>, you'll see that the trace takes you back to the 6th line of this code example. All information that was inside the <code>VeryDescriptiveException</code>, including its message, stack trace and other useful information is gone. Of course, debugging that error in <code>doSomeImportantStuffWith()</code> would be much easier if you had all that info.</p>

<pre><code class="php">Fatal error: Uncaught SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withoutPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<h2 id="prevent-information-loss-by-using-%60%24previous%60">Prevent information loss by using <code>$previous</code></h2>

<p>The obvious answer to this simplified example would be to just rethrow the <code>VeryDescriptiveException</code> instead of throwing a more general <code>SomethingWentWrongException</code>... And that would be valid, but let's say we're implementing an Interface that prescribes that we only throw <code>SomethingWentWrongException</code>s. We can't let the <code>VeryDescriptiveException</code> through or we'll break the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>. We want to throw that specific <code>SomethingWentWrongException</code>, while still somehow preserving the information of that previous exception that we caught. Let's check <a href="https://www.php.net/manual/en/exception.construct.php">the docs</a>:</p>

<p><img src="/images/2019-05-24-exceptional-exceptions/php-docs-exception-construct.png" alt="PHP Docs for the Exception Constructor" /></p>

<p>That <code>Throwable $previous = null</code> is what we're looking for! I've almost never seen this being used in the wild, but it's great for our usecase:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!', 0, $e);
}
</code></pre>

<p>this results in this error:</p>

<pre><code class="php">Fatal error: Uncaught VeryDescriptiveException: hello there! in test.php:15
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(23): Test-&gt;doSomeImportantStuffWith('test')
#1 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#2 {main}

Next SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<p>As you can see, the stack trace of the original exception along with the one we wrapped it in are presented to us on error! We can see the message as well, and we can even add our own properties to the exception and be presented with them here if we just implement the <code>__toString()</code> method of the exception.</p>

<h2 id="custom-properties-in-exceptions">Custom properties in exceptions</h2>

<p>Let's say we've been building an API client that does some HTTP requests to an endpoint. Something can go wrong during the HTTP request, and we want to thrown an <code>ApiConnectionFailed</code> exception whenever the HTTP response code is not <code>2xx</code> or something else fails, so that the rest of our application has one single Exception it needs to prepare for. It would be very handy to debug if that exception contained our HTTP Request &amp; Response objects, e.g.:</p>

<pre><code class="php">final class ApiConnectionFailed extends Exception
{
    private $request;
    private $response;

    public static function withHttpRequestAndResponse(
        $message,
        Request $request = null,
        Response $response = null,
        Throwable $previous = null
    ) {
        $exception = new static($message, 0, $previous);
        $exception-&gt;request = $request;
        $exception-&gt;response = $response;

        return $exception;
    }

    public function __toString()
    {
        $string = parent::__toString();
        $string .= "\n{$this-&gt;request}";
        $string .= "\n{$this-&gt;response}";

        return $string;
    }
}
</code></pre>

<p>As you can see, we used a <a href="http://verraes.net/2014/06/named-constructors-in-php/">named constructor</a> <code>withHttpRequestAndResponse</code> to be able to keep the default constructor for Exceptions, but to also be able to construct it using a lot of extra relevant debugging information. This means that this Exception behaves like other exceptions and is very transparent to other developers.</p>

<p>If something fails, we'll construct the exception like this:</p>

<pre><code class="php">try {
    $response = $httpClient-&gt;execute($request);
} catch (HttpClientException $e) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'Http connection could not be established',
        $request,
        null,
        $e
    );
}

if ($response-&gt;getResponseCode() === 500) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'We got a 500 error from the host',
        $request,
        $response
    );
}
</code></pre>

<p>The exception will always contain all relevant information to be able to debug.</p>

<h2 id="recap">Recap</h2>

<p>To quickly recap, you can make your life a lot easier by</p>

<ul>
<li>providing exceptions with descriptive names</li>
<li>providing the <code>$previous</code> exception when rethrowing</li>
<li>providing all relevant data to an exception</li>
<li>providing named constructors for your exceptions to be able to add debugging info but keep the original constructor</li>
</ul>

<p>Hope that helps! Until next time, have fun coding! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Implementation Details]]></title>
            <link href="/blog/2019/01/28/lambda-implementation-details"/>
            <updated>2019-01-28T14:30:00+00:00</updated>
            <id>/blog/2019/01/28/lambda-implementation-details</id>
            <content type="html"><![CDATA[<p><strong>This is the sixth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%F0%9F%A4%94-how-do-you-hide-your-internals%3F">ü§î How do you hide your internals?</h2>

<p>In OOP, we're used to hiding the implementation details of our classes by using interfaces. We can just define a contract that the rest of the application needs to adhere to, and keep the knowledge of the internals completely separate from the rest of the system. Let's look at a simple interface:</p>

<pre><code class="php">&lt;?php

namespace Dns;

interface Client
{
    public function resolve(Request $request): Response;
}
</code></pre>

<p>As a consumer of this interface, we actually know everything we need to know to start programming. We'll inject the class we're making with a <code>DNS\Client</code> instance later, the actual implementation of it doesn't concern us right now. We have enough information to create our application knowing that we can send the client a <code>Request</code> and get a <code>Response</code> back. The internals of the <code>Dns\Client</code> can be changed at will, without altering our program.</p>

<p>For me, this was the biggest breakthrough of learning an Object Oriented language, the moment when using interfaces as contracts clicked. That's why, when I started to dive into Functional Programming languages, I wasn't really happy with what I saw. Where were the interfaces at?</p>

<h2 id="%F0%9F%98%85-exporting-from-modules-as-interface">üòÖ Exporting from modules as interface</h2>

<p>The first Functional Programming language I learnt was <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>. It was great! When you start learning it, you start to see the recursion patterns, see that syntax is only so important as the language makes it, and countless other nice things (programming with continuations, anyone?). What bothered me was that lists are used as the main data structure everywhere! You'll sometimes find libraries that do something like this:</p>

<pre><code class="scheme">(define address
  (list "Toon Daelman" "FooBarStreet 42" "9000 Ghent" "Belgium"))
</code></pre>

<p>Yes, that's a workable data structure, but it's not ideal... To get a person's country from their address, you need to do something like this:</p>

<pre><code class="scheme">(list-ref address 3)
</code></pre>

<p>Which means, from the <code>address</code> list, take the <code>3rd</code> (zero-based) index. That's not very readable at all, and it doesn't hide any of the details of our data structure. If we want to change it, every function interacting with this data structure will need to change as well.</p>

<p>Luckily, the problem was me. I didn't look far enough, and most people working with lisps have other ways of hiding their internals, for instance:</p>

<pre><code class="scheme">(module address (address country)
  (import scheme)

  (define address
    (lambda (name line1 line2 country)
      (list name line1 line2 country)))

  (define country
    (lambda (address)
      (list-ref address 3)))
)
</code></pre>

<p>This is a scheme module, that exports two functions <code>address</code> and <code>country</code>. It uses the base library <code>scheme</code>. It defines a function <code>address</code>, that acts like a constructor and returns a black box object, that you can deconstruct using separate functions. In this case we only have a <code>country</code> function that takes an <code>address</code> and returns its <code>country</code>. Consuming modules of this <code>address</code> module need only now the constructor and the other functions, not that the underlying object is still a list!</p>

<p>And this lets us change the implementation as well!</p>

<pre><code class="scheme">(module address (address country)
  (import scheme)

  (define address
    (lambda (name line1 line2 country)
      (vector name line1 line2 country)))

  (define country
    (lambda (address)
      (vector-ref address 3)))
)
</code></pre>

<p>We're now using <code>vector</code>s as the datatype for <code>address</code> instead of <code>list</code>s, but the <code>address</code> constructor and the <code>country</code> getter function are still called the same and behave exactly the same. We could use the records features as well, still keeping the same public interface...</p>

<h2 id="%F0%9F%8E%A9-types">üé© Types</h2>

<p>The second Functional Programming language I started to look into was <a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a>. It immediately blew my mind with its type system. Let's check out this piece of code:</p>

<pre><code class="haskell">type AddressLine = String
type Country = String

data Address = Address
  { name :: String
  , line1 :: AddressLine
  , line2 :: AddressLine
  , country :: Country
  } deriving (Show)

countryFrom :: Address -&gt; Country
countryFrom = country
</code></pre>

<p>We define two type aliasses <code>AddressLine</code> and <code>Country</code>. Then we say that an <code>Address</code> consists of a <code>name</code>, a <code>line1</code> which is an <code>AddressLine</code>, a <code>line2</code> (also an <code>AddressLine</code>) and a <code>country</code> of the type <code>Country</code>. Then we define a function called <code>countryFrom</code> that takes an <code>Address</code> and returns a <code>Country</code>, which is implemented by just saying it's equal to <code>country</code>, the function that is automatically created to unwrap <code>Record</code>s.</p>

<p>In fact, creating the <code>countryFrom</code> function was just done as an example to show off the type annotations in a situation analogous to the previous example in scheme. The type system in Haskell allows us to not only write the contract of a function, but it allows us to write abstractions as well! Check this out:</p>

<pre><code class="haskell">head :: [a] -&gt; a
</code></pre>

<p>This is the type of the <code>head</code> function, which operates on lists. It takes a list of <code>a</code>s and returns an <code>a</code>. The <code>a</code> is a <em>type variable</em>, it substitutes for every type you can think of. This way, you can strictly type a function that can work with all sorts of types! Take for instance a list of <code>Address</code>es! Call <code>head</code> on that list, and you'll get the first <code>Address</code> of the list.</p>

<p>üé©‚û°Ô∏èüê∞</p>

<p>üòç I love this, it's like magic! And it goes even further. Let's say you want to be able to declare the function <code>==</code> which takes two arguments and checks if they're equal to each other. You would think that that would be easy using <em>type variables</em>, doing something like this:</p>

<pre><code class="haskell">(==) :: a -&gt; a -&gt; Bool
</code></pre>

<p>Which means, a function <code>==</code> which takes two arguments of the same type (we use <code>a</code> for both arguments, which means we don't care which type it is, but it should be the same for both arguments) and returns a <code>Bool</code>. The problem is that there's no certainty that the type <code>a</code> has a concept of equality to it. It could be that we want to be able to define our own rules for equality on a type-by-type basis as well... That's why that signature <code>a -&gt; a -&gt; Bool</code> isn't enough.</p>

<p>Haskell actually has another abstraction over their types to allow us to put the <code>a -&gt; a -&gt; Bool</code> in a context:</p>

<pre><code class="haskell">class Eq a where
  (==) :: a -&gt; a -&gt; Bool
  x == y = not (x /= y)

  (/=) :: a -&gt; a -&gt; Bool
  x /= y = not (x == y)
</code></pre>

<p>This is a typeclass named <code>Eq</code> that defines equality for every type <code>a</code> that we say is part of the typeclass. It defines two functions, <code>==</code> and <code>/=</code>, which both take two arguments of the type <code>a</code> and return a <code>Bool</code>. What's also nice, is that they're both defined in terms of each other. <code>==</code> says that it's <code>not (/=)</code> and vice versa.</p>

<p>Now, if we want to make our <code>Address</code> type part of the typeclass <code>Eq</code>, we can just implement the <code>==</code> function, and we get the other one for free because it's defined in terms of <code>==</code>. Let's look at an example:</p>

<pre><code class="haskell">instance Eq Address where
  x == y = sameAddressLines &amp;&amp; sameCountry
    where sameAddressLines = (line1 x == line1 y) &amp;&amp; (line2 x == line2 y)
          sameCountry = country x == country y
</code></pre>

<p>In this case, we say <code>Address</code>es are the same if their <code>AddressLine</code>s and <code>Country</code> are the same. We don't take <code>name</code> into consideration. Now we can <code>==</code> on <code>Address</code>es everywhere. If you don't need special rules for deriving equality for a given type, the Haskell compiler can derive it for your type using the <code>deriving (Eq)</code> statement.</p>

<h2 id="%F0%9F%A4%93-what-can-we-learn-from-this%3F">ü§ì What can we learn from this?</h2>

<p>We've seen two ways of how implementation details can be hidden in a functional programming environment. When we're in Object Oriented environments we do almost the same things, but we use interfaces for them. And we use interfaces to describe contracts for many other things we want to do. That's why I'm sometimes confused when I stumble upon an interface: what's the primary reason for it to be here? Is it there to define a contract for external systems? Is it meant to hide implementation details or is it just part of a design pattern used in this package? Is it a marking interface used to indicate the type of the implementing class? Not every class needs to be implementing an interface... It already has one! All public methods of a concrete class can be seen as its public interface. And I think in most cases like the first example in scheme where we want to hide the internals of a datatype, a concrete class can be enough (think <code>ValueObject</code>s).</p>

<p>I find that in Object Oriented Programming, thinking about types as you do when writing e.g. Haskell, tends to help when defining your interfaces effectively. One of the biggest differences is the manifestation of side-effects: In Haskell, there's a type for functions with side effects, while interfaces in Object Oriented languages mostly don't give you any insights into that (I've often thought about annotating side-effects in the docblocks of my interfaces).</p>

<p>While PHP doesn't allow you to implement your own Equality rules for your classes, some Object Oriented languages do. Compare these examples:</p>

<pre><code class="php">$foo == $bar;
</code></pre>

<pre><code class="php">$foo-&gt;equals($bar);
</code></pre>

<p>In the first example, we can't influence how PHP compares two instances of our class, while in the second one, we have complete control (even over the name of the method). It depends on taste what's best, certainly when your language allows you to overload <code>==</code> for your classes. Always try to make it as readable as possible!</p>

<p>Wow, we made it through! Hope to see you in the next episode! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Our Favorite Content Of 2018]]></title>
            <link href="/blog/2019/01/04/our-favorite-content-of-2018"/>
            <updated>2019-01-04T13:00:00+00:00</updated>
            <id>/blog/2019/01/04/our-favorite-content-of-2018</id>
            <content type="html"><![CDATA[<p>As a team, we consume A LOT of blog posts, YouTube videos, podcasts, and tweets about software development and related topics each year. Like <a href="/blog/2017/12/22/our-favorite-content-of-2017">last year</a>, we asked everyone in the team to share their favorite stuff that they found online, so that you can read it too. Here we go!</p>

<h1 id="people">People</h1>

<h3 id="the-art-of-job-interviewing"><a href="https://www.artofwork.co/job-interviewing">The Art of Job Interviewing</a></h3>

<p>Toon thinks this is the most complete and thought-through blogpost about interviewing people that you can find, and there are a lot of good ideas to try out in your company!</p>

<h3 id="when-no-gender-fits"><a href="https://uxplanet.org/when-no-gender-fits-33301c3cab53">When No Gender Fits</a></h3>

<p>Jurriaan has been working towards gender neutral design of our application, which is why this blogpost comes up. We often don't even see the way we're biased, and this blogpost shows us where to look.</p>

<h3 id="our-first-year-of-growth"><a href="https://medium.com/women-code-be/our-first-year-of-growth-6384eba5a3e2">Our First Year Of Growth</a></h3>

<p>Ursula has told us a few times about women.code(be), and this blogpost is a nice read about what they did in 2018!</p>

<h1 id="agile-%26-pair-programming">Agile &amp; Pair Programming</h1>

<h3 id="alan-cooper-thread-on-agile-%26-pair-programming"><a href="https://twitter.com/MrAlanCooper/status/1060553914209071106">Alan Cooper thread on Agile &amp; Pair Programming</a></h3>

<p>We were really into pair programming the last months of the year, and found this thread really inspiring!</p>

<h3 id="how-to-keep-pair-programming-digestible"><a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">How To Keep Pair Programming Digestible</a></h3>

<p>This is a fine blogpost with some tips that helped us to keep our sanity this year, during the <a href="/blog/2018/12/07/one-month-of-pairing">pair programming by default</a> experiment.</p>

<h1 id="software-design">Software Design</h1>

<h3 id="extremely-defensive-php"><a href="https://www.youtube.com/watch?v=Gl9td0zGLhw">Extremely Defensive PHP</a></h3>

<p>Jasper saw this talk by Marco Pivetta, and although Marco has been giving this talk for some years now, on multiple conferences, it's still a great talk to see!</p>

<h3 id="game-devs-vs-c%2B%2B"><a href="https://twitter.com/aras_p/status/1076947443823136768">Game Devs vs C++</a></h3>

<p>Jeffry was reading a lot of <a href="https://twitter.com/aras_p/status/1076947443823136768">twitter<sup>1</sup></a> <a href="http://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/">threads<sup>2</sup></a> <a href="https://twitter.com/SebAaltonen/status/1080069784644059139">about<sup>3</sup></a> <a href="https://twitter.com/lucasmeijer/status/1080782217092030464">this<sup>4</sup></a> over Christmas. Check them out!</p>

<h3 id="overreacted"><a href="https://overreacted.io/">Overreacted</a></h3>

<p>Anthony recommends this blog about mostly React stuff! Great content, good examples... What else do you want?</p>

<h1 id="frameworks">Frameworks</h1>

<h3 id="stop-learning-frameworks"><a href="https://sizovs.net/2018/12/17/stop-learning-frameworks/">Stop Learning Frameworks</a></h3>

<p>Jurriaan liked this blog post. We're developers, software engineers, programmers. We're not only specialized in a framework! What we study is the way of solving problems, and frameworks are merely tools for our craft. This is valuable advice that has been given to us over the years, and people new to development tend to forget.</p>

<h3 id="the-end-of-silex"><a href="https://symfony.com/blog/the-end-of-silex">The End Of Silex</a></h3>

<p>We're sad to see our favorite "framework as a library" go, but it's safe to say that it served its purpose incredibly well. Thanks Silex!</p>

<h3 id="tailwind-css"><a href="https://tailwindcss.com/">Tailwind CSS</a></h3>

<p>Tailwind CSS has been hot news in the frontend community, which is why Thomas wanted to share this link. A new CSS Framework? Again? Yes, and this time, the design principles used are a little different than before. Check it out!</p>

<h1 id="social-media">Social Media</h1>

<h3 id="bbc-thread-on-social-media-mining-to-solve-war-crimes"><a href="https://twitter.com/BBCAfrica/status/1044186344153583616">BBC thread on Social Media Mining To Solve War Crimes</a></h3>

<p>The way BBC reporters used social media and readily available tools like Google Maps to investigate this War Crime is really impressive. The power of social media is confirmed yet again.</p>

<h3 id="thread-about-repeal-the-8th"><a href="https://threadreaderapp.com/thread/1000701354204069888.html">Thread about Repeal The 8th</a></h3>

<p>Ursula thinks this is a fascinating read about how social media was used for the "repeal the 8th campaign" in Ireland. It compares to how Trump used social media too... Relevant to the times!</p>

<h3 id="the-most-sophisticated-piece-of-code-ever-written"><a href="https://www.quora.com/What-is-the-most-sophisticated-piece-of-software-code-ever-written/answer/John-Byrd-2">The Most Sophisticated Piece Of Code Ever Written</a></h3>

<p>Plugged by Toon, this is a lengthy explanation of why Stuxnet might be the most advanced piece of code ever written. Even if you don't agree, it's a very nice read!</p>

<p>Those were some of our highlights for 2018, have a great 2019!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Experiment: Pair Programming By Default]]></title>
            <link href="/blog/2018/12/07/one-month-of-pairing"/>
            <updated>2018-12-07T16:00:00+00:00</updated>
            <id>/blog/2018/12/07/one-month-of-pairing</id>
            <content type="html"><![CDATA[<p>As you could already read in some of our <a href="/blog/2017/05/22/implementing-little-big-details-on-offsite-bootcamp">previous</a> <a href="/blog/2017/03/01/batman-chatman">blogposts</a>, we are a relatively small team, with some loose rules for working together. Up until one month ago, everyone just picked a project from the roadmap and started implementing, and there was a rotation system within the team to always have two people available to help out our support team to assess bugs &amp; fix issues respectively.</p>

<h2 id="%F0%9F%92%AD%F0%9F%98%B0-about-silos-%26-issue-fatigue">üí≠üò∞ About Silos &amp; Issue-Fatigue</h2>

<p>As you can imagine, this works really well for projects that are small and well defined, and for teams where everyone is of the same skill level, and has the same development practices. People are not in each other's ways, and you can "horizontally scale" your team. The only trouble is, we're a small team, we have senior and junior developer profiles, and our projects are mostly not so small. The result of this, is that the person implementing a feature is most likely the only one that <strong>really</strong> knows the feature inside out. So the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> for every feature was basically 1. For some features we had insane knowledge silos.</p>

<p>There's a similar story to the support rotation system within the team: the people talking to support and fixing bugs most likely didn't implement the features where the bugs appeared. If they did, the bugs were quickly fixed, and if not, people had to try and understand code written by someone else that they'd never seen <strong>over and over</strong> again. Not ideal. And the result was that for me personally, weeks when I was Batman (yes that's how we call the lucky engineer that's solving bugs that week) were the most draining periods of the year.</p>

<h2 id="%E2%9A%97%EF%B8%8F%F0%9F%94%AC-the-experiment">‚öóÔ∏èüî¨ The Experiment</h2>

<p>We do weekly roundups, and after an exhausting week of being Batman, I, expressed my feelings towards the Silos and the Batman weeks. The whole team actually agreed that the situation was not perfect, and we decided it was time for an experiment:</p>

<ul>
<li>Split up the (already small) team in two groups of people (3 to 4 people per group) that will always try to work together on the same feature.</li>
<li>Start every day together with your team (at the same computer or over <a href="https://get.slack.help/hc/en-us/articles/216771908-Make-calls-in-Slack">Slack Voice Calls</a>) trying to solve issues or create features using Pair Programming techniques. Split up the team for "monkey-jobs".</li>
<li>Both teams provide one team member per week to be Batman or Robin. They form their own team and tackle bugs together.</li>
</ul>

<p>We limited the scope of the experiment to the winter release, so 3 months. So far we did a (very limited) retrospective every week.</p>

<h2 id="%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB%F0%9F%91%A8%E2%80%8D%F0%9F%92%BB-what-have-we-learned-so-far%3F">üë©‚Äçüíªüë®‚Äçüíª What have we learned so far?</h2>

<p>We've only been doing this for 4 weeks, so I might be jumping to conclusions here. So far the experience has been positive!</p>

<ul>
<li>It's great to be able to verify your ideas immediately, and to try and build a shared understanding of the problem you're working on.</li>
<li>Pair Programming is exhausting, but it works! We feel the velocity gain and the concentration boost. We find that we're writing better code. We feel productive.</li>
<li>We're aware that it's exhausting and we take a lot of breaks, stop early when we're tired.</li>
<li>We're using Slack as team communication tool, and when someone is working at home, we can just keep Pair Programming because of the built-in voice calls and screen sharing. Slack even allows you to share your mouse and keyboard with the person at the other side of the call (that is, if you've installed Slack from their website instead of from the App Store).</li>
<li>We found this great blogpost with some basics to <a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">keep Pair Programming digestible</a>, by my friend <a href="https://twitter.com/woutersioen">Wouter Sioen</a>.</li>
<li>We've done some ad-hoc pair programming in the past, but starting the day at the same computer really helps you keep it up and encourages you to do it more often.</li>
<li>Batman and Robin are <em>way faster</em> at finding and fixing bugs than when they were working alone. Having that extra developer by your side improves your bug finding experience massively. When working alone, overlooking a small mistake could take up hours, while your pair could spot that in seconds. Our CTO <a href="https://twitter.com/oemebamo">Jurriaan Persyn</a> pointed out that we've fixed a third more issues than last month, even some that were open for a long time already!</li>
</ul>

<h2 id="%F0%9F%93%9A%F0%9F%A7%90-some-resources">üìöüßê Some resources</h2>

<ul>
<li><a href="https://tuple.app/pair-programming-guide/">Tuple's Pair Programming Guide with lots of good tips!</a></li>
<li><a href="http://www.davefarley.net/?p=267">Blog: Pair Programming For Introverts</a></li>
<li><a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">Blog: How To Keep Pair Programming Digestible</a></li>
<li><a href="https://www.martinfowler.com/bliki/PairProgrammingMisconceptions.html">Blog: Martin Fowler on Pair Programming Misconceptions</a></li>
<li><a href="http://wiki.c2.com/?ExtremeProgramming">WikiWikiWeb on Extreme Programming</a></li>
<li><a href="https://twitter.com/MrAlanCooper/status/1060558122916278272">Great twitter thread by @MrAlanCooper about Pair Programming</a></li>
<li><a href="https://twitter.com/mathiasverraes/status/1063063502254936065">Mathias Verraes talking about Pair Programming for quality</a></li>
</ul>

<p>We hope we can keep it up! ü§û</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Syntax]]></title>
            <link href="/blog/2018/11/28/lambda-syntax"/>
            <updated>2018-11-28T11:30:00+00:00</updated>
            <id>/blog/2018/11/28/lambda-syntax</id>
            <content type="html"><![CDATA[<p><strong>This is the fifth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%E2%9C%A8-syntactic-sugar">‚ú® Syntactic Sugar</h2>

<p>When I was first reading <a href="http://learnyouahaskell.com/">Learn You A Haskell For Great Good</a>, I came across the term <em>Syntactic Sugar</em> and I was confused... My background in OOP languages made me cringe a little when I read about how you can create your own syntax in Haskell using infix operators and DSLs. It even goes so far that some functional languages have almost no syntax at all! Let's look at an example of "sugar":</p>

<pre><code class="haskell">map reverse
    (filter (\x -&gt; length x &lt; 5)
            ["foo", "bar", "baz", "qux", "ramsam"])
</code></pre>

<p>We're taking the list <code>["foo", "bar", "baz", "qux", "ramsam"]</code>, filtering out items that are 5 characters or longer, and reversing them all, one by one. The result is <code>["oof", "rab", "zab", "xuq"]</code>.</p>

<p>We can make this a little bit more readable by using Haskell's <code>$</code> infix operator, which allows us to remove some of the parentheses by evaluating the expression on its righthand side first:</p>

<pre><code class="haskell">map reverse $ filter (\x -&gt; length x &lt; 5) $ ["foo", "bar", "baz", "qux", "ramsam"]
</code></pre>

<p>Although the parentheses are gone, we still have to read from right to left if we want to know what exactly the result of this will be. We basically pipe the result of the expression on the right of the <code>$</code> to the expression on the left side of it. Some languages like F# have the <code>|&gt;</code> operator which allows you to pipe from left to right, so the exact opposite of the <code>$</code> operator. It's not idiomatic Haskell, but in some cases we might want to use it to create some clarity.</p>

<p>Since we know <code>|&gt;</code> is the exact opposite of <code>$</code>, let's just try to write it ourselves. In Haskell, infix operators are just normal functions with two parameters. Here's an example:</p>

<pre><code class="haskell">*repl &gt; 2 + 3
5

*repl &gt; (+) 2 3
5
</code></pre>

<p>The function <code>(+)</code> can be used as a normal Haskell function, writing the function first and its arguments after it, or as an infix operator, without the parentheses. So we know <code>($)</code> is a function taking two parameters, and we have <code>flip</code> which takes a function with two parameters, and flips the order of them!</p>

<pre><code class="haskell">(|&gt;) = flip ($)
</code></pre>

<p>Easy! Let's now write the original example using <code>(|&gt;)</code>:</p>

<pre><code class="haskell">["foo", "bar", "baz", "qux", "ramsam"]
  |&gt; filter (\x -&gt; length x &lt; 5)
  |&gt; map reverse
</code></pre>

<p>We created our own syntactic sugar! We can now read this left to right, or top to bottom as you will. The result of the first expression you read will be "piped" to the next as the last parameter! We get the exact same result <code>["oof", "rab", "zab", "xuq"]</code>.</p>

<h2 id="%F0%9F%92%AC-domain-language">üí¨ Domain Language</h2>

<p>As you saw in the last example, we can create our own infix functions in Haskell. This can be very useful to create more readable code, using the language of the domain. Let's see a typical example of a function that doesn't do that:</p>

<pre><code class="haskell">changeAddress :: Client -&gt; Address -&gt; Client
</code></pre>

<p>Now when we use this function in the classical way, it looks like this:</p>

<pre><code class="haskell">let abbeyRoad3 = "3 Abbey Road, London NW8 9AY, UK"
let updatedClient = changeAddress client abbeyRoad3
</code></pre>

<p>which doesn't read very well... What if we could use an infix here?</p>

<pre><code class="haskell">let updatedClient = client `changedAddressTo` abbeyRoad3
</code></pre>

<p>Using backticks we can use a function as an infix operator. The only thing we needed to change was the name of the function, and now this looks like a sentence!</p>

<p><code>client changedAddressTo abbeyRoad3</code></p>

<p>This is now the function type:</p>

<pre><code class="haskell">changedAddressTo :: Client -&gt; Address -&gt; Client
</code></pre>

<p>So a simple changed lead to a better understanding of the code.</p>

<h2 id="%F0%9F%93%89-the-absolute-minimum">üìâ The Absolute Minimum</h2>

<p>In the previous examples, you could see how we can mold the existing syntax to our likings, and use that to create very understandable code. Now let's see what happens when you take a language that has almost no syntax at all, like <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">scheme</a>. Literally, the only syntax in scheme is <code>(</code> and <code>)</code>. The rest are functions. Let's check out some code:</p>

<pre><code class="scheme">(define sum
  (lambda (list)
    (cond
      ((null? list) 0)
      (else (+ (car list) (sum (cdr list)))))))
</code></pre>

<p>As you can see, there are lots of <code>(</code>s and <code>)</code>s. Basically, every <code>()</code> combo is a function call.</p>

<ul>
<li><code>(define name body)</code> defines a variable. In this case, it's called <code>sum</code>.</li>
<li><code>(lambda (arguments) body)</code> defines a function. In this case, it has an argument called <code>list</code>.</li>
<li><code>(cond (condition result1) (else result2))</code> creates a conditional. If the <code>condition</code> is <code>#t</code> (true), we return <code>result1</code>, else <code>result2</code>.</li>
<li><code>(null? list)</code> checks if a list is empty.</li>
<li><code>(+ a b)</code> returns the sum of two numbers.</li>
<li><code>(car list)</code> returns the first item of a list (the <code>head</code> of the list).</li>
<li><code>(sum list)</code> is the recursive call to our own defined function.</li>
<li><code>(cdr list)</code> returns a list without its <code>head</code> (the <code>tail</code> of the list).</li>
</ul>

<p>Almost all of the above functions can be defined in <code>scheme</code> itself. That's why you'll find a lot of <code>scheme</code> parsers or environments written in <code>scheme</code>. Even the datatype of a list can be written as a function! And it doesn't end there! Scheme has support for macros which will let you manipulate your own code!</p>

<h2 id="%F0%9F%A4%B7%E2%80%8D%E2%99%82%EF%B8%8F-what%27s-the-point%3F">ü§∑‚Äç‚ôÇÔ∏è What's the point?</h2>

<p>My point isn't that you should try to minimize the amount of syntax to have a good language, but I'm always looking for better ways to write stuff. This means that languages where you can create your own syntax have a high appeal to me. I love to read code that tells a story, so that my brain can try and understand the problem &amp; the solution at hand, instead of the code. I think a lot of functional programming languages have strong support for writing code like this, compared to most OOP languages.</p>

<p>That doesn't mean we can't apply a lot of this in our day-to-day OOP codebases. See what you can do to make your code more meaningful. Can you give your classes, functions and variables better names? How can you lower the cognitive overhead needed to understand the code? How can we bring developer time down? Experimenting with this is something we can do in all languages, but it gets easier if we try and look around to the other languages and ecosystems around us! Don't get stuck in the idioms of the language you're spending the most time with, try stuff, look around, conquer the world!</p>

<p>It's also worth mentioning that there are whole communities around "designing software according to the domain" and "using the language of the domain". If you want to learn more, check out <a href="http://dddcommunity.org/book/evans_2003/">Domain Driven Design</a>! I've been going to the <a href="https://dddeurope.com/">DDD Europe Conference</a> and <a href="https://www.meetup.com/dddbelgium/">DDD Belgium meetups</a> for a few years now, and I must say, a lof of DDD people are trying functional languages!</p>

<p>That concludes this post. See you in the <a href="/blog/2019/01/28/lambda-implementation-details">next Lambda To The Rescue post</a>! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Monoids]]></title>
            <link href="/blog/2018/10/08/lambda-monoids"/>
            <updated>2018-10-08T10:30:00+00:00</updated>
            <id>/blog/2018/10/08/lambda-monoids</id>
            <content type="html"><![CDATA[<p><strong>This is the fourth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%E2%98%95%EF%B8%8F-ordering-some-coffees">‚òïÔ∏è Ordering some coffees</h2>

<p>In the previous posts, you already came across a few functional programming concepts. Let's explore one more. Let's say we went to a coffee bar and we want to calculate the total price of an order of coffees:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50
</code></pre>

<p>If you want to quickly do this from the top of your head, it makes sense to calculate it like this:</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= (2.50 + 2.50) + (2.90 + 2.10) + 4.50
= 5             + 5             + 4.50
= 10                            + 4.50
= 14.50
</code></pre>

<p>instead of</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= 2.50 + (2.50 + 2.90) + (2.10 + 4.50)
= 2.50 + 5.40          + 6.60
= 7.90                 + 6.60
= 14.50
</code></pre>

<p>As you already knew, these two approaches yield the same results. We say the location of the <code>(</code> and <code>)</code> when doing <code>+</code> isn't important, or <code>+</code> is <em>associative</em>.</p>

<p>Usually the receipt has a line "service" with some service costs of the order as well. In this case, since we ordered more than 4 coffees, we get service for free. The actual receipt looked like this:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50

- service         ‚Ç¨ 0
</code></pre>

<p>Does this change our calculation?</p>

<pre><code class="haskell">(2.50 + 2.50) + (2.90 + 2.10) + 4.50 + 0
= 5           + 5             + 4.50 + 0
= 10                          + 4.50 + 0
= 14.50                              + 0
= 14.50
</code></pre>

<p>Not at all! We conclude that 0 is "neutral" in that it doesn't change our calculations when using <code>+</code>. We call this <code>0</code> value <em>identity</em>.</p>

<h2 id="%F0%9F%A7%90-monoids">üßê Monoids</h2>

<p>Now, when we find these two properties (associativity and neutral element) for a function and its data, we found a <em>Monoid</em>. Cool! Let's see if we can find some other Monoids!</p>

<p>Let's see if a list of integers, and the operation <code>++</code> (append) form a Monoid:</p>

<pre><code class="haskell">$ ([1, 2] ++ [3, 4]) ++ [5, 6]
[1, 2, 3, 4, 5, 6]

$ [1, 2] ++ ([3, 4] ++ [5, 6])
[1, 2, 3, 4, 5, 6]
</code></pre>

<p>Ok, we have associativity, let's check if we can find a neutral element. How about the empty list?</p>

<pre><code class="haskell">$ [1, 2] ++ []
[1, 2]
</code></pre>

<p>Nice! We found another Monoid!</p>

<p>How about this:</p>

<pre><code class="haskell">data DiskUsage = DiskUsage { server :: String
                           , consumed :: Int
                           } deriving (Eq, Show)

data ServerStats = ServerStats { totalInGB :: Int
                               , perServer :: [DiskUsage]
                               } deriving (Eq, Show)

mergeServerStats :: ServerStats -&gt; ServerStats -&gt; ServerStats
mergeServerStats a b = ServerStats { totalInGB = totalInGB a + totalInGB b
                                   , perServer = perServer a ++ perServer b
                                   }
</code></pre>

<p>A program we could use to measure disk usage in our fictional data center's server racks returns <code>ServerStats</code> per rack. For every server in the rack, there's a <code>DiskUsage</code> entry in the <code>perServer</code> list. To easily calculate the total disk usage in our fictional data center, we just use <code>mergeServerStats</code> to sum it all, <em>et voil√†</em> we get one <code>ServerStats</code> with a total amount of GB used, and a list of all servers with their <code>DiskUsage</code>. (Note that the <code>totalInGB</code> can be totally wrong in this example. In a real world application you would just calculate that from the <code>perServer</code> value at all times. It's there because of convenience: you can immedately see how much disk usage is for a given rack.)</p>

<p>The question is, is this a <strong>Monoid</strong>? ü§î</p>

<p>To talk about a Monoid, we know we need a datatype. In this case we have <code>ServerStats</code>. Good. We also need a binary operation. We have <code>mergeServerStats</code>. Nice! We're halfway there. Let's see if we have the other stuff we need:</p>

<ul>
<li><p>associativity:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$ bar = DiskUsage { server = "bar", consumed = 99 }
$ baz = DiskUsage { server = "baz", consumed = 1 }
$ qux = DiskUsage { server = "qux", consumed = 0 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ rack2 = ServerStats { totalInGB = 100, perServer = [bar, baz] }
$ rack3 = ServerStats { totalInGB = 0, perServer = [qux] }
$
$ result1 = mergeServerStats (mergeServerStats rack1 rack2) rack3
$ result2 = mergeServerStats rack1 (mergeServerStats rack2 rack3)
$
$ result1 == result2
True
</code></pre>

<p>Applying <code>mergeServerStats</code> first to <code>rack1</code> and <code>rack2</code>, and then applying the same function to the result of the first calculation and <code>rack3</code> had the same result as first applying <code>mergeServerStats</code> to <code>rack1</code> and the result of applying that same function to <code>rack2</code> and <code>rack3</code>. We have associativity!</p></li>
<li><p>neutral element:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ neutral = ServerStats { totalInGB = 0, perServer = [] }
$
$ result = mergeServerStats rack1 neutral
$
$ result == rack1
True
</code></pre>

<p>We were able to find a <code>ServerStats</code> value <code>neutral</code> that, when appended to another value <code>rack1</code> using <code>mergeServerStats</code> resulted in the same value as <code>rack1</code> again! This means we have a neutral element!</p></li>
</ul>

<p>We can conclude that <code>ServerStats</code> forms a Monoid with its operation <code>mergeServerStats</code>.</p>

<h2 id="%F0%9F%92%B0-usefulness">üí∞ Usefulness</h2>

<p>Now why is this such a big deal? Why do we keep rambling on about this? Let's evaluate this next question from our fictional operations engineers:</p>

<blockquote>
  <p>Our datacenter grew quickly and we now have 10 racks with 10 servers each. We have a script that produces a <code>ServerStats</code> entry per rack. We want to know the total disk usage across all racks. Can we do this?</p>
</blockquote>

<p>We quickly head back to <a href="/blog/2018/06/27/lambda-recursion/#recognizing-a-pattern">last "Lambda To The Rescue" episode</a> and check out the paragraph about <code>fold</code>. Let's see if folds can help us!</p>

<pre><code class="haskell">$ foldr mergeServerStats neutral [ rack1, rack2, rack3, ... ]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          , ...
                          ]
            }
</code></pre>

<p>As you can see, we used all aspects of the Monoid in this example. We used the <em>neutral element</em> to have a starting value for our <code>foldl</code> invocation. We gave <code>foldl</code> the <code>mergeServerStats</code> binary operation over our datatype, and didn't worry about order of evaluation, which is where the <code>associativity</code> was helpful (we don't have to worry about implementation of <code>foldl</code>).</p>

<p>So, when we find out we're working with a Monoid, we immediately know we can <code>fold</code> easily over lists of that datatype!</p>

<p>In fact, if you're acquainted with <em>MapReduce</em>, a strategy for processing lots of data, you'll see that having a list of data allows you to <code>map</code> over it, and finding a Monoid between the datatype inside that list and the operation you want to do will allow you to <code>reduce</code> (or <code>fold</code>) easily over the list. Now you know what to look for!</p>

<p>Aside from "knowing what we can do with it", there's another benefit to understanding <code>Monoid</code>s, and that is <em>familiarity</em>. If you're checking out a codebase, and you find a Monoid instance, you'll feel right at home, and you'll understand the operations done on that particular datatype much easier than before. Which leads me to "formalizing".</p>

<h2 id="%F0%9F%A4%AF-formalizing">ü§Ø Formalizing</h2>

<p>You can even go further with this: in Haskell, there's a datatype <code>Monoid</code> which formalizes these properties in a typeclass:</p>

<pre><code class="haskell">class Monoid m where
  mempty :: m
  mappend :: m -&gt; m -&gt; m
  mconcat :: [m] -&gt; m
  mconcat = foldr mappend mempty
</code></pre>

<p>This means that you can formalize that your datatype &amp; operation combo is a <code>Monoid</code> instance, because it has a neutral element <code>mempty</code> and a binary operation <code>mappend</code>. You then get <code>mconcat</code> for free, which is the same as doing the <code>foldr</code> of the last example. Let's do this for our <code>ServerStats</code> type:</p>

<pre><code class="haskell">instance Monoid ServerStats where
  mempty = ServerStats { totalInGB = 0, perServer = [] }
  mappend = mergeServerStats
</code></pre>

<p>We can now do this:</p>

<pre><code class="haskell">$ mconcat [rack1, rack2, rack3]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          ]
            }
</code></pre>

<p>This <code>mconcat</code> function thus comes for free and will work on any <code>Monoid</code>! You can mostly guess the behaviour of this function whenever you see it!</p>

<h2 id="%F0%9F%98%85-back-to-oop">üòÖ Back to OOP</h2>

<p>What to do with this knowledge in the Object Oriented world? We use lists to work with objects of the same type constantly, and do operations on objects in those lists to gather new information. Most of the time I see this, it's done using <code>foreach</code> or something like it. However, as far as I'm concerned there's no difference to the Functional Programming world here. If you already embrace <code>map</code>, <code>filter</code> and <code>reduce</code>, you should also be thinking about the datastructure inside the list: is it a <em>Monoid</em>? You'll then understand better how it will behave when doing operations on it and you'll immediately know which the best reducer functions are!</p>

<p>That concludes this post. Hope to see you for <a href="/blog/2018/11/28/lambda-syntax">the next one</a>! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[üëæ Anthony and Jasper at Nordic.js 2018]]></title>
            <link href="/blog/2018/09/28/anthony-and-jasper-went-to-nordic"/>
            <updated>2018-09-28T10:00:00+00:00</updated>
            <id>/blog/2018/09/28/anthony-and-jasper-went-to-nordic</id>
            <content type="html"><![CDATA[<p><center>
<img src="/images/2018-09-10-anthony-and-jasper-went-to-nordic.js-2018/nordicjs.png" alt="Nordic.js cover" />
</center></p>

<p>Our colleague Anthony was so impressed by <a href="https://engagor.github.io/blog/2017/09/15/nordicjs/">last year's edition</a> that he decided to return this year.
He even convinced me to go with him to this cool web conference.</p>

<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/BnbWhy8FtVJ/?utm_source=ig_embed&amp;utm_medium=loading" data-instgrm-version="12" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/BnbWhy8FtVJ/?utm_source=ig_embed&amp;utm_medium=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div><div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;"> Dit bericht bekijken op Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div></a> <p style=" margin:8px 0 0 0; padding:0 4px;"> <a href="https://www.instagram.com/p/BnbWhy8FtVJ/?utm_source=ig_embed&amp;utm_medium=loading" style=" color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;" target="_blank">FIKA!!üíñüíñ #nordicjs</a></p> <p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">Een bericht gedeeld door <a href="https://www.instagram.com/nordicjs/?utm_source=ig_embed&amp;utm_medium=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;" target="_blank"> Nordic.js</a> (@nordicjs) op <time style=" font-family:Arial,sans-serif; font-size:14px; line-height:17px;" datetime="2018-09-07T13:56:58+00:00">7 Sep 2018 om 6:56 (PDT)</time></p></div></blockquote>

<h2 id="hosts-%F0%9F%91%A9%E2%80%8D%F0%9F%9A%80%F0%9F%91%A8%E2%80%8D%F0%9F%9A%80">Hosts üë©‚ÄçüöÄüë®‚ÄçüöÄ</h2>

<p>First of all, we had two very funny hosts: <a href="https://twitter.com/unnderbar">Unn</a> and <a href="https://twitter.com/mpjme">MPJ</a>.</p>

<p>They asked every speaker for three words that they would creatively use when introducing the next speaker to the audience. This resulted in some weird introductions when the speakers picked completely random words to see what our hosts could come up with. They also provided some entertainment between speakers.</p>

<p>Check out this clip of the "Fight Scene Karaoke" they did on stage:</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">starting the second day for <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> <a href="https://t.co/xJo8UcOMhq">pic.twitter.com/xJo8UcOMhq</a></p>&mdash; Alejandro Oviedo (@a0viedo) <a href="https://twitter.com/a0viedo/status/1037969613080997890?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<p>MPJ has his own YouTube channel <a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">Fun Fun Functions</a> where you can find some development discussions with some of the speakers.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uy6sU-Ymlaw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="talks-%F0%9F%92%AC">Talks üí¨</h2>

<p><em>Check the <a href="https://www.youtube.com/user/nordicjs">Nordic.js youtube channel</a> for all videos.</em></p>

<p>Also this year it was a single track conference. They had a good variety of light talks like "hey I have a good story/practice for you" and some very code rich "let's take a closer look" talks.</p>

<p>All talks were about Javascript, frontend development in general and the Javascript community. Below is a small list of my favourites.</p>

<h3 id="building-foundations-of-the-node.js-community"><a href="http://nordicjs.com/speakers#tierney-cyren">Building Foundations of the Node.js Community</a></h3>

<p>by <a href="https://twitter.com/bitandbang">Tierney Cyren</a></p>

<p>Tierney is a Co-chair of the Node.js Community Committee, and a member of the Node.js Evangelism Working Group.
Tierney kicked off the conference with a motivating and inspiring keynote about Node.js and why it has such a great ecosystem behind it.
Main thought: Everything is about community and everybody can be part of it.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/kgyb0PV5d_A" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="fast-but-not-furious%3A-debugging-user-interaction-performance-issues"><a href="http://nordicjs.com/speakers#anna-migas">Fast but not furious: debugging user interaction performance issues</a></h3>

<p>by <a href="https://twitter.com/szynszyliszys">Anna Migas</a></p>

<p>Anna explained a bit about debugging tabs in Google Chrome and Firefox.
All based on her findings while developing some css plugins like <a href="https://github.com/LunarLogic/starability">Starability</a>. She worked specifically on the rendering of animations.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LFYs7XT5jXI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="magic-tricks-with-houdini"><a href="http://nordicjs.com/speakers#sam-richard">Magic Tricks with Houdini</a></h3>

<p>by <a href="https://twitter.com/Snugug">Sam Richard</a></p>

<p>I was lucky to meet Sam at the "Dinner with new friends" (organized by NordicJS). We've been sent to an Indonesian restaurant with delicious food. It was great to have interesting company when you're having a meal abroad!
So Sam is a UI Architect at IBM and gave a talk about Houdini.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">CSS Houdini let us tap into the CSS engine, extending it with JavaScript, not only mimicking. Cool right? <a href="https://twitter.com/Snugug?ref_src=twsrc%5Etfw">@snugug</a> <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a></p>&mdash; Jonatan (@karlerikjonatan) <a href="https://twitter.com/karlerikjonatan/status/1037645299353878528?ref_src=twsrc%5Etfw">6 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/gg0NiBBd2Ak" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>Side note: He's been presenting this subject for a while now. He said that he has to change his slides every time because newer versions of Houdini are so frequently released. So, the above video can possibly be outdated.</p>

<h3 id="can-you-tell-me-if-your-node-app-is-healthy%3F"><a href="http://nordicjs.com/speakers#alejandro-oviedo-garca">Can you tell me if your Node app is healthy?</a></h3>

<p>by <a href="https://twitter.com/a0viedo">Alejandro Oviedo Garc√≠a</a></p>

<p>Alejandro talked about monitoring for your Node app.
Such as CPU consumption or memory usage, number of requests, ...
He even explained the event loop with toy trains which was visually very nice to see!</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">üöÇ‚ú®¬†<a href="https://twitter.com/a0viedo?ref_src=twsrc%5Etfw">@a0viedo</a> demonstrates the relationship of event handlers + event loops and why event loop lag is bad with toy trains in his &quot;Can you tell me if your Node app is healthy?&quot; talk at <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> üöÇ‚ú® <a href="https://t.co/MgrTu9iirJ">pic.twitter.com/MgrTu9iirJ</a></p>&mdash; Jessie-BuzzFeed @ NordicJS (@buzzfeedexp) <a href="https://twitter.com/buzzfeedexp/status/1037674309391659008?ref_src=twsrc%5Etfw">6 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">thank you <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a>! check out my demo and list of resources here <a href="https://t.co/2v3PWUhjNC">https://t.co/2v3PWUhjNC</a></p>&mdash; Alejandro Oviedo (@a0viedo) <a href="https://twitter.com/a0viedo/status/1037677069067534336?ref_src=twsrc%5Etfw">6 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7HoxAeQIck4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="look-mum%2C-no-hands%21"><a href="http://nordicjs.com/speakers#charlie-gerard">Look mum, no hands!</a></h3>

<p>by <a href="https://twitter.com/devdevcharlie">Charlie Gerard</a></p>

<p>This was definitely the winner of most rants in a presentation ü§¨.
Although it was very interesting and funny to watch.</p>

<p>She brought a headset and programmed it with a bunch of JS, so that it could "read" your mind.
During her presentation, she decided to give a live demo. Very brave and of course it failed in the beginning, but in the end she was able to demonstrate something.
First she selected keys on a keyboard with her eyes and after that she controlled a drone with her mind.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Here are the slides for my talk about mind control in JavaScript if anyone wants the links to resources I talked about :) <a href="https://t.co/hrHozZRUIv">https://t.co/hrHozZRUIv</a> Feel free to ask any question! üòä <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a></p>&mdash; Charlie Gerard üè≥Ô∏è‚Äçüåà (@devdevcharlie) <a href="https://twitter.com/devdevcharlie/status/1037962564297220097?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/X-tpqxC7-co" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="powerful-automation-with-the-chrome-devtools-protocol"><a href="http://nordicjs.com/speakers#trent-willis">Powerful Automation with the Chrome DevTools Protocol</a></h3>

<p>by <a href="https://twitter.com/trentmwillis">Trent Willis</a></p>

<p>Trent is a Senior UI Engineer at Netflix.
He actually didn't talk about his favorite Netflix show, but talked about his ChitChat app.
During his presentation he was explaining how you can use Puppeteer together with some Chrome DevTools.</p>

<p>Afterwards, he wrote this blogpost about this subject: <a href="https://pretty-okay.com/2018/09/17/static-site-api">How To Turn Your Static Site Into An API With Puppeteer</a></p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Hey <a href="https://twitter.com/hashtag/NordicJS?src=hash&amp;ref_src=twsrc%5Etfw">#NordicJS</a>, the slides to my talk and links to the demos/app are up now on <a href="https://twitter.com/benotist?ref_src=twsrc%5Etfw">@benotist</a>! Check it out and share it if you like it üòÑ I can&#39;t wait to see what y&#39;all build! <a href="https://t.co/CGQbxk2mn6">https://t.co/CGQbxk2mn6</a></p>&mdash; Trent Willis (@trentmwillis) <a href="https://twitter.com/trentmwillis/status/1037996740941701120?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">This is why we can&#39;t have nice things. <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a>  <a href="https://twitter.com/trentmwillis?ref_src=twsrc%5Etfw">@trentmwillis</a> <a href="https://twitter.com/nordicjs?ref_src=twsrc%5Etfw">@nordicjs</a> <a href="https://t.co/ufGZowIpuP">pic.twitter.com/ufGZowIpuP</a></p>&mdash; üåç üå≥ üêù üåä üè≥Ô∏è‚Äçüåà (@reimertz) <a href="https://twitter.com/reimertz/status/1037721767383654403?ref_src=twsrc%5Etfw">6 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/piip-JSc4hc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="accessible-by-law%21-generating-colors-with-js-and-css-custom-properties"><a href="http://nordicjs.com/speakers#ingvild-indreb">Accessible by law! Generating colors with JS and CSS Custom Properties</a></h3>

<p>by <a href="https://twitter.com/IngvildIndrebo">Ingvild Indreb√∏</a></p>

<p>Ingvild is from Norway and she told us that <a href="https://medium.com/confrere/its-illegal-to-have-an-inaccessible-website-in-norway-and-that-s-good-news-for-all-of-us-b59a9e929d54">it‚Äôs illegal to have an inaccessible website in Norway</a>. Yes, by law!
Lot's of big companies have nice websites, but is not accessible for everyone, so you got bad headers in newspapers and you will probably loose some visitors/clients on your website.
Her talk was more about colors and contrast in websites. The company where she's working for, has a calculation about which primary and secondary colours should fit best with each other.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Accessible by Law by <a href="https://twitter.com/IngvildIndrebo?ref_src=twsrc%5Etfw">@IngvildIndrebo</a>  at <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> <a href="https://twitter.com/nordicjs?ref_src=twsrc%5Etfw">@nordicjs</a> as <a href="https://twitter.com/hashtag/sketchnotes?src=hash&amp;ref_src=twsrc%5Etfw">#sketchnotes</a> <a href="https://t.co/773ODWBZu4">pic.twitter.com/773ODWBZu4</a></p>&mdash; Norman Wehrle (@normanwehrle) <a href="https://twitter.com/normanwehrle/status/1038017526574272512?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Interesting talk by <a href="https://twitter.com/IngvildIndrebo?ref_src=twsrc%5Etfw">@ingvildindrebo</a> on accessibility and color contrast - required by Norwegian law! Similar to the contrast check we added when we built <a href="https://t.co/UfWMizyQuq">https://t.co/UfWMizyQuq</a> <a href="https://twitter.com/Danetag?ref_src=twsrc%5Etfw">@Danetag</a> üëÄ<a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> <a href="https://t.co/YvxlLDGJAt">pic.twitter.com/YvxlLDGJAt</a></p>&mdash; Majsan Auvinen (@majsanauvinen) <a href="https://twitter.com/majsanauvinen/status/1038100592311394305?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2fO8B15uM1s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="why-we-built-another-framework"><a href="http://nordicjs.com/speakers#tomas-della-vedova">Why we built another framework</a></h3>

<p>by <a href="https://twitter.com/delvedor">Tomas Della Vedova</a></p>

<p>Tomas is an Italian guy that works for <a href="https://twitter.com/elastic">Elastic</a>.</p>

<p>He made <a href="https://www.fastify.io/">Fastify</a>, a web framework for Node.js.
In his talk, he discussed the pros and cons of building this framework.
The focus was speed (what's in a name?), but also what a framework should have that will reduce the speed a bit.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Why we build another franework by <a href="https://twitter.com/delvedor?ref_src=twsrc%5Etfw">@delvedor</a> at <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> <a href="https://twitter.com/nordicjs?ref_src=twsrc%5Etfw">@nordicjs</a> as <a href="https://twitter.com/hashtag/sketchnotes?src=hash&amp;ref_src=twsrc%5Etfw">#sketchnotes</a> <a href="https://t.co/eQRr17ugiI">pic.twitter.com/eQRr17ugiI</a></p>&mdash; Norman Wehrle (@normanwehrle) <a href="https://twitter.com/normanwehrle/status/1038018303594319872?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ucatti2b7E4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="empathy-driven-development%3A-boosting-performance-by-implementing-for-unfavorable-conditions"><a href="http://nordicjs.com/speakers#isabella-silveira-de-souza">Empathy Driven Development: Boosting performance by implementing for unfavorable conditions</a></h3>

<p>by <a href="https://twitter.com/silveira_bells">Isabella Silveira de Souza</a></p>

<p>Main thought: Develop for every screen.
She gave some tips to render specific parts of your webpage first to have a speedier feeling.
In the beginning of her talk, she referred to her hometown Rio De Janeiro where the population is a bit like the internet: some people have it all, others have to do something with what they have. Rich and poor. 60fps and 120fps.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Good practices on performance boosting:<br>1. Set a performance budget<br>2. Test on real phones and networks<br>3. Start optimizing early, keep it in your radar<a href="https://twitter.com/silveira_bells?ref_src=twsrc%5Etfw">@silveira_bells</a> <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a></p>&mdash; Nordic.js (@nordicjs) <a href="https://twitter.com/nordicjs/status/1038058859829579776?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">So excited for this talk by <a href="https://twitter.com/silveira_bells?ref_src=twsrc%5Etfw">@silveira_bells</a>! Empathy Driven Development <a href="https://t.co/Paak3jilJF">pic.twitter.com/Paak3jilJF</a></p>&mdash; Sam Richard - üá∏üá™ Nordic.js (@Snugug) <a href="https://twitter.com/Snugug/status/1038051579608358914?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LjGQiEcBn1Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="headers-for-hackers"><a href="http://nordicjs.com/speakers#andrew-betts">Headers for Hackers</a></h3>

<p>by <a href="https://twitter.com/triblondon">Andrew Betts</a></p>

<p>Andrew was elected to <a href="https://twitter.com/w3ctag">W3C Technical Architecture Group</a> and gave a talk about HTTP headers.</p>

<p>He gave some numbers about headers that people shouldn't use anymore, but are still represented in a lot of websites.
He also talked about some new interesting headers to check out.</p>

<p>Main thought: We have to focus more on headers, because they can prevent a lot of hacks you don't want.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/II9m9_esNZc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="connecting-javascript-to-the-blockchain"><a href="http://nordicjs.com/speakers#meng-shang">Connecting JavaScript to the Blockchain</a></h3>

<p>by Meng Shang</p>

<p>Well euhm... this happened (with React):</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">And Meng Shang just created a blockchain contract, deployed and interacted with it in about three minutes, live, onstage üò≤üò≤üò≤ <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a></p>&mdash; Lucas Medeiros Reis (@iamlucasmreis) <a href="https://twitter.com/iamlucasmreis/status/1038075373895012353?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">DApps DevTools with Meng Shang <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> <a href="https://t.co/KcrtEvNSiR">pic.twitter.com/KcrtEvNSiR</a></p>&mdash; Mikael Forsgren (@mikaelf) <a href="https://twitter.com/mikaelf/status/1038071573692014592?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<h2 id="lightning-talks-%E2%9A%A1%EF%B8%8F">Lightning talks ‚ö°Ô∏è</h2>

<p>It's a concept where attendees can apply to give a short presentation about something they like or want to share with the audience.
There is a limit of 5min. If they go overtime, the hosts chase the presenter off the stage with candy.</p>

<h3 id="picasso.js">Picasso.js</h3>

<p>by Alexander Kalsson</p>

<p><a href="https://picassojs.com/">Picasso.js</a> is based on <a href="https://d3js.org/">D3.js</a>, but easier to start with.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Hope you enjoyed our great lightning fast üôåüèΩ‚ö°Ô∏è<a href="https://twitter.com/nordicjs?ref_src=twsrc%5Etfw">@nordicjs</a> Lightning Talk by <a href="https://twitter.com/mindspank?ref_src=twsrc%5Etfw">@mindspank</a>. Alex is around today to answer any questions about <a href="https://twitter.com/picassodotjs?ref_src=twsrc%5Etfw">@picassodotjs</a>, our awesome dev community and so much more! <a href="https://twitter.com/hashtag/nordicjs?src=hash&amp;ref_src=twsrc%5Etfw">#nordicjs</a> Holla! <a href="https://t.co/CmM2pRdf35">pic.twitter.com/CmM2pRdf35</a></p>&mdash; Qlik Branch (@qlikbranch) <a href="https://twitter.com/qlikbranch/status/1037651512028278785?ref_src=twsrc%5Etfw">6 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Owq7Fm4qqYw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="expo">Expo</h3>

<p>by <a href="https://twitter.com/reimertz">Pierre Reimertz</a></p>

<p>A guy that had too many slides and talked too fast. But it was cool, very cool!
He created CatSnap, a kind of Instagram where you can upload pictures, but if there isn't a cat in the picture, the picture is blurred.
React and React Native are perfect tools to create this app, but in the beginning, it requires some study to get started and Pierre wanted to made the app as fast as possible.
So he used <a href="https://expo.io/">Expo</a>. You can compare it a bit with <a href="https://ionicframework.com/">ionic</a>, which is also using HTML, CSS and JS to build your app.</p>

<p>It was funny to see him struggling with the hardware part of his demo.</p>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Omg, lightning talks at <a href="https://twitter.com/nordicjs?ref_src=twsrc%5Etfw">@nordicjs</a> is always a lot of fun! For the few ones who would like to break the app: <a href="https://t.co/2TSWRJZicd">https://t.co/2TSWRJZicd</a> <br><br>I promise to share the codez later this week. <br><br>Also, sorry <a href="https://twitter.com/Apple?ref_src=twsrc%5Etfw">@apple</a> for the rant. You good, but kind of not either. üò¢</p>&mdash; üåç üå≥ üêù üåä üè≥Ô∏è‚Äçüåà (@reimertz) <a href="https://twitter.com/reimertz/status/1038059146585759744?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Possibly the best talk at <a href="https://twitter.com/hashtag/NordicJS?src=hash&amp;ref_src=twsrc%5Etfw">#NordicJS</a> so far by <a href="https://twitter.com/reimertz?ref_src=twsrc%5Etfw">@reimertz</a> ‚Äúcats are great, MacOS is not‚Äù</p>&mdash; JesperBylund (@JesperBylund) <a href="https://twitter.com/JesperBylund/status/1038045432541335552?ref_src=twsrc%5Etfw">7 september 2018</a></blockquote>

<iframe width="560" height="315" src="https://www.youtube.com/embed/QDvo-6yb4MQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="this-was-nordic.js-2018-%F0%9F%8E%A5">This was Nordic.js 2018 üé•</h2>

<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/Bn8zR_4FeFm/?utm_source=ig_embed&amp;utm_medium=loading" data-instgrm-version="12" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/Bn8zR_4FeFm/?utm_source=ig_embed&amp;utm_medium=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div><div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;"> Dit bericht bekijken op Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div></a> <p style=" margin:8px 0 0 0; padding:0 4px;"> <a href="https://www.instagram.com/p/Bn8zR_4FeFm/?utm_source=ig_embed&amp;utm_medium=loading" style=" color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;" target="_blank">Thank YOU for attending Nordic.js 2018üíï Hope you had as much fun as we did! All talks will be available on our YouTube channel soon! Stay tuned‚ú® Video by: Martin St√•hlberg #nordicjs</a></p> <p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">Een bericht gedeeld door <a href="https://www.instagram.com/nordicjs/?utm_source=ig_embed&amp;utm_medium=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;" target="_blank"> Nordic.js</a> (@nordicjs) op <time style=" font-family:Arial,sans-serif; font-size:14px; line-height:17px;" datetime="2018-09-20T13:43:35+00:00">20 Sep 2018 om 6:43 (PDT)</time></p></div></blockquote>

<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<script async defer src="//www.instagram.com/embed.js"></script></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Error: Internal Rate Limit Reached]]></title>
            <link href="/blog/2018/09/11/error-internal-rate-limit-reached"/>
            <updated>2018-09-11T10:00:00+00:00</updated>
            <id>/blog/2018/09/11/error-internal-rate-limit-reached</id>
            <content type="html"><![CDATA[<p>A while ago we wrote about <a href="/blog/2017/05/02/sliding-window-rate-limiter-redis">building a sliding window rate limiter with redis</a>. We needed this rate limiter for counting the amount of API calls we did to the <a href="https://www.instagram.com/developer/">Instagram API</a>. This has been working great for us. You might have heard of the deprecation of the Instagram API. Facebook introduced a <a href="https://developers.facebook.com/docs/instagram-api">new instagram API</a> as part of the Facebook graph API.</p>

<p>The new Instagram API uses the same <a href="https://developers.facebook.com/docs/graph-api/advanced/rate-limiting">rate limit measures</a> as the Facebook graph API (depends on the active users of your application). Our integration with the new Instagram API uses the same sliding window rate limiter. If our internal rate limit is reached we throw an exception: "Internal rate limit reached". This exception triggers a timeout, the timeout increases when the exception is thrown again.</p>

<p>When we deployed our integration we noticed that when an access token reached the internal rate limit, the tasks refused to do any calls to the Instagram API, even when it was allowed again, because our rate limiter was still holding them back. This resulted in data delays, not good!</p>

<p>If a combustion engine gets excessive fuel in the combustion chamber, the engine becomes flooded. You'll need to release the throttle to stop the flooding. This is exactly what's happening in our rate limiter.</p>

<p>Each time we do an API call, the following commands are sent to Redis (<a href="/blog/2017/05/02/sliding-window-rate-limiter-redis">We explained this in our previous blogpost</a>):</p>

<pre><code>&gt; MULTI
&gt; ZREMRANGEBYSCORE $accessToken 0 ($now - $slidingWindow)
&gt; ZRANGE $accessToken 0 -1
&gt; ZADD $accessToken $now $now
&gt; EXPIRE $accessToken $slidingWindow
&gt; EXEC
</code></pre>

<p>Do you see why the rate limiter gets "flooded"?</p>

<p>If you are thinking about the <code>ZADD</code> command, you're right!</p>

<p>Even when we're not allowed to do an API call we still add a timestamp. We knew this and we agreed that this was okay for our use case. However, we're using a lower rate limit (compared to the old Instagram API), which resulted in a lot of internal rate limit reached exceptions for busy Instagram accounts.</p>

<p>How can we solve this? It's important that we execute <code>ZRANGE</code> and <code>ZADD</code> in the same transaction. We want to avoid race conditions because the tasks that do these API calls are distributed. How can we check the result of <code>ZRANGE</code> before doing the <code>ZADD</code> command in the same transaction? <a href="https://github.com/itamarhaber">Itamar Haber</a> from <a href="https://redislabs.com/">Redis Labs</a> wrote a comment on our <a href="/blog/2017/05/02/sliding-window-rate-limiter-redis">previous blogpost</a> suggesting to <a href="https://gist.github.com/itamarhaber/254bac4283d1675c5a5569639b0322aa">use a Lua script</a> (Thanks, Itamar!). Using a Lua script we can execute Redis commands conditionally in an atomic way.</p>

<p>This is what we came up with:</p>

<pre><code class="lua">local token = KEYS[1]
local now = tonumber(ARGV[1])
local window = tonumber(ARGV[2])
local limit = tonumber(ARGV[3])

local clearBefore = now - window
redis.call('ZREMRANGEBYSCORE', token, 0, clearBefore)

local amount = redis.call('ZCARD', token)
if amount &lt; limit then
    redis.call('ZADD', token, now, now)
end
redis.call('EXPIRE', token, window)

return limit - amount
</code></pre>

<p>Let's break it down (Yeah, yeah üé∂):</p>

<ol>
<li>Assign the script arguments to variables.</li>
<li>Call <code>ZREMRANGEBYSCORE</code> to cleanup timestamps before the window.</li>
<li>Instead of <code>ZRANGE</code> we'll use <code>ZCARD</code> to know how many calls we already did.</li>
<li>Call <code>ZADD</code> when we've not reached the limit yet.</li>
<li>Call <code>EXPIRE</code> to make sure the sorted set, that holds the timestamps, gets cleaned up after the window has passed.</li>
</ol>

<p>In PHP we can evaluate the script using <a href="https://github.com/phpredis/phpredis">https://github.com/phpredis/phpredis</a>:</p>

<pre><code class="php">$this-&gt;redis-&gt;eval($script, [$key, $now, $window, $limit], 1);
</code></pre>

<p>This works great. Our tasks are now doing as much API calls as possible without flooding the rate limiter. üëèüòé</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Skill Based Routing: Secure an Internship with us]]></title>
            <link href="/blog/2018/07/03/internship-skill-based-routing"/>
            <updated>2018-07-03T10:00:00+00:00</updated>
            <id>/blog/2018/07/03/internship-skill-based-routing</id>
            <content type="html"><![CDATA[<h2 id="what-do-we-do%3F">What do we do?</h2>

<p>The Clarabridge CX Social team builds a customer care tool for social media. Our clients use our software to be able to respond to the incoming questions and complaints on their Facebook pages, Twitter accounts, Instagram profiles, a.o. These clients often have a high volume of incoming messages, on several social profiles. We try to make those people‚Äôs lives easier by offering automation tools, smart routing of messages and reply suggestions, among others.
<a href="https://developers.engagor.com/team">Read more about what we do here</a>.</p>

<p>As of September 2018, we have room for one or more enthusiastic interns to join us for (at least) a couple of weeks <em>(preferably 4 days a week, any time between September 2018 to June 2019)</em>, to work as part of the CX Social development team.</p>

<h2 id="the-project%3A-skill-based-routing%21">The Project: Skill based routing!</h2>

<p>We‚Äôre looking for someone to help us solve this problem for our clients; When a new question or complaints comes in, a customer care agent will handle that complaint; but which agent? Clarabridge CX Social offers several ways and algorithms that can help decide which questions go to which agent at a certain time, but there is still room for improvement ‚Ä¶ Ideally we want to assign the question to the agent that will be able to handle &amp; answer the question adequately in the shortest amount of time. Several factors are at play here: properties of the question, metadata about the question, metadata from who‚Äôs asking, which agents are available, skills of those agents, which mailboxes they work in, etc. We want you to look for ways how we can optimize our current algorithms and help us to implement them.</p>

<p>Here's a real-world example: a question in French about billing comes in 5 minutes before the end of the Paris team shift. Who will handle this question?</p>

<p><center>
<img src="/images/2018-07-02-internship-skill-based-routing/routing.png" alt="Skill Based Routing" /><br />
<small>The role of skill based routing</small>
</center></p>

<p>We will provide labeled data and statistics about agent performance. It‚Äôs up to you to figure out the best approach, with our help of course.</p>

<h2 id="the-internship">The Internship</h2>

<p>As an intern you are an integral part of the R&amp;D team working on different parts of the application using technologies like PHP, React, MySQL, Redis, memcached, ElasticSearch, RabbitMQ, a.o. The other team members include a designer, front-end developer, data scientist, and several system engineers &amp; full-stack web developers.
We are looking for a student with interest and knowledge of both front-end as back-end technologies.</p>

<p>Want to hear from a previous intern what it‚Äôs like to join our team? Read about <a href="https://engagor.github.io/blog/2017/06/01/internship-gheerwijn-cx-social-developer/">Gheerwijn‚Äôs experiences</a>.</p>

<h2 id="interested%3F">Interested?</h2>

<p>We are looking for someone to join us in the Gent, Belgium office of Clarabridge, located at Grauwpoort 1, 9000 Gent.</p>

<p>Does this seem like a fun challenge for you? Please reach out to <a href="&#x6d;&#97;&#105;l&#x74;&#x6f;&#58;&#106;&#x75;&#x72;&#114;&#105;a&#x61;&#110;&#46;p&#x65;&#x72;&#115;&#121;&#x6e;&#x40;&#99;&#108;a&#x72;&#x61;&#98;&#114;&#x69;&#x64;&#103;&#101;&#x2e;&#x63;&#111;&#109;">jurriaan.persyn@clarabridge.com</a> with your details, and the requirements for your internship, and we‚Äôll be in touch!</p>
]]></content>
        </entry>
    </feed>
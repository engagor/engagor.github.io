<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/Git.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-04-05T09:04:40+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How to edit a commit message]]></title>
            <link href="/blog/2017/04/03/how-to-edit-commit-description"/>
            <updated>2017-04-03T10:00:00+00:00</updated>
            <id>/blog/2017/04/03/how-to-edit-commit-description</id>
            <content type="html"><![CDATA[<p>We use GitHub for hosting the code, and issue tracker behind CX Social. As you may already know, you can close issues automatically by adding <code>Closes #issue</code> to a commit message and merging it in the master branch. This is great because I always forget to close the fixed issue (it's also great for cross-linking between issues and commits).</p>

<p>But what if you forgot to add <code>Closes #issue</code> to your commit? Let me teach you a trick to edit a commit message.</p>

<p>Let's make a new directory to test it.</p>

<pre><code class="sh">$ mkdir demo-git-edit
$ cd demo-git-edit
$ git init
Initialized empty Git repository in /Users/hansott/Code/demo-git-edit/.git/
</code></pre>

<p>Okay great. We've got our repository ready. Let's add a file.</p>

<pre><code class="sh">$ touch app.js
</code></pre>

<p>Then add the following contents:</p>

<pre><code class="js">throw new Error('This is a bug!');
</code></pre>

<pre><code class="sh">$ git add app.js
$ git commit -m "Add bug"
[master (root-commit) 308c96d] Add bug
 1 file changed, 1 insertion(+)
 create mode 100644 app.js
</code></pre>

<p>Let's fix the bug by removing it.</p>

<pre><code class="sh">$ echo &gt; app.js
$ git diff
diff --git a/app.js b/app.js
index 128b630..8b13789 100644
--- a/app.js
+++ b/app.js
@@ -1 +1 @@
-throw new Error('This is a bug!');
+
$ git add app.js
$ git commit -m "Fixed bug"
$ git log
* 83ac3a3 Fixed bug
* 308c96d Add bug
</code></pre>

<p>There you go. We forgot <code>Closes #issue</code>. What can we do about it? It's important that you don't push (otherwise you'll have to use <code>--force</code> and you should <strong>never</strong> do that).</p>

<p>If you want to edit your last commit you can use:</p>

<pre><code class="sh">$ git commit --amend -m "Fixed bug" -m "Closes #issue"
[master f27a1ca] Fixed bug
 Date: Wed Feb 1 12:31:29 2017 +0100
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>

<p>You should consider committing with <code>$ git commit --amend</code>. It opens a proper text editor (like <a href="http://vim.sourceforge.net/">vim</a>) to write a comprehensive message (instead of using <code>-m "message"</code>). Did you notice I used <code>-m</code> twice? You can read about it in <a href="/blog/2017/01/24/some-tips-for-a-better-git-history/">Some tips for a better Git history</a>.</p>

<pre><code class="sh">$ git show f27a1ca
ommit f27a1caac3ee33ac3b0ef81040cd2c2f877f13f4
Author: Hans Ott &lt;hans.ott@clarabridge.be&gt;
Date:   Wed Feb 1 12:31:29 2017 +0100

    Fixed bug

    Closes #issue

diff --git a/app.js b/app.js
index 128b630..8b13789 100644
--- a/app.js
+++ b/app.js
@@ -1 +1 @@
-throw new Error('This is a bug!');
+
</code></pre>

<p>Hooray! We did it. What if we added other commits before we realised we forgot? <a href="https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration">I'll assume you got a decent text editor configured for git</a>.</p>

<pre><code class="sh">$ git log
* 889da98 Add leftpad
* b1b364c Add library
* 05e664c Fixed bug
* 308c96d Add bug
</code></pre>

<p>We added 2 commits after our bug fix commit. Since <code>$ git commit --amend</code> can only change the last commit, we can't use it. Luckily, we know the secret behind the curtain: it's doing a git rebase of the last commit. Let's use git rebase for great good! Again, be careful, this won't work if you already pushed your work (you can inspect with <code>$ git log --decorate</code>).</p>

<pre><code class="sh">$ git rebase -i 308c96d  # use the commit JUST before the bug fix commit
</code></pre>

<pre><code>.g/r/git-rebase-todo
pick 05e664c Fixed bug
pick b1b364c Add library
pick 889da98 Add leftpad

# Rebase 308c96d..889da98 onto 308c96d (3 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to  bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
</code></pre>

<p>You'll have to replace <code>pick</code> before <code>05e664c Fixed bug</code> with <code>reword</code> and save it. Git will show the commit(s) you selected so you can edit it and save it.</p>

<pre><code>.g/COMMIT_EDITMSG
Fixed bug

Closes #issue
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Date: Wed Feb 1 12:31:29 2017 +0100
#
# interactive rebase in progress; onto 308c96d
# Last command done (1 command done):
#    reword 05e664c Fixed bug
# Next commands to do (2 remaining commands):
#    pick b1b364c Add library
#    pick 889da98 Add leftpad
# You are currently editing a commit while rebasing branch 'master' on '308c96d'.
#
# Changes to be committed:
#       modified:   app.js
</code></pre>

<pre><code class="sh">$ git rebase -i 308c96d
[detached HEAD 4225a9a] Fixed bug
 Date: Wed Feb 1 12:31:29 2017 +0100
 1 file changed, 1 insertion(+), 1 deletion(-)
Successfully rebased and updated refs/heads/master.
</code></pre>

<pre><code class="sh">$ git show 308c96d
commit 4225a9a3eb74b42772297a2f4b67b58696e11410
Author: Hans Ott &lt;hans.ott@clarabridge.be&gt;
Date:   Wed Feb 1 12:31:29 2017 +0100

    Fixed bug

    Closes #issue

diff --git a/app.js b/app.js
index 128b630..8b13789 100644
--- a/app.js
+++ b/app.js
@@ -1 +1 @@
-throw new Error('This is a bug!');
+
</code></pre>

<p>Hooray! We did it again. Now pat yourself on the back.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some tips for a better Git history]]></title>
            <link href="/blog/2017/01/24/some-tips-for-a-better-git-history"/>
            <updated>2017-01-24T15:00:00+00:00</updated>
            <id>/blog/2017/01/24/some-tips-for-a-better-git-history</id>
            <content type="html"><![CDATA[<p>We're all heavy Git users in the CX Social development team. Honestly, we couldn't survive without it, as some of us are located across the planet, and we also use GitHub as our primary source of information, even when talking to other teams like the "Customer Support" team. Here's some small tips we learned along the way, when it comes to keeping your Git history clean.</p>

<h2 id="%60git-log%60-like-a-boss"><code>git log</code> like a boss</h2>

<p>I personally like to see everything there is to see about my git history. That's why I have an alias for <code>git log</code> that upgrades it with two default flags:</p>

<pre><code class="sh">git log --decorate --name-status
</code></pre>

<p>The <code>--decorate</code> flag shows ref names next to commits, meaning that you can see where <code>HEAD</code> points, and where your current (and remote) branches are pointing.</p>

<p>The <code>--name-status</code> flag activates the functionality to display which files were changed in that commit, below your commit message. This is great to see what changed in a commit, at first glance.</p>

<h2 id="writing-proper-commit-messages">Writing proper commit messages</h2>

<p>Another great tip, and maybe the best thing you'll take away from this blog post, actually comes from <a href="http://chris.beams.io/posts/git-commit/">another blogpost</a> which talks about writing great <code>git commit</code> messages. If you haven't read that post, go read it now, it's awesome. The main things I took away from it are these:</p>

<ul>
<li>use a proper text editor (like Vim) for writing your commit messages</li>
<li>write a commit subject as the first line, which complete this sentence:
<code>if applied, this commit will...</code></li>
<li>keep a blank line between the subject and what follows</li>
<li><strong>always</strong> write a commit body with <strong>what</strong> changed, and <strong>why</strong> you changed it.</li>
</ul>

<p>If you're too stubborn to write your commit messages using a decent text editor, here's a trick for you: you can use the <code>-m</code> flag on your command line more than once, to create paragraphs, e.g.:</p>

<pre><code class="sh">git commit \
-m "Add a second Hyperdrive as a backup" \
-m "When being followed by an imperial fighter, we want to be able to jump to hyperspace even though our first drive fails." \
-m "We're afraid this might cause some more radiation than expected."
</code></pre>

<p>But still, really consider using a text editor.</p>

<h2 id="distributed-versioning">Distributed versioning</h2>

<p>Git is a distributed versioning system, which means that it's designed to work offline, without a connection to the remote. We might as well exploit that to have great git history.</p>

<ul>
<li><code>git checkout</code> your own feature branch to work on something</li>
<li>don't <code>push</code> or <code>pull</code> while working on your feature. This gives you the advantage that you can <code>amend</code> your commit messages if you made a mistake, or that you can even <code>rebase</code> or <code>squash</code> your commits for clarity.</li>
<li>when you're done, push your branch. If you're working alone on your feature branch, this will work fine and you're done. If there are other people working on the same branch, don't panic and proceed to the next step</li>
<li><code>git pull --rebase origin {branch-name}</code> and then push</li>
</ul>

<p>As I mentioned before, <strong>not</strong> pushing or pulling, and still being able to work is a great feature of git. It means that you can work offline and do everything as if you were the only developer working on a project. You can undo mistakes you made in git, say, you forgot to include a file in a commit. Just <code>git commit --amend</code> it to your liking. Just don't go around and change parts of history that were already pushed.</p>

<p>Now the <code>--rebase</code> part in the <code>git pull</code> step is where it gets interesting. What this does, is undo everything you did since the last time you pulled the branch. Then it pulls from the remote, so that it's a fast-forward without conflicts with 100% certainty. And then it will apply your commits to that. This means that if you changed something, and someone else changed the same thing, you will have a rebase conflict. Which is great! You can now just fix your own conflict, and the history will still be linear! This also means that you will have to fix your own conflicts from now, instead of fixing other people's conflicts. Go on and push your branch when your done.</p>

<h2 id="merging-master-in-your-feature-branch">Merging master in your feature branch</h2>

<p>In analogy with what I said before, you can look at your feature branch as an "isolated" place where you can work on your feature in separation of everything that happens in other branches. Just do what you wanted to do, and never merge any branch into it, or at least minimize the amount of times you merge in case you really really have to.</p>

<p>The advantage this gives you, is great linear history in your feature branch, which <strong>only</strong> applies to that feature, which makes it easy to review or merge into other branches. This is even more true if you use the <code>git pull --rebase</code> feature from the previous tip.</p>

<p>Now, when your feature is ready and there are merge conflicts between your feature branch, and the branch you want to merge it into, e.g. <code>master</code>, you can solve that easily. Merge master in your branch once, and fix your own conflicts. Then merge your branch into master. There are some rebase tricks you can do here to keep linear history too, but I prefer to still merge branches when a feature is done.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
<li><a href="http://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message</a></li>
<li><a href="https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows">GitBook chapter on Distributed Workflows</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></li>
</ul>

<p>That's it! Enjoy your clean git logs!</p>
]]></content>
        </entry>
    </feed>
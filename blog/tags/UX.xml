<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/UX.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-09-01T07:36:43+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How We Handle Perceived Performance]]></title>
            <link href="/blog/2017/07/10/perceived-performance"/>
            <updated>2017-07-10T10:00:00+00:00</updated>
            <id>/blog/2017/07/10/perceived-performance</id>
            <content type="html"><![CDATA[<h2 id="what-is-perceived-performance%3F">What is perceived performance?</h2>

<p>Perceived performance refers to how fast a user thinks your site is, rather than the actual site speed. It's a metric measured by humans rather than a site speed test tool. How fast does the website feel? For example, Facebook appears faster by loading a placeholder for posts in the News Feed. It's useful to know that a site is only loading rather than functioning slowly.</p>

<h2 id="how-cx-social-handles-perceived-performance">How CX Social Handles Perceived Performance</h2>

<p>CX Social is a large application that has a complex interface. The "inbox" part of our system has multiple small features, that all appear to be on a single page. The perceived performance of the inbox is more important than the actual speed, especially because it provides a seamless user experience. The following are a few things we do to portray a speedier performance!</p>

<h2 id="when-a-mention-is-resolved">When a mention is resolved</h2>

<p>In CX Social we process small pieces of information we call "mentions". A mention is any blog post, news article, tweet, etc. that matches any of your specified criteria. All mentions are refined into the CX Social inbox, where support agents can mark them as <em>resolved</em> when they are replied to/labelled as no action needed, etc. When a mention is <em>resolved</em> the support agent is automatically shown the next <em>mention</em> to attend to.
When a mention is resolved we manipulate the DOM and remove the element <em>before</em> the request is completed successfully. This gives you the impression that your action is completed instantly. In the rare case that the request fails, we replace the DOM element and display a relevant error message, so that the user knows what's going on and can resolve the mention again.</p>

<p><center>
<img src="/images/2017-07-10-perceived-performance/mentionresolve.gif" alt="Resolving a mention in CX Social Inbox" /><br />
<small>Resolving a mention in CX Social Inbox</small>
</center></p>

<h2 id="loading-indicators">Loading Indicators</h2>

<p>Loading icons can become a bit annoying on snappy pages because you see a flickering behaviour, and it makes the user feel as though they have to unnecessarily <em>wait</em>. Snappy pages don't require a loading icon, but we'd like a back up plan in case the page takes longer than expected to load. In this case, we use a timeout function for the loading functionality, and only show the loading interface when the request takes over X milliseconds to complete.</p>

<p><center>
<img src="/images/2017-07-10-perceived-performance/delayloading.gif" alt="Delay loading" /><br />
<small>Don't show a loading indicator for quick requests</small>
</center></p>

<p>In this instance, there's a 3000 millisecond delay on the loading behaviour for this page.</p>

<p><center>
<img src="/images/2017-07-10-perceived-performance/delayloadingspinner.gif" alt="Delay loading" /><br />
<small>Do show a loading indicator when a request is taking longer than usual</small>
</center></p>

<h2 id="placeholder-mentions-in-inbox">Placeholder mentions in inbox</h2>

<p>Similar to how Facebook shows a preview of your feed by showing mini placeholders for each post, we show a placeholder when loading a list of mentions in CX Social. 
We immediately show the selected mention, but for other mentions in the thread we automatically show a mention placeholder while they're loading. Then when the user scrolls farther in the thread, we pop in the next mentions. This gives structure to the page, while data is loading and thus makes it easier for the eye/mind to prepare for that data to be there.</p>

<p><center>
<img src="/images/2017-07-10-perceived-performance/inboxloading.gif" alt="Loading of inbox" /><br />
<small>Placeholder sections for mentions in the CX Social inbox</small>
</center></p>

<h2 id="additional-information-in-dropdowns%2Fpopups">Additional information in dropdowns/popups</h2>

<p>When you display a popup or dropdown there's no need to fetch every piece of information immediately. On each Twitter mention we have a "following" dropdown which shows the list of profiles that is following the author of the mention. It also shows whether you are following <em>that</em> profile and if <em>that</em> profile is following <em>you</em>. However we only load the latter information when the dropdown is opened. Sometimes we hit Twitter rate limits, and still try to display relevant following info based on our cache. If we don't have any info, we will still show the dropdown with ability to follow someone (but without displaying who they're already following) since those two endpoints have separate rate limits.</p>

<p><center>
<img src="/images/2017-07-10-perceived-performance/twitterfollowers.gif" alt="Loading of Twitter Followers" /><br />
<small>Dropdown that shows if you are following the author of a mention and vice versa</small>
</center></p>

<h2 id="loading-new-content-without-a-page-reload">Loading new content without a page reload</h2>

<p>We have a large sidebar in CX Social for navigation, as well as a top menu bar. When switching between pages, we just request the content for the main part of the page, and insert the new main content. This saves us doing a full page load.</p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>Have you implemented any features to improve perceived performance? We'd love to hear about it!</p>
]]></content>
        </entry>
    </feed>
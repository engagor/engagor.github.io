<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/PHP.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-09-07T07:38:46+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[5 simple rules for simpler code]]></title>
            <link href="/blog/2017/08/21/simple-rules-for-simpler-code"/>
            <updated>2017-08-21T11:00:00+00:00</updated>
            <id>/blog/2017/08/21/simple-rules-for-simpler-code</id>
            <content type="html"><![CDATA[<p>We as developers care about simple code. Simple code makes it easier to read and debug code which will allow you to build new features and fix bugs faster.</p>

<p>In this blogpost I would like to explain a few simple rules to get simpler code. The code examples will be written in PHP and are therefore more suited to procedural programming languages.</p>

<h2 id="1.-avoid-else">1. Avoid else</h2>

<p>This is probably my favourite rule. Avoiding else can drastically improve the readability of your code. For example:</p>

<pre><code class="php">if ($isAllowedToReadAutomationRecipes) {
  $automationRecipes = $this-&gt;repository-&gt;getByAccountId($accountId);
} else {
  $automationRecipes = [];
}
</code></pre>

<p>You can almost always simplify this to:</p>

<pre><code class="php">$automationRecipes = [];
if ($isAllowedToReadAutomationRecipes) {
  $automationRecipes = $this-&gt;repository-&gt;getByAccountId($accountId);
}
</code></pre>

<p>Look ma, no else!</p>

<h2 id="2.-use-early-returns">2. Use early returns</h2>

<p>Early returns are a nice way to simplify code. Using early returns goes hand in hand with avoiding else. For example:</p>

<pre><code class="php">class PostController
{
    public function delete()
    {
        $post = $this-&gt;repository-&gt;getById($postId);
        if ($post) {
            if ($isConfirmed) {
                $user-&gt;deletePost($post);
                $success = $this-&gt;repository-&gt;persist($post);
                if ($success) {
                    return $this-&gt;success('The post was successfully deleted');
                } else {
                    return $this-&gt;error('Something went wrong.');
                }
            } else {
                return $this-&gt;confirm('Are you sure you want to delete this post?');
            }
        } else {
            return $this-&gt;error('The post was not found.');
        }
    }
}
</code></pre>

<p>It's really hard to see the flow of the code, don't you think? Let's refactor the example to use early returns:</p>

<pre><code class="php">class PostController
{
    public function delete()
    {
        $post = $this-&gt;repository-&gt;getById($postId);
        if ($post === null) {
            return $this-&gt;error('The post was not found.');
        }
        if ($isConfirmed === false) {
            return $this-&gt;confirm('Are you sure you want to delete this post?');
        }

        $user-&gt;deletePost($post);
        $success = $this-&gt;repository-&gt;persist($post);
        if ($success === false) {
            return $this-&gt;error('Something went wrong. Try again.');
        }

        return $this-&gt;success('The post was successfully deleted');
    }
}
</code></pre>

<p>What do you prefer? I surely prefer the latter. Early returns keep the level of indentation low and make the happy path of the code visible.</p>

<h2 id="3.-use-meaningful-variables-names">3. Use meaningful variables names</h2>

<p>If you abbreviate the names of variables you probably don't have a good IDE (autocompletion). It might make sense to use abbreviations while writing some quick code but it will eventually shoot you in the back when you need to fix a bug. You'll lose valuable time by deciphering the code.</p>

<h2 id="4.-avoid-code-comments">4. Avoid code comments</h2>

<p>Each time you're commenting code you're failing to express yourself. This rule goes hand in hand with meaningful variable names. Code comments can get outdated and nothing is as damaging as lies and misinformation. The code is the only source of truth. If you find yourself writing a code comment think of ways to make it clear in the code by extracting variables and functions with meaningful names. Sometimes a well placed comment can be helpful. They'll likely explain the why while the code explains the what/how.</p>

<h2 id="5.-follow-a-consistent-coding-standard">5. Follow a consistent coding standard</h2>

<p>Following a consistent coding standard makes sure all code is formatted in the same way. Which makes it easier to read code because you expect it to be formatted in a specific way. For PHP this is <a href="http://www.php-fig.org/psr/psr-2/">PSR-2</a>. I don't like every rule in <a href="http://www.php-fig.org/psr/psr-2/">PSR-2</a> but it doesn't matter as long as everyone writes the same code. Please don't invent your own coding standard. It's a good practice to <a href="http://cs.sensiolabs.org/">lint and fix</a> coding style automatically.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope these simple rules will inspire you to leave the campground cleaner than you found it. Which rules do you think are important? Leave a comment (on disqus they are allowed)! If you want to know more, <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> is good read.</p>

<p>"Avoiding else" is a rule from <a href="https://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf">Object Calisthenics</a>. If you want to become a better developer, read it.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some tips for better PHPUnit tests]]></title>
            <link href="/blog/2017/08/01/tips-for-better-phpunit-tests"/>
            <updated>2017-08-01T10:00:00+00:00</updated>
            <id>/blog/2017/08/01/tips-for-better-phpunit-tests</id>
            <content type="html"><![CDATA[<p>Writing good unit tests can be a pain. When you write your tests superfluously, you're testing more than the single unit, and they start failing with reasons not related to the <em>Subject Under Test (SUT)</em>. Or your tests become unreadable, and you can't figure out what they were supposed to be testing. Or they test only the one situation where everything goes according to plan, and not possible errors. Of course we want to mitigate all that! Let's see some simple tips to keep your test suite clean and working all the time.</p>

<h2 id="test-the-unhappy-path-first">Test the unhappy path first</h2>

<p>You could've sworn that your test was complete, but there seem to be exceptional cases that you missed. When writing unit tests -and doing TDD in particular- thinking about what might go wrong is very important: how should your unit fail, and when? What should happen when it fails? Should it throw exceptions? If you start with this, you won't forget to do it, and you'll write more robust code as a side-effect.</p>

<h2 id="assertions-have-a-structure">Assertions have a structure</h2>

<p>You might not know it, but most PHPUnit assertions have their parameters in the same order. They almost always take <code>$expected</code> and <code>$actual</code> as first and second parameters respectively. The third (and optional) parameter is often <code>$message</code>, which is a specific message you can write to make PHPUnit rapport back to you with when something fails. This is important, because in case of failure, PHPUnit will report you that your assertion's actual value doesn't match what you expected (so order is significant here). Let's see some examples:</p>

<pre><code class="php">$this-&gt;assertEquals($expected, $actual, $message);
$this-&gt;assertSame($expected, $actual, $message);
$this-&gt;assertTrue($condition, $message);
</code></pre>

<p>As you can see, the <code>assertTrue()</code> call misses an <code>$expected</code> part, as it's already made clear in the name of the assertion.</p>

<h2 id="use-the-correct-assertion">Use the correct assertion</h2>

<p>To me, the daddy of all assertions is <code>assertEquals</code>, it's the basis of a unit test. You assert that your <em>Subject Under Test</em> gives a return value that's equal to what you expect it to return. If you're in doubt about which assertion is the right one to use, always pick <code>assertEquals</code>. The added benifit you get, is that PHPUnit displays really nice diffs between the <code>$expected</code> and <code>$actual</code> values if they don't match. That's much less useful when you use <code>assertTrue</code>, and it can only tell you that <code>False</code> is not equal to <code>True</code>.</p>

<p><img src="/images/2017-08-01-tips-for-better-phpunit-tests/phpunit-diff.png" alt="Diff that PHPUnit shows when expected is different than the actual value" /></p>

<h2 id="pick-names-that-make-sense">Pick names that make sense</h2>

<p>PHPUnit expects you to start the name of your test methods with <code>test</code>, so that you get names like <code>testItThrowsAnExceptionWhenNetworkIsDown()</code>. Although that name is quite descriptive (and it should be!) it doesn't read very well. We can, however, make much more readable function names using underscores. What do you think of <code>test_it_throws_an_exception_when_network_is_down()</code>? It might not fit your coding standard (i'm looking at you, PSR-2), but isn't readability worth the occasional exception to some rules that are meant for readability? Also note, that be reading the name of the test method like this, it's totally clear to me what that test does, and I don't have to go in and read the code if I don't need to change it.</p>

<h2 id="data-providers-for-clear-failure-messages">Data Providers for clear failure messages</h2>

<p>If you need to test the same method with a huge number of inputs and make the same assertion over and over again, you might be tempted to write your assertion inside a <code>foreach</code> loop or something similar.</p>

<pre><code class="php">public function test_prices_cast_to_strings()
{
    $validPrices = array(
        '$100' =&gt; new Price(10000),
        '$10' =&gt; new Price(1000),
        '$1' =&gt; new Price(100),
        '$0.10' =&gt; new Price(10),
        '$0.01' =&gt; new Price(1),
    );

    foreach ($validPrices as $expectedString =&gt; $price) {
        $this-&gt;assertEquals($expectedString, (string) $price);
    }
}
</code></pre>

<p>The problem with this, is that all your assertions happen on the same line, and PHPUnit will rapport a failure in one of those assertions as a failure on that line. Then you'll have to play detective and start looking through your test data to see where things break. This is where PHPUnit Data Providers come in handy, check it out:</p>

<pre><code class="php">/**
 * @dataProvider validPrices
 */
public function test_prices_cast_to_strings($expectedString, $price)
{
    $this-&gt;assertEquals($expectedString, (string) $price);
}

public function validPrices()
{
    return array(
        array('$100', new Price(10000)),
        array('$10', new Price(1000)),
        array('$1', new Price(100)),
        array('$0.10', new Price(10)),
        array('$0.01', new Price(1)),
    );
}
</code></pre>

<p>Now PHPUnit will tell you which input data made the test fail. Don't you think this also cleans up the test so much more? No more <code>foreach</code> that didn't add any meaning to the test! What's also good to know, is that the <code>@dataProvider</code> annotation also works in conjunction with the <code>@expectedException</code> annotation, so you can also easily test if your method throws exceptions for invalid input.</p>

<pre><code class="php">/**
 * @dataProvider invalidPrices
 * @expectedException InvalidArgumentException
 */
public function test_prices_throw_when_built_from_non_integer_value($nonInteger)
{
    $price = new Price($nonInteger);
}

public function invalidPrices()
{
    return array(
        array('foo'),
        array(null),
        array(true),
        array(false),
        array(0.01),
        array('1'),
    );
}
</code></pre>

<h2 id="programming-against-interfaces">Programming against interfaces</h2>

<p>When you're writing tests for a SOLID codebase, be it in a test-first fashion, or writing tests after the facts, you'll be glad you used interfaces for your <em>Subject Under Test</em>'s dependencies. Not only do they give you the obvious benefits of "being able to swap out dependencies with a totally different implementation" or "not caring about specifics, if you just adhere to the contract", but also this means that you can test your class without its dependencies! Look at this example, where <code>Bank</code> has two dependencies:</p>

<pre><code class="php">&lt;?php

final class Bank
{
    private $clock;
    private $log;

    public function __construct(Clock $clock, TransactionLog $log)
    {
        $this-&gt;clock = $clock;
        $this-&gt;log = $log;
    }

    // ...
}
</code></pre>

<p>Of course, <code>Bank</code> cannot operate without its dependencies, so in our test we'll have to instantiate it correctly, but we'll use test doubles, so that we can test <code>Bank</code> with e.g. a <code>Clock</code> that we control:</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn(new DateTime('2017-07-15 10:00:00'));

$log = $this-&gt;getMock('TransactionLog');

$bank = new Bank($clock, $log);
</code></pre>

<p>Now that we know that <code>Clock</code> will always return a given time, we can make assertions that e.g. a <code>Bank</code> transaction was done at the time the clock returned, instead of taking a guess and using stuff like <code>time()</code> or <code>new DateTime('now')</code>. On the <code>TransactionLog</code>, we could assert that a certain method got called (because we expect a transaction to be made), and thus validate if the <code>Bank</code> communicates correctly with it:</p>

<pre><code class="php">$now = new DateTime('2017-07-15 10:00:00');
$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn($now);

$transaction = new Transaction('Toon', 'Hans', 100, $now);
$log = $this-&gt;getMock('TransactionLog');
$log
    -&gt;expects($this-&gt;once())
    -&gt;method('log')
    -&gt;with($this-&gt;equalTo($transaction));

$bank = new Bank($clock, $log);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>On the last line we do the call that your code would actually do to make a bank transaction (this is example code, beware). This makes the <code>Bank</code> log a <code>Transaction</code> in the <code>TransactionLog</code>. Since we control the clock, we can assert on the correct time in the <code>Transaction</code>. Also note that this is a complete test. The rather invisible assertion is the <code>$this-&gt;equalTo()</code> call. We're asserting that <code>Bank</code> communicates correctly to the <code>TransactionLog</code>.</p>

<h2 id="interface-discovery">Interface Discovery</h2>

<p>When we're doing TDD, the PHPUnit test doubles can help us "discovering" what an interface must be, in order to have a dependency that properly supports our <em>Subject Under Test</em>. This works because PHPUnit's mocks will mock any non-existing interfaces. Let's say we want the bank to trigger a WebHook whenever a transaction was made, containing the transaction details.</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$log = $this-&gt;getMock('TransactionLog');

// The WebHooks interface doesn't exist yet
$webhooks = $this-&gt;getMock('WebHooks');
$webhooks
    -&gt;expects($this-&gt;once())
    -&gt;method('trigger')
    -&gt;with($this-&gt;equalTo('{"transaction": {"from": "Toon", "to": "Hans", "amount": 100}}'));

$bank = new Bank($clock, $log, $webhooks);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>Without having an interface, we can already define what we want to see happening. Our test then fails, because the <code>trigger()</code> method didn't get called, so we can start implementing. When we're done, we'll see that our <code>Bank</code> class tests green, and we have discovered a very simple interface for the <code>WebHooks</code> that we can now create (see a whole blog post about this in the Further Reading section).</p>

<pre><code class="php">&lt;?php

interface WebHooks
{
    public function trigger($jsonContents);
}
</code></pre>

<h2 id="further-reading">Further Reading</h2>

<p>These were only a few of the things that you can do to make your testsuite better than it is right now! There are lots of ways to improve even further. My strategy is to not only refactor the code (when tests are green of course), but also the tests, to make them as comprehensive and robust as possible. Think about how you can make them easy to understand for the next person looking to improve or change them. Here's some more reading material that can help you out:</p>

<ul>
<li><a href="https://phpunit.de/manual/current/en/">The PHPUnit manual</a></li>
<li><a href="https://github.com/mockery/mockery">Much nicer test doubles with Mockery</a></li>
<li><a href="http://verraes.net/2011/03/interface-discovery-with-phpunit-mock-objects/">Interface Discovery with PHPUnit's Mock Objects</a></li>
</ul>

<p>That's it, enjoy writing better tests!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Refactoring]]></title>
            <link href="/blog/2017/06/15/vim-ide-refactoring"/>
            <updated>2017-06-15T10:00:00+00:00</updated>
            <id>/blog/2017/06/15/vim-ide-refactoring</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>Yes, I kept the best for last. The feature I get the most questions about is the refactoring capabilities of IDEs. While Vim has some great features that most IDEs don't have, it certainly is true that this is one of the features that Vim is not really that good at. Or is it? In any case, it's good enough at it for me. Let's see what we got.</p>

<h2 id="how-would-you-do-it-from-the-cli%3F">How would you do it from the cli?</h2>

<p>Basically, if some functionality is not in Vim by default, there are two options:</p>

<ul>
<li>Use a command line tool that already does the job - this is how Vim fits into the UNIX philosophy.</li>
<li>Use Vimscript to program the functionality.</li>
</ul>

<p>Luckily, there's this neat tool called <a href="https://github.com/QafooLabs/php-refactoring-browser/">PHP Refactoring Browser</a>, that already knows how to do some PHP refactorings from the command line.</p>

<ul>
<li>extract method;</li>
<li>rename local variable;</li>
<li>local variable to instance variable;</li>
<li>optimise use statements;</li>
</ul>

<p>The tool is also open source, so we can add missing refactorings in the future. The tool is standing on the shoulders of giants like <a href="https://github.com/nikic/PHP-Parser">PHP Parser</a> and <a href="https://github.com/Andrewsville/PHP-Token-Reflection">PHP Token Reflection</a>. But doing this from the command line isn't that great...</p>

<p><img src="/images/2017-06-15-vim-ide-refactoring/refactoring-browser.png" alt="Running the Refactoring Browser from the command line" /></p>

<h2 id="vim-integration">Vim integration</h2>

<p>Of course, some people already thought this was useful for Vim people, and created <a href="https://github.com/vim-php/vim-php-refactoring">a plugin</a> to wrap the command line tool. I'm assuming you installed the command line tool in <code>/usr/local/bin/refactor.phar</code>. Install the plugin using your favorite Vim package manager, and put this line in your <code>.vimrc</code> to let the plugin know where to look for the executable:</p>

<pre><code class="vim">" PHP refactoring browser
let g:php_refactor_command='/usr/local/bin/refactor.phar'
</code></pre>

<p><img src="/images/2017-06-15-vim-ide-refactoring/refactoring-in-vim.png" alt="Running the Refactoring Browser from within Vim" /></p>

<p>You can now do these basic refactorings using their hotkey <code>&lt;Leader&gt;r</code> and selecting your desired refactoring from the list. That's nice, but there are some refactorings missing that we'd like, e.g. "Extract Interface".</p>

<h2 id="creating-refactorings-with-vimscript">Creating refactorings with Vimscript</h2>

<p>While the best solution would definitely be to contribute to the PHP Refactoring Browser, we want to have this functionality right now. Let's create the "Extract Interface" refactoring in Vimscript. I'd like to select some class methods using linewise <code>VISUAL</code> mode, issue a command on it, fill in the name of the Interface that I'd like the methods be extracted to, and have the current class implement that method. Let's see what we got:</p>

<pre><code class="vim">command! -range PhpExtractInterfaceFromRange &lt;line1&gt;,&lt;line2&gt;call PhpInterfaceFromRange()

function! PhpInterfaceFromRange() range
  let interface = input('Enter extracted interface name: ')
  call PhpExtractInterface(a:firstline, a:lastline, interface)
endfunction

function! PhpExtractInterface(start, end, interface)
  normal! qkq
  execute ''.a:start.','.a:end.'g/public.*function.*(\_.\{-})/normal ^f(V%"Ky'
  let @k = substitute(@k, ' \?{', '', 'g')
  let @k = substitute(@k, ')', ');', 'g')
  ?class
  execute "normal! A implements ".a:interface
  execute "normal! Ointerface ".a:interface
  execute "normal! o{\&lt;CR&gt;}\&lt;CR&gt;"
  normal! k"kP
  normal! dd
endfunction
</code></pre>

<ol>
<li>We create a command, called <code>PhpExtractInterfaceFromRange</code> which can be called with a Vim range (like <code>10,50</code>, or from a <code>VISUAL</code> select). If the command is issued, it calls a Vimscript function with the name <code>PhpInterfaceFromRange()</code></li>
<li>The <code>PhpInterfaceFromRange()</code> function asks the user how they want to call their new interface, and passes the range and the name of that interface to <code>PhpExtractInterface()</code></li>
<li>Here's where the real magic happens. We clear register <code>k</code>, and search for all public method definitions in the specified range. We then append every definition to the <code>k</code> register. We then remove curly braces <code>{}</code> and put the missing <code>;</code> after every method definition. We search for the start of the current class, and make it implement the interface. We then create the interface with the contents of the register <code>k</code>.</li>
</ol>

<p><img src="/images/2017-06-15-vim-ide-refactoring/extract-interface-1.png" alt="Extracting an interface from a class with one method selected in Visual Mode" /></p>

<p><img src="/images/2017-06-15-vim-ide-refactoring/extract-interface-2.png" alt="Interface was extracted successfully" /></p>

<p><strong>Wow</strong></p>

<p>Since this is now a command, it could easily be assigned a <code>&lt;Leader&gt;</code> hotkey for visual mode selects, for instance. And you could easily do the same thing for e.g. "Extract Class".</p>

<p>Now, I created this in half an hour, and it's perfectly usable in most use cases, but it's not perfect. As this is the only refactoring I really missed from the Refactoring Browser, I'll just use this until a real refactoring gets integrated in the real plugin. There are plugins with some more Vimscript implementations of refactorings, like <a href="https://github.com/adoy/vim-php-refactoring-toolbox">this one</a>. Keep in mind that they will be susceptible to mistakes, as they don't <em>really</em> understand your PHP code like the Refactoring Browser does.</p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>So, that's it for this episode, and for now this will also be the end of this blog series for now. I hope you liked it! Happy Vimming!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Testing]]></title>
            <link href="/blog/2017/05/15/vim-ide-testing"/>
            <updated>2017-05-15T10:00:00+00:00</updated>
            <id>/blog/2017/05/15/vim-ide-testing</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>I used to always run my unit tests from the command line, but the integration that IDEs give is great. If something goes wrong you can immedately jump to where you need to be to fix it, and your test results remain visible in the same window you're working on. I wanted the same thing in Vim, so I started the investigation.</p>

<p>The first thing I did was to use the default Vim <code>:!</code> shell command mode for that (if you want to know more, check <code>:h :!</code>). I was using <a href="http://www.phpspec.net/">phpspec</a> at that time, so I created two hotkeys, one to describe a new class, and one to run the tests. In <code>.vimrc</code>:</p>

<pre><code class="vim">" PHP run phpspec
noremap &lt;Leader&gt;d :! bin/phpspec desc 
noremap &lt;Leader&gt;o :! bin/phpspec run&lt;CR&gt;
</code></pre>

<p>The problem with that approach, is that Vim doesn't know what to do with them, and just shows you the command line output they provide. I wanted more integration between my tools. After some more looking around, I found out that Vim has support to run a <code>compiler</code> command, and interpret its output with some kind of regex. You can run it using <code>:make</code> and if there are errors in the build, it collects them in a list which you can use to jump to the place you need to be to fix it. Sounds just like what I needed!</p>

<p>And yes, it turns out some other people also found that out. There's a <a href="https://github.com/afternoon/vim-phpunit">PHPUnit compiler</a>, which lets you use Vim's <code>:make</code> command with PHPUnit. Great! There also seems to be a <a href="https://github.com/renanivo/phpspec.vim">phpspec compiler</a>.</p>

<p>The cool thing is that Vim picks the right compiler for the right filetype, so you can do something similar for JavaScript files in your project, and have it all work fantastically with <code>:make</code>.</p>

<p>The last step for me was to create a hotkey in <code>.vimrc</code>, so that I can constantly run my unit tests with just one keystroke:</p>

<pre><code class="vim">noremap &lt;leader&gt;m :make&lt;CR&gt;
</code></pre>

<p>If your tests fail, <code>:make</code> fills up Vim's quickfix list with them. In <a href="/blog/2017/03/15/vim-ide-quality-control">episode 2</a>, I already showed you how to enable it to automatically open and close when it's filled or empty, respectively:</p>

<pre><code class="vim">" Automatically open &amp; close quickfix window
autocmd QuickFixCmdPost [^l]* nested cwindow
</code></pre>

<p><img src="/images/2017-05-15-vim-ide-testing/phpunit.png" alt="A test in PHPUnit failed" /></p>

<p>If you want to jump through the different errors without focussing on that list, you can just use <code>:cnext</code> and <code>:cprev</code>.</p>

<p>After some testing and trying out, it all seemed to work great for me. Fantastic, up to <a href="/blog/2017/06/15/vim-ide-refactoring">the next episode</a>!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Git]]></title>
            <link href="/blog/2017/04/18/vim-ide-git"/>
            <updated>2017-04-18T10:00:00+00:00</updated>
            <id>/blog/2017/04/18/vim-ide-git</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>As developers we use Git <strong>a lot</strong>. I mean the whole time.</p>

<blockquote>
  <p>Why did I do that?</p>
</blockquote>

<p>A.k.a <code>git blame</code></p>

<blockquote>
  <p>What am I doing?</p>
</blockquote>

<p>A.k.a. <code>git status</code></p>

<blockquote>
  <p>What did I change?</p>
</blockquote>

<p>A.k.a. <code>git diff</code></p>

<blockquote>
  <p>This is why I did this!</p>
</blockquote>

<p>A.k.a. <code>git commit</code></p>

<p>I wouldn't know how to work without git anymore, and it has also found its way into my "IDE" workflow, even though I used it "purely" from the cli for a long time. Let's see how to work with git from Vim. I'm assuming you have the git binary installed on your system.</p>

<h2 id="seeing-what-changed-in-the-current-file">Seeing what changed in the current file</h2>

<p>There's this neat little plugin called <a href="https://github.com/airblade/vim-gitgutter">GitGutter</a>, which just shows you the classic <code>+</code> and <code>-</code> signs next to added and deleted code in open files. As an added bonus, it lets you jump between changed blocks of code within a file, using the <code>:GitGutterNextHunk</code> and <code>:GitGutterPrevHunk</code> commands, which you can bind to a key in your <code>.vimrc</code>, e.g.:</p>

<pre><code class="vim">" Hop from gitgutter hunk to hunk
nmap &lt;Leader&gt;v :GitGutterNextHunk&lt;CR&gt;
nmap &lt;Leader&gt;b :GitGutterPrevHunk&lt;CR&gt;
</code></pre>

<p><img src="/images/2017-04-18-vim-ide-git/git-gutter.png" alt="Git Annotations In Gutter" /></p>

<h2 id="the-real-deal">The Real Deal</h2>

<p>Using git from Vim couldn't be more intuitive (and powerful) than with <a href="http://github.com/tpope/vim-fugitive">Fugitive</a>. I do everything from Vim now.</p>

<h3 id="why-did-i-do-that%3F-%60%3Agblame%60">Why did I do that? <code>:Gblame</code></h3>

<p>Using the Fugitive <code>:Gblame</code> command, you quickly annotate the current file with <code>git blame</code> information, which lets you jump through history. From the annotation, you can just press <code>Enter</code> and see the complete commit in which that line was changed. From that commit view, you can again use <code>Enter</code> to dive in the history of that file even further, until you found what you were looking for.</p>

<p><img src="/images/2017-04-18-vim-ide-git/git-blame.png" alt="Git Blame With Fugitive" /></p>

<h3 id="what-am-i-doing%3F-%60%3Agstatus%60">What am I doing? <code>:Gstatus</code></h3>

<p>The <code>:Gstatus</code> command opens a split window in Vim, which is an interactive wrapper around the output of <code>git status</code>. From there, you can jump between files in the list using <code>&lt;C-n&gt;</code> and <code>&lt;C-p&gt;</code>, press <code>Enter</code> to open the file under cursor, and use <code>-</code> to <code>git add</code> files or <code>git reset</code> them. You can also press <code>p</code> to <code>git add --patch</code> them and see what you're doing. When you're done, you can press <code>C</code> to commit.</p>

<p><img src="/images/2017-04-18-vim-ide-git/git-status.png" alt="Git Status With Fugitive" /></p>

<h3 id="the-rest-of-git">The rest of git</h3>

<ul>
<li>Fugitive has <strong>really</strong> extensive support for resolving merge conflicts and diffing files, using Vim's built-in diff view. Here's some <a href="http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/">great info about how that works</a>.</li>
<li>There's the <strong>great</strong> <code>:Gbrowse</code>, which opens the current file on GitHub (or other configurable host), and you can even use a Vim Visual mode selection and use <code>:Gbrowse</code> to directly link to those lines on GitHub.</li>
<li>There's a proxy command called <code>:Git</code> which just proxies everything to the command line git. This means you can <code>:Git pull</code> and other commands, just like you used to.</li>
</ul>

<h2 id="hotkeys">Hotkeys</h2>

<p>I created some hotkeys in <code>.vimrc</code>:</p>

<pre><code class="vim">" Git leader hotkeys
nmap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;
nmap &lt;Leader&gt;gc :Gcommit&lt;CR&gt;
nmap &lt;Leader&gt;gb :Gblame&lt;CR&gt;
</code></pre>

<h2 id="wrapping-up">Wrapping up</h2>

<p>That's it really, super easy integration of git. Of course you could e.g. also integrate your current branch into your Vim statusline. Just check Fugitive's documentation! I don't feel the need for that, as I <code>:Gstatus</code> practically the whole time, and as a result, I see which branch I'm on the whole time! See you in <a href="/blog/2017/05/15/vim-ide-testing">the next episode</a>!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Quality Control]]></title>
            <link href="/blog/2017/03/15/vim-ide-quality-control"/>
            <updated>2017-03-15T09:00:00+00:00</updated>
            <id>/blog/2017/03/15/vim-ide-quality-control</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>So it seems that people find it really handy that their IDEs tell them when things are going wrong, and I can't really disagree with that. So let's see how we can get pretty much the same thing in Vim, for PHP.</p>

<ul>
<li>I need to be warned of syntax errors.</li>
<li>I need to be warned of unused variables, methods, fields, etc.</li>
<li>Every language has their own rules for indenting and tabs vs. spaces, and maybe even every project.</li>
<li>What about coding standards like PSR-2?</li>
</ul>

<p>Basically I do two things here:</p>

<ol>
<li>I make sure that my editor is configured correctly for the language and the project, using a simple default configuration in my <code>.vimrc</code> which I overwrite on a project basis using <a href="http://editorconfig.org/">EditorConfig</a>.</li>
<li>I use some static analysis tools for the other parts.</li>
</ol>

<h2 id="1.-basic-setup">1. Basic setup</h2>

<h3 id="filetype-plugin">Filetype plugin</h3>

<p>Depending on your taste, you might want to update your PHP filetype plugin in Vim, with a more modern version, for instance if you'd like <code>@param</code> highlighted differently in your PHPDoc blocks. You can find a more up-to-date plugin <a href="https://github.com/StanAngeloff/php.vim">here</a>.</p>

<h3 id="editor-config">Editor Config</h3>

<p>To properly configure my editor, I use the simple snippet in my <code>~/.vim/ftplugin/php.vim</code> that I also posted in the first episode of this blog series:</p>

<pre><code class="vim">" Some basic PSR code style rules
set tabstop=4           " Tab width
set softtabstop=4       " Soft tab width
set shiftwidth=4        " Shift width
set expandtab           " Use spaces instead of tabs
</code></pre>

<p>I override this with project settings, using <a href="http://editorconfig.org/">EditorConfig</a>. It's as easy as installing the <a href="https://github.com/editorconfig/editorconfig-vim">EditorConfig plugin</a> for Vim.</p>

<p>In my projects I then have a <code>.editorconfig</code> file that might look like this:</p>

<pre><code class="editorconfig">; This file is for unifying the coding style for different editors and IDEs.
; More information at http://editorconfig.org

root = true

[**.{php,js,scss,html}]
charset = utf-8
indent_size = 4
indent_style = space
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
</code></pre>

<h2 id="2.-static-analysis">2. Static Analysis</h2>

<p>On to more interesting stuff, for the rest of our list: syntax errors, coding guideline violations, unused variables, and the like. The cool part of this, is that many of these things are covered by great PHP tools:</p>

<ul>
<li>syntax errors: <code>php -l</code></li>
<li>coding guideline violations: <a href="https://pear.php.net/package/PHP_CodeSniffer/">PHP Code Sniffer</a></li>
<li>unused variables and other possible issues with code: <a href="https://phpmd.org/">PHP Mess Detector</a></li>
</ul>

<p>Even greater is that there's a great Vim plugin that combines all of these quality control tools into one great automated package: <a href="https://github.com/vim-syntastic/syntastic">Syntastic</a>, and it's fantastically easy to install. Use your Vim package manager, and put some lines into your <code>.vimrc</code> to configure it:</p>

<pre><code class="vim">" Syntastic configuration
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
</code></pre>

<p>Now to configure the PHP specific tools, that I mentioned above, I do it like this:</p>

<pre><code class="vim">" Syntastic configuration for PHP
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_phpcs_exec = './bin/phpcs'
let g:syntastic_php_phpcs_args = '--standard=psr2'
let g:syntastic_php_phpmd_exec = './bin/phpmd'
let g:syntastic_php_phpmd_post_args = 'cleancode,codesize,controversial,design,unusedcode'
</code></pre>

<p>This works because the <code>phpcs</code> and <code>phpmd</code> binaries live in a <code>bin/</code> directory inside my project's directory (I installed them using composer). If you have global installs of these tools, you can just leave out these config lines, Syntastic knows where to find them. As we now have the <code>php -l</code> linter as a Syntastic checker, we can remove the <code>autocmd</code> from our <code>.vimrc</code>.</p>

<p>Some screenshots for the visually minded people:</p>

<p><img src="/images/2017-03-15-vim-ide-quality-control/syntax-error.png" alt="Syntax error detection with php -l" /></p>

<p><img src="/images/2017-03-15-vim-ide-quality-control/psr-violation.png" alt="PSR-2 violation" /></p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>Now I get live feedback about the quality of my code! Great! On to <a href="/blog/2017/04/18/vim-ide-git">the next episode</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Exploring Code]]></title>
            <link href="/blog/2017/02/15/vim-ide-exploring-code"/>
            <updated>2017-02-15T09:30:00+00:00</updated>
            <id>/blog/2017/02/15/vim-ide-exploring-code</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>As it turns out, finding things in a huge project is one of the main reasons people use an IDE. The most frequently used functionality seems to be</p>

<ul>
<li>searching for a file by its name;</li>
<li>searching within the current file;</li>
<li>searching for something arbitrary in the current project;</li>
<li>searching for methods or classes;</li>
<li>"jumping" to implementations of interfaces, child classes, definitions of methods;</li>
<li>finding usages of a method;</li>
</ul>

<h2 id="finding-files-by-their-names">Finding files by their names</h2>

<p>Finding files is something I'm very bad at. I mostly remember only part of the name, or nothing at all. That's why I want to search for files in a "fuzzy" way, if at all. For fuzzy file search, a feature found in most text editors and IDEs these days, I use <a href="https://github.com/kien/ctrlp.vim">CtrlP</a>, which does that just fine. It also has some nice extra commands that let you fuzzily find files in your open buffers, tags (more on that later), and bookmarks.</p>

<p>Some people like to use <a href="https://github.com/scrooloose/nerdtree">NerdTree</a> to have a nice directory listing to the left of the screen, like in Sublime Text or similar editors. You can use it, and I sometimes do for its <code>:NERDTreeFind</code> command, but for most of your needs, the default file browser in Vim is great. You can open it like you open any file, just open a directory instead e.g. <code>:e src/</code>.</p>

<h2 id="searching-within-the-current-file">Searching within the current file</h2>

<p>To find something in the current file, Vim provides a huge number of options. There's the default forward search command, <code>/</code>, which can be pimped a bit to behave in a more "natural" way. In <code>.vimrc</code>:</p>

<pre><code class="vim">set incsearch           " search as characters are entered
set hlsearch            " highlight matches
</code></pre>

<p>And you can search backwards in exactly the same way by using <code>?</code>. Jump to next and previous hits with <code>n</code> and <code>N</code>. And of course you can use regex.</p>

<p>Then there are some more "special" ways of searching in the current file:</p>

<ul>
<li>Hop to the next occurence of the word under cursor <code>*</code></li>
<li>Hop to the previous occurence of the word under cursor <code>#</code></li>
<li>Hop to the next method <code>]]</code></li>
<li>Hop to the previous method <code>[[</code></li>
<li>Hop to the definition of a variable under cursor <code>gd</code> (goto definition)</li>
</ul>

<h2 id="searching-for-arbitrary-text-in-the-current-project">Searching for arbitrary text in the current project</h2>

<p>I use <code>ag</code> as my main code search engine. It's a great command line tool to search codebases really fast. I use it on the command line, as well as in Vim, to replace <code>:vimgrep</code> with something faster. It's also the basis for some more interesting stuff, which I'll talk about later.</p>

<p>You'll need to have the <code>ag</code> binary for your operating system installed, using e.g. <code>brew install ag</code>. Check if it works by searching your codebase for a class, e.g. <code>ag HttpKernelInterface</code>.</p>

<p>Install the <code>Ack.vim</code> plugin, that you can find <a href="https://github.com/mileszs/ack.vim">here</a>. Then set the default search engine for the plugin to <code>ag</code> in your <code>.vimrc</code>:</p>

<pre><code class="vim">" Ack -&gt; Ag
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
</code></pre>

<p>Open Vim in your codebase's working directory and try it there, e.g. <code>:Ack HttpKernelInterface</code>. This should jump straight to the first match found.</p>

<p>The problem with this is that you don't have a visual representation of what else was found. Luckily, and much like <code>:vimgrep</code>, <code>:Ack</code> fills the quickfix list with matches, so you can use <code>:cwindow</code> to show matches (and see also <code>:cnext</code>, <code>:cprev</code>, <code>:cclose</code>). If you want your quicklist to open automatically if anything was found you can add this to your <code>.vimrc</code>:</p>

<pre><code class="vim">" Automatically open &amp; close quickfix window
autocmd QuickFixCmdPost [^l]* nested cwindow
</code></pre>

<h2 id="searching-for-methods-or-classes">Searching for methods or classes</h2>

<p>Now this is where it gets interesting, and where people somewhat underestimate Vim. Using an external application to generate an index of your project's "tags" (classes, interfaces, methods, variables, etc), which Vim can interpret, it provides jumping to all these things and back! This is great. How to set it up?</p>

<p>You'll need to have the <code>ctags</code> binary for your operating system installed, using e.g. <code>brew install ctags</code>. Check if it works by issueing this command <code>ctags --version</code>. I created a config file for it in my <code>$HOME</code> directory, called <code>.ctags</code> with this in it:</p>

<pre><code class="ctags">--recurse=yes
--tag-relative=yes
--exclude=.git
--exclude=composer.phar
--exclude=*.js
--exclude=*.vim
--langmap=php:.engine.inc.module.theme.install.php
--PHP-kinds=+cfi-vj
</code></pre>

<p>The line with <code>--PHP-kinds</code> tells <code>ctags</code> to index classes, functions, interfaces, but not variables or javascript functions. You can tune this to your likings.</p>

<p>If you now use <code>ctags</code> from the command line to generate the tags file for your project, using <code>ctags -R .</code>, a file that Vim can interpret, called <code>tags</code> will be created.</p>

<ul>
<li>You can now open Vim on a tag like so <code>vim -t HttpKernelInterface</code></li>
<li>Or search for that tag from within Vim <code>:tag HttpKernelInterface</code></li>
<li>Or jump to the tag under the cursor: <code>&lt;C-]&gt;</code> or <code>&lt;C-$&gt;</code> depending on keyboard layout</li>
<li>if you jumped to some tags and you want to jump back, use <code>&lt;C-t&gt;</code></li>
</ul>

<p>Of course there are <a href="https://github.com/ludovicchabant/vim-gutentags">plugins</a> to manage your <code>tags</code> files for you.</p>

<h2 id="finding-implementations-of-interfaces%2C-child-classes">Finding implementations of interfaces, child classes</h2>

<p>So this is where the aforementioned <code>Ack</code> magic comes in handy, as it's not default Vim functionality, and I didn't find a plugin to do these things either. I basically just created some functions that find PHP implementations of an interface, and PHP subclassses of a class. I just put them in my <code>.vimrc</code>, but I'm planning on creating a very simple plugin for them.</p>

<pre><code class="vim">" PHP Find Implementations
function! PhpImplementations(word)
    exe 'Ack "implements.*' . a:word . ' *($|{)"'
endfunction

" PHP Find Subclasses
function! PhpSubclasses(word)
    exe 'Ack "extends.*' . a:word . ' *($|{)"'
endfunction

noremap &lt;Leader&gt;fi :call PhpImplementations('&lt;cword&gt;')&lt;CR&gt;
noremap &lt;Leader&gt;fe :call PhpSubclasses('&lt;cword&gt;')&lt;CR&gt;
</code></pre>

<p>As you can see, I added mappings to execute them for the word under cursor (<code>&lt;cword&gt;</code>). These key mappings should probably be done inside the PHP <code>augroup</code> we created in the previous post.</p>

<h2 id="finding-usages-of-a-method">Finding usages of a method</h2>

<p>Pretty much in the same spirit of the Vim functions I wrote to find implementations of an interface, I also wrote such a function to find usages of a method, which I also just added to my <code>.vimrc</code>:</p>

<pre><code class="vim">" PHP Find Usage
function! PhpUsage(word)
    exe 'Ack "::' . a:word . '\(|&gt;' . a:word . '\("'
endfunction

noremap &lt;Leader&gt;fu :call PhpUsage('&lt;cword&gt;')&lt;CR&gt;
</code></pre>

<h2 id="wrapping-up">Wrapping up</h2>

<p>So that is basically how I move around in our codebase, from within Vim. It's not all perfect, but it works perfectly fine for me and I find what I need, when I need it. Up to <a href="/blog/2017/03/15/vim-ide-quality-control">the next episode</a>!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Setting Up]]></title>
            <link href="/blog/2017/01/01/vim-ide-setting-up"/>
            <updated>2017-01-01T08:00:00+00:00</updated>
            <id>/blog/2017/01/01/vim-ide-setting-up</id>
            <content type="html"><![CDATA[<p>I always get a lot of critique and disbelief when I mention that I use Vim to do my daily work in our PHP codebase. Most people in PHP have become avid users of <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>, a great PHP IDE made by JetBrains. I'm unsure about my own reasons to use Vim over PhpStorm but I guess these are some factors:</p>

<ul>
<li>I do not only write PHP</li>
<li>I love the fact that using Vim is like speaking a language</li>
<li>I live in my terminal</li>
</ul>

<p>I'm hereby starting a blog series about how I use Vim as my IDE of choice for PHP development. This is not a Vim tutorial, I'm assuming that you can look up the basics <a href="http://vimcasts.org/">anywhere else</a> and that you know about <code>:h :h</code>. However, I'll show you how I manage to do my work in Vim, how you can accomplish the same thing, and that I don't have a lot of missing features compared to users of other IDEs. This will be a blog series, and I'll list up episodes below as they come out. Let's start with setting up for a really basic PHP oriented workflow.</p>

<h2 id="basic-%60.vimrc%60-setup">Basic <code>.vimrc</code> setup</h2>

<p>First of all, never put things in your <code>.vimrc</code> that you don't understand. There's a huge amount of documentation in Vim's built-in help pages, which you can access like this: <code>:h &lt;keyword&gt;</code>. These are some simple things that I put in my <code>.vimrc</code> that I want at all times:</p>

<pre><code class="vim">filetype plugin indent on " use the file type plugins
syntax on                 " Syntax highlighting
set number nu             " Line numbers
set cursorline            " Color the cursorline
set autoindent            " Auto indenting
set smartindent           " Smart indenting
</code></pre>

<h2 id="basic-packages-i-use-all-the-time">Basic Packages I Use All The Time</h2>

<h3 id="package-manager">Package Manager</h3>

<p>To be able to easily install Vim plugins, I use <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> or another Vim package manager, they make it so much easier to install the other packages.</p>

<h3 id="multiple-cursors">Multiple Cursors</h3>

<p>Even though it's really not Vim-like to use this, sometimes it comes in handy to have multiple cursors, even though we all know it can be done using find-and-replace or using Vim's macros. There are multiple packages for this, I use <a href="https://github.com/terryma/vim-multiple-cursors">this one</a>.</p>

<h3 id="surroundings">Surroundings</h3>

<p>Adding, removing and editing brackets around all Vim objects like "words", "paragraphs", "HTML-tags", etc has been made super easy with <a href="https://github.com/tpope/vim-surround">surround.vim</a>, which makes all these actions feel like they were in Vim all along.</p>

<h3 id="sessions">Sessions</h3>

<p>To manage my sessions, I usually don't use any plugins, since Vim has basic session management built in. You can save your current session using <code>:mksession! &lt;name&gt;</code>. Vim will save a file with the <code>&lt;name&gt;</code> you specified. If you then close vim, you can come back to the same session by starting vim like this: <code>vim -S &lt;name&gt;</code>.</p>

<p>If you go with the aforementionned approach, your sessions won't be saved automatically. If you want to get more out of your sessions, you might want to try the <a href="https://github.com/tpope/vim-obsession">vim obsession</a> plugin.</p>

<h3 id="snippets">Snippets</h3>

<p>As a last general purpose plugin, I'll recommend some snippet managers. I myself don't use any of them, just because I started out with a very basic Vim setup and I didn't yet feel the need for one of them. But if you'd like one, check out <a href="https://github.com/sirver/UltiSnips">UltiSnips</a> or <a href="https://github.com/msanders/snipmate.vim">SnipMate</a>.</p>

<h2 id="php-specific-things-for-your-%60.vimrc%60">PHP Specific things for your <code>.vimrc</code></h2>

<p>Let's start looking at some PHP specific configurations. I created a specific <code>augroup</code> section in my <code>.vimrc</code>, to be able to define <code>autocmd</code>s that can be overwritten if I reload my <code>.vimrc</code>. I'll reference this <code>augroup</code> in the following episodes of this series, too. Let's use it to run the <code>php -l</code> linter after we save a PHP file. Here we go:</p>

<pre><code class="vim">augroup PHP
  autocmd! " Clear all autocmd's in this group before running them again

  " Check for PHP syntax errors after saving a file
  autocmd BufWritePost {*.php} echom system("php -l ".expand('%'))

augroup END
</code></pre>

<p>Let's set some basic configuration for all PHP files that we'll open. Create a file called <code>~/.vim/ftplugin/php.vim</code> and put this in it:</p>

<pre><code class="vim">" Some basic PSR code style rules
set tabstop=4           " Tab width
set softtabstop=4       " Soft tab width
set shiftwidth=4        " Shift width
set expandtab           " Use spaces instead of tabs
</code></pre>

<h2 id="what%27s-next%3F">What's next?</h2>

<p>When I talk to people about their IDE of choice, which I don't do often, these are some topics which seem to be important:</p>

<ul>
<li><a href="/blog/2017/02/15/vim-ide-exploring-code">exploring the codebase</a></li>
<li><a href="/blog/2017/03/15/vim-ide-quality-control">quality control</a></li>
<li><a href="/blog/2017/04/18/vim-ide-git">git integration</a></li>
<li><a href="/blog/2017/05/15/vim-ide-testing">testing integration</a></li>
<li><a href="/blog/2017/06/15/vim-ide-refactoring">refactoring</a></li>
</ul>

<p>In the upcoming posts, I'll talk about those in more detail!</p>
]]></content>
        </entry>
    </feed>
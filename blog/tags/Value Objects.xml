<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/Value Objects.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-12-18T08:40:52+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Some insights regarding Value Objects]]></title>
            <link href="/blog/2018/01/22/some-insights-regarding-value-objects"/>
            <updated>2018-01-22T15:00:00+00:00</updated>
            <id>/blog/2018/01/22/some-insights-regarding-value-objects</id>
            <content type="html"><![CDATA[<p>We've been using Value Objects more and more over the years, and although there's a lot of info out there, there are some things that we found particularly interesting to talk about in a blog post.</p>

<h2 id="what%27s-a-value-object%3F">What's a Value Object?</h2>

<p>Value Objects are simply put <em>objects that represent a value</em>, i.e. objects that don't have an identity except for the value they represent. Very frequently used examples are <code>Money</code> (if someone owes me â‚¬5 and they pay me â‚¬2 + â‚¬2 + â‚¬1 I'm happy) and <code>DateTime</code>, but there are lots of things that would qualify. For instance, combined values like a <code>TimeSlot</code> which comprises of two <code>DateTime</code> objects <code>start</code> and <code>end</code>, which is equal to another <code>TimeSlot</code> object if both <code>start</code> and <code>end</code> for both <code>TimeSlot</code> objects are equal. Or points in a 2D plane with <code>x</code> and <code>y</code> coordinates, where -you guessed it- two points are equal if both points have the same <code>x</code> and <code>y</code> coordinates.</p>

<p>A lot of people wonder why they should use Value Objects, instead of passing around primitive values. Let's take some user input in the form of a telephone number, and treat it as a <code>String</code>. We want to pass it around in our code. Somewhere in our code there's a function that expects a telephone number as a parameter. How can it be sure that we passed a telephone number? It can't... Since we're just passing around a <code>String</code>, it needs to do some checks: Does the string look like a telephone number? Does it have a valid country code? etc. The next function that takes a telephone number as a parameter needs to do these checks again. There are some rules about what makes a valid telephone number, which can't be encapsulated in the <code>String</code> representation. If we make a specialized object to represent that phone number, we we can check these rules upon creation of the object, and thus prevent invalid state before it occurs. If some part of our code now gets that <code>PhoneNumber</code> object, it can be sure that it's a valid phone number.</p>

<h2 id="yes%2C-value-objects-should-be-immutable">Yes, Value Objects should be immutable</h2>

<p>Earlier we said that <code>DateTime</code> is a Value Object. Since a <code>DateTime</code> is just a value, once it is instantiated it should represent that value. Let's check something out:</p>

<pre><code class="php">$noon1 = new DateTime('today noon');
$noon2 = new DateTime('today noon');
var_dump($noon1 == $noon2); // bool(true)

$noon3 = $noon1-&gt;modify('+ 2 hours');

var_dump($noon1 == $noon2); // bool(false)
</code></pre>

<p>What happened? I instantiated two <code>DateTime</code> objects that were equal to each other, representing "today at noon". I created a third <code>DateTime</code> object that should represent "today, two hours later than noon". After that, one of the objects that represented "noon" a second ago doesn't anymore. It's like saying: "here you have a 3", and when you start calculating with it, it changed to a 4. This essentially teleported us to another universe where 3 means 4 suddenly.</p>

<p>The reason this happened is because of the fact that the <code>-&gt;modify()</code> call mutates the <code>DateTime</code> object. If we prevent our objects from being changed (make them immutable), they will become a lot safer to work with. In this regard, you should probably always use <a href="https://secure.php.net/manual/en/class.datetimeimmutable.php"><code>DateTimeImmutable</code></a>.</p>

<h2 id="how-to-introduce-a-value-object%3F">How to introduce a Value Object?</h2>

<p>Let's say we have some code that takes a user's <a href="https://help.twitter.com/en/managing-your-account/twitter-username-rules">Twitter handle</a> to perform some operations:</p>

<pre><code class="php">final class Twitter
{
    public function publicTimelineFor(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return timeline
    }

    public function tweepsFollowing(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return followers
    }

    /**
     * @param string $handle
     *
     * @throws InvalidArgumentException when not valid
     */
    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }
}
</code></pre>

<p>The <code>assertValidTwitterHandle()</code> must happen in every call that uses the concept of a Twitter handle, but it's so easy to forget when you write a new function! Also, it's impossible to know if a given string has been approved in a previous call. If you now call <code>publicTimelineFor($handle)</code> and <code>tweepsFollowing($handle)</code> in succession for the same <code>$handle</code>, you're basically repeating yourself for no reason. Let's refactor this!</p>

<p>The first thing that you want to do is make sure you get your code under test (it should already be that way ðŸ˜˜). What I like to do in this case, is at least have some tests for what a "valid Twitter handle" means. Since I'll be working towards an object that can only represent a valid Twitter handle, I'll make the <code>private</code> assertion <code>public</code>, write some unit tests against the assertion, and be done with it. We'll change the test later on.</p>

<pre><code class="php">class TwitterHandleTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        $this-&gt;twitter = new Twitter();
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function test_it_throws_when_longer_than_16_chars()
    {
        $this-&gt;twitter-&gt;assertValidTwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
    }

    // Tests for other rules go here too
    // - handle is a string and should start with '@'
    // - handle contains only uppercase chars, lowercase chars, digits and underscores
    // - make sure to provide some happy path cases as well
    // - you can of course use data providers in your tests to test multiple examples per test
}
</code></pre>

<p>Then create a very basic class for our Value Object:</p>

<pre><code class="php">final class TwitterHandle
{
    private $handle;

    public function __construct(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        $this-&gt;handle = $handle;
    }

    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }

    public function __toString(): string
    {
        return $this-&gt;handle;
    }
}
</code></pre>

<p>As you can see I created a basic class with the Twitter handle as a string as a constructor parameter. If we use the class as a string, it will cast to the exact Twitter handle as a string that we got as input. This is a temporary measure. I then just moved the <code>assertValidTwitterHandle()</code> method from the <code>Twitter</code> class to <code>TwitterHandle</code>, and made it private. I can fix my tests by just using the constructor of the <code>TwitterHandle</code> class as entry point:</p>

<pre><code class="php">/**
 * @expectedException InvalidArgumentException
 */
public function test_it_throws_when_longer_than_16_chars()
{
    new TwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
}
</code></pre>

<p>The code that used to work with handlers in the string form can now easily be changed to accept our object:</p>

<pre><code class="php">public function publicTimelineFor(TwitterHandle $handle)
{
    // ... fetch &amp; return timeline
}
</code></pre>

<p>As you can see, we just typehint on the Value Object in the function definition, and since the <code>__toString()</code> method is defined to return the same string as we had before, everything just keeps working. With the one perk that the check for valid handles is gone from all our functions! We don't need it anymore, since it's now impossible to pass an invalid handle to them! Now you just need to handle the case of the invalid Twitter handle the moment you get it from the user.</p>

<p>As a final measure, I make sure that the output from the <code>__toString()</code> method can always be parsed back into the same Value Object again, by just giving it to the constructor. In this case that means that I need to return the complete value that the object was instantiated with (which is already the case). If you're tempted to use the <code>__toString()</code> method for other presentational purposes, <a href="http://verraes.net/2013/02/2013-02-16-casting-value_objects/#1-dont-use-_tostring-for-presentation">you're advised to create a specific function for that</a>.</p>

<h2 id="comparing-value-objects">Comparing Value Objects</h2>

<p>Let's say we want to represent points in a <code>x</code> by <code>y</code> two-dimentional plane using a <code>Point</code> Value Object. We've got something like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }
}
</code></pre>

<p>Comparing two of these <code>Point</code>s for equality is easy. We can just use PHP's built-in <code>==</code>, which will compare the objects by the values of their properties (exactly what we want for now).</p>

<pre><code class="php">$c1 = new Point(10, 20);
$c2 = new Point(10, 30);
$c3 = new Point(10, 20);

var_dump($c1 == $c2); // false
var_dump($c1 == $c3); // true
</code></pre>

<p>This gets more complicated when we want to e.g. calculate the distance between two <code>Point</code>s. Aren't those <code>x</code> and <code>y</code> properties private to the object?</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }
}
</code></pre>

<p>Yes. But since these are two objects of the same type, they can access each other private properties! The code above just works! Be careful though, that you don't change any properties (and therefore make the objects mutable...).</p>

<h2 id="nested-value-objects">Nested Value Objects</h2>

<p>With the <code>Point</code> Value Object that we defined above, we can go a little bit further and represent other things in 2D planes, e.g. line segments, which are defined by two points A and B:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }
}
</code></pre>

<p>As you can see, we just created a Value Object that encapsulates two other Value Objects. This is great, we can successfully represent a <code>LineSegment</code> with this, but there's a problem with this:</p>

<p>The math (the domain in this case) tells us that two line segments are equal if they have the same delimiting points. In our case, we called them <code>$a</code> and <code>$b</code>, but actually, the order is not important. This means the <code>==</code> check I described above won't work like this:</p>

<pre><code class="php">$pointA = new Point(0, 0);
$pointB = new Point(5, 5);

$line1 = new LineSegment($pointA, $pointB);
$line2 = new LineSegment($pointB, $pointA);

var_dump($line1 == $line2); // false
</code></pre>

<p>We can solve that problem using an <code>equals()</code> method:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }

    public function equals(LineSegment $other): bool
    {
        return ($this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b)
            || ($this-&gt;a == $other-&gt;b &amp;&amp; $this-&gt;b == $other-&gt;a);
    }
}
</code></pre>

<p>This can now be used to compare lines, but the <code>==</code> still gives wrong results. This is the point where I tell you <code>==</code> is not the best thing to use with Objects in PHP. You cannot override it, or make it work in all cases. It actually breaks encapsulation and checks private properties of objects. But we still want to make it work so that if it gets used instead of the <code>equals()</code> method, nothing breaks. We can then use a rule in our static analysis tools to check for <code>==</code> used with our object. We can make the <code>==</code> work using a fixed order in which point A and B get assigned inside <code>LineSegment</code>'s constructor:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    // ...
}
</code></pre>

<p>Our <code>Point</code> objects now need the <code>greaterThan()</code> method, which can be implemented a bit like this:</p>

<pre><code class="php">final class Point
{
    // ...

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}
</code></pre>

<p>Now we can simplify <code>LineSegment</code>'s <code>equals()</code> method, since <code>$a</code> and <code>$b</code> will be assigned in order:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }

    // ...
}
</code></pre>

<p>Even though we don't want people to use <code>==</code> with our <code>LineSegment</code> Value Object, we made it work. Like this, we can prevent unexpected errors in our code. The final code looks like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}

final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }
}
</code></pre>

<p>If we wanted to represent the nested Value Objects as a string, e.g. to be able to save them in a field in the database, we could just make the <code>Point</code> represent itself as <code>(x, y)</code> and the <code>LineSegment</code> as <code>[(Xa, Ya), (Xb, Yb)]</code> by letting the <code>LineSegment</code>'s <code>__toString</code> method call that of the nested <code>Point</code> objects. For parsing the string representation back into a <code>LineSegment</code>, we'll need a <code>fromString()</code> <a href="http://verraes.net/2014/06/named-constructors-in-php/">alternative constructor</a> that can parse those strings and instantiate the correct objects for them, but I'll leave that as an exercise for the reader!</p>

<p>So, these were our take-aways after introducing Value Objects into our codebase. Did we forget something?</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Star Vars, an intergalactic story of tiny code smells]]></title>
            <link href="/blog/2017/09/01/star-vars"/>
            <updated>2017-09-01T10:00:00+00:00</updated>
            <id>/blog/2017/09/01/star-vars</id>
            <content type="html"><![CDATA[<p>In this post, we'll look at a type of variables that I call Star Vars, they're stars and shouldn't be touched. In any case. Whatsoever. Just don't start editing these in your code, or you'll eventually break stuff, with 100% guarantee.</p>

<h2 id="star-vars-i%3A-the-timestamp-menace">Star Vars I: The Timestamp Menace</h2>

<p>Timestamps are nice: asking the Unix Epoch timestamp results in a number that's the same, independent of in which timezone you are. The secret to this, is that a moment in history was labeled as Unix Epoch, and the timestamp is just the number of seconds that has passed from that moment up until now.</p>

<p>And that's where things start to get nasty: with the understanding of what the number means (the number of seconds passed since January 1st 1970), people start editing the number to get dates in the past or future. What they're almost never take in consideration is the fact that time isn't linear, dates aren't the same around the globe, there are leap seconds, leap years, etc. There are too many exceptions from the rule, to just start adding <code>60 * 60 * 24</code> seconds to a timestamp's value, to get the next day. Don't do it. Your language most probably has a <code>DateTime</code> package to do just that, with less mistakes.</p>

<h2 id="star-vars-ii%3A-attack-of-the-%60%24_post%60">Star Vars II: Attack Of The <code>$_POST</code></h2>

<p>When a HTTP request is made to your app, there are most likely <code>POST</code> or <code>GET</code> parameters being passed along. In PHP, and likely other languages, these are made available trough (global) variables, no different than other variables. Thus, they can be changed, or used in computations or output. Be very careful with that!</p>

<p>Changing a global variable means that it will be changed everywhere, so you risk breaking functionality in other places when you change e.g. the <code>$_POST</code> variable. Optimally, you could reduce the risk by using the immutable datastructures that your PSR-7 framework makes available to you.</p>

<p>Also, using user input in calculations and/or output might result in errors or major hacks of your software. Be very cautious! People might be able to steal your app's data, run arbitrary code on your server, or impersonate users.</p>

<h2 id="star-vars-iii%3A-events-of-the-sith">Star Vars III: Events Of The Sith</h2>

<p>Since forever now, people use event dispatching and event sourcing as a way to let systems know about state changes, or even build their state from scratch based on events only. These <em>events</em> are nothing more than a "record" of something that has happened (in the past complete sense). Something that has happened will never change anymore, so the variables holding events should never be changed. Events are <em>immutable</em>. If you do change them, you change history, which I assume you aren't enabled to do.</p>

<h2 id="star-vars-iv%3A-a-new-%60%24row%60">Star Vars IV: A New <code>$row</code></h2>

<p>Here's the classic "naming things" exercise. We all know it's hard, but it's also very important. Take your time, give variables an appropriate name. I'm not touching your <code>$row</code> because I don't know what it is.</p>

<h2 id="star-vars-v%3A-the-query-strikes-back">Star Vars V: The Query Strikes Back</h2>

<p>Whether you're using an ORM or not, you might write the occasional database query from time to time. I find myself still writing my own queries for the sake of simplicity, inside the database specific implementation of e.g. a repository. Sometimes, for instance when you need "filter" functionality over a huge number of entities based on their various properties, it's tempting to write a query in a very generic way so that reusable parts of the query get concatenated into one final query. I find this a very dangerous practice, all the while not providing much benefit over writing the same query a few times with minor changes. Since the repository implementation we're doing this in is the only place in our codebase that knows about the database, we shouldn't care too much about duplication here.</p>

<h2 id="star-vars-vi%3A-return-of-the-id">Star Vars VI: Return Of The ID</h2>

<p>Making assumptions about the form of variables can be quite dangerous. Let's say that you expect a string to be in place, but what you get is an empty string. Is that valid? Now, think of identifiers of different objects. Sometimes, people use incremental numeric values (more often than not generated by the database) as identifiers for their objects, e.g. the <code>Person</code> with id <code>1337</code> is a cool guy. Already I can think of multiple cases of unexpected values for numerical ids, like <code>0</code>, <code>-1</code>, <code>false</code>, <code>null</code>, <code>''</code>, <code>foo</code>... If we then make the assumption that we'll save them as an integer in the database, we'll shoot ourselves in the foot by saving an object with id <code>'arrow'</code> or <code>'knee'</code>. Or what if the id is a numerical value that is too big to fit inside an integer?</p>

<p>How about string representations, do you ask? For instance, post ids on the Facebook API have ids in the form of <code>{page id}_{post id}</code>. Now that you know this, given a post with an id, could you tell me the page id? Yes, but... what if Facebook decides to change their <em>naming scheme</em> for new posts (which they actually do from time to time)? From now on posts are called <code>pid_{random number}</code>. Now if we had logic in our software that depended on the implicit knowledge of the id was being made of two parts, it will break for those new posts.</p>

<p>The moral of the story is: ids are black boxes, they could contain anything, and we shouldn't make assumptions about them, break them up into meaningful parts, or save them as anything else than strings inside the database.</p>

<h2 id="star-vars-vii%3A-the-%60git-push---force%60-awakens">Star Vars VII: The <code>git push --force</code> Awakens</h2>

<p>Even though <code>git</code> isn't a variable in the context of this blog post, I wanted to put this one in: <code>git push --force</code> is evil. The only reason why you would want to do this, is to change <em>public history</em>, which is something that can't be done. For more about that, scroll up to the Star Vars III section, or read <a href="/blog/2017/01/24/some-tips-for-a-better-git-history/">this blog post about git</a>.</p>

<h2 id="star-vars-viii%3A-the-last-url">Star Vars VIII: The Last URL</h2>

<p>The last, but not least, "star var" is the URL. Now, we all know and understand the most basic building blocks of URLs, like the scheme, tld, and query. But actually, the standard for URLs is quite complicated, and there could be many moving parts. People don't always include the scheme (e.g. the <code>https://</code> part), or the TLD is longer than 3 characters. Therefor, parsing an URL, or changing anything meaningful of it could be very error-prone. Have a look at <a href="https://daringfireball.net/2010/07/improved_regex_for_matching_urls">this regular expression to parse an URL</a>. As you can see, it's not as simple as you think. In fact, most languages have <a href="https://secure.php.net/manual/en/function.parse-url.php">built-in functionality</a> for this, as well as <a href="http://uri.thephpleague.com/">great packages</a>. As a side-note, the same goes for e-mail addresses, telephone numbers, and many other things.</p>

<p>That's it for now! Keep in mind that a lot of these problems can be solved by either using established packages, built-in language features, or <a href="https://martinfowler.com/bliki/ValueObject.html">Value Objects</a> (or a mixture of several of those). May the force be with you!</p>
]]></content>
        </entry>
    </feed>
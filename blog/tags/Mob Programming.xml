<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/blog/tags/Mob Programming.xml" rel="self"/>
    <link href="/"/>
    <updated>2020-10-23T07:51:56+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How to get the most out of a discussion?]]></title>
            <link href="/blog/2020/10/23/how-to-get-the-most-out-of-a-discussion"/>
            <updated>2020-10-23T10:00:00+00:00</updated>
            <id>/blog/2020/10/23/how-to-get-the-most-out-of-a-discussion</id>
            <content type="html"><![CDATA[<p>In our team, we have discussions all the time. It's a very useful way to get everyone on the same page, or to make decisions that will stick for some time. Here are some strategies that I use to get more out of a discussion.</p>

<h2 id="%E2%9A%BD%EF%B8%8F-%F0%9F%A5%85-state-your-goals">⚽️ 🥅 State your goals</h2>

<p>In my experience, the most effective discussions are those that happen because everybody knows why they're there. They know the goal of the discussion before they start thinking and talking. They have a big picture overview. <strong>So, when starting a discussion always try to make clear what the problem is, and what the goal is that you want to achieve.</strong> This avoids people derailing the conversation on accident because they don't know what you want to achieve. Some examples:</p>

<blockquote>
  <p>I'd like to discuss the ContentFormatter. We don't think it will stand the test of time.</p>
</blockquote>

<p>Okay. Let's assume "the ContentFormatter" is a well-known concept. The discussion can still go all directions. People might start taking out all frustrations they have about this piece of code. This might result in a huge refactor that's not needed. It's not clear what we're trying to achieve with this discussion. Let's try again:</p>

<blockquote>
  <p>I'd like to talk about the problem we noticed in the ContentFormatter. Every service we support implements their own way of formatting images. I would like to see if we should have a general system for formatting images, or if there is another way of dealing with this so we don't get into problems during the upcoming Project X that will completely change how images are handled in the ContentFormatter.</p>
</blockquote>

<h2 id="%F0%9F%95%B5%EF%B8%8F%E2%80%8D%E2%99%82%EF%B8%8F-%F0%9F%93%9A-be-prepared">🕵️‍♂️ 📚 Be prepared</h2>

<p>If you know up front that a discussion is going to take place, it's always useful to prepare yourself a bit. You don't have to know everything. Not everyone taking part will know all details, and the more people know about something, the easier it is to get on the same page. <strong>It's harder to come to useful conclusions when nobody knows the details of the problem.</strong></p>

<blockquote>
  <p>We're thinking about replacing our generator for unique ids because of problems discussed earlier. Does anyone know any good alternatives?</p>
</blockquote>

<p>From the get-go, the chances of ending this discussion with a productive solution and within a limited timeframe are low. Nobody is prepared, maybe some people know about all options, but they probably don't know the details from the top of their head. If a decision is made chances are that we missed some crucial information. It might be good to postpone the decision and look up some more information first.</p>

<blockquote>
  <p>We're thinking about replacing our generator for unique ids because of problems discussed earlier. I did some research and found out there are several options: option a with pros and cons x, option b with pros and cons y and option c with pros and cons z. How do we find out what the best solution is?</p>
</blockquote>

<p>In this example there's something to work with. People can consider options because someone listed the pros and cons for them. They can talk about which strategy is best to evaluate options. Even though they might need more info, the chances of making a good decision on the spot are higher.</p>

<h2 id="%F0%9F%91%A9%E2%80%8D%F0%9F%8F%AB-%F0%9F%93%88-visualize-the-problem">👩‍🏫 📈 Visualize the problem</h2>

<p>There's multiple reasons why this is a crucial tactic:</p>

<ul>
<li>When in a conversation, it often happens that people are talking to each other and they think they agree about a given problem. All parties think they understand. However, <em>the moment you make a visualization (drawing, Miro board, etc...) the discussion intensifies because people don't agree on some details of the drawing</em>. At that point, you found a part of the problem to focus on more.</li>
<li>A discussion with just audio is hard to stay concentrated on. <em>People can concentrate much better if they have something relevant to look at</em>. Even seeing the face of the person they're talking to (yes, we're working remotely...) can already help a lot. Now imagine the thing you're looking at also helps you understand the problem at hand! 🤯</li>
<li><em>Just drawing something might sometimes already make a problem glaringly obvious.</em> You have a bottleneck somewhere but don't know where? Draw some dependency lines between involved components and see which component has the most. There are countless problems that become really obvious when you make them visual like this.</li>
</ul>

<h2 id="%F0%9F%98%AD-%F0%9F%8D%B0-split-problem-and-solution">😭 🍰 Split Problem and Solution</h2>

<p>As I said before, you will come to a better conclusion if the problem at hand is well understood. Therefore, it's important that the problem is discussed, and that all people involved know what they're talking about. In many discussions, people start talking about the solution right away, but forget to define what it actually solves. This is confusing, but also takes away learning opportunities for people who don't know about the problem yet, and it takes away opportunities to get a shared mental model of the problem first. <strong>Try to make it very clear that you're trying to find out more about the problem first, and that talking about the solution will be step two.</strong></p>

<h2 id="%F0%9F%8C%90-%F0%9F%A7%A0-abuse-cunningham%27s-law">🌐 🧠 Abuse Cunningham's Law</h2>

<p><a href="https://meta.wikimedia.org/wiki/Cunningham%27s_Law">Cunningham's Law</a> states:</p>

<blockquote>
  <p>The best way to get the right answer on the internet is not to ask a question; it's to post the wrong answer.</p>
</blockquote>

<p>You can use this to your advantage if you don't know what the right solution to something is. <strong>Just propose a solution that you know will be wrong.</strong> This often triggers people with other ideas to bring them up, and thus proposing a good solution. It's definitely a good strategy when trying to get to a shared understanding of a problem as well: draw something that's obviously wrong, and let other people correct you. I think this is why e.g. whiteboarding in a group, and <a href="https://www.eventstorming.com/">Event Storming</a> work so well.</p>

<h2 id="%F0%9F%91%B9-%F0%9F%91%A9%E2%80%8D%E2%9A%96%EF%B8%8F--be-the-devil%27s-advocate">👹 👩‍⚖️  Be the Devil's Advocate</h2>

<p>Similar to how you might use Cunningham's Law to your advantage, you can also try to play devil's advocate in discussions. It's sometimes very hard for people to express <strong>why</strong> they think a given solution is better than another one. That's where this tactic comes into play.</p>

<blockquote>
  <p>👨‍💻: Let's use Library A, I've often used it in the past and it's just what we need.</p>
  
  <p>👹: Why, Library B is well-known too and it does the same things as Library A.</p>
  
  <p>👨‍💻: Yes that's true, but there's a bigger user base for Library A, and its test suite is quite extensive as well.</p>
  
  <p>👹: To me the code in Library B looks better tested and more robust...</p>
  
  <p>👨‍💻: Library A has better documentation, though, and it also allows us to do things in parallel, improving performance. The performance will be a crucial factor once we scale this feature up to all our users.</p>
  
  <p>👹 ➡️  👩‍💻: Aha! I didn't think performance would be a problem. It seems you're right about the fact that Library B will struggle on that front. Okay, so if we pick A we have better documentation and tests, a big community if we have any questions, and better performance once we scale up. That sounds great!</p>
</blockquote>

<p>As you can see in this simulated conversation, 👹 the person playing devil's advocate actually doesn't have a preference for Library B, they just don't see why the other person 👨‍💻 is so keen on using Library A. <strong>By us presenting another option, the other people are pushed a little bit to come up with good reasons why</strong> Library A is the better choice here. Like this everyone participating knows why a given decision will be made.</p>

<p>A note of caution here, playing devil's advocate can be <strong>too pushy</strong> for some people, causing them to let go of their standpoint because they don't immediately find the words to explain the why of their choice. If you notice this (be quick about it) let everyone know you're playing this devil's advocate role to find out the why, and that you're not trying to convince them of your own standpoint. In some groups of people, you can just do it up front:</p>

<blockquote>
  <p>👩‍💻 ➡️  👹: I'm going to play devil's advocate for a second... Why aren't we picking library B?</p>
</blockquote>

<h2 id="%F0%9F%91%A5-%F0%9F%92%AC-practice-paraphrasing">👥 💬 Practice Paraphrasing</h2>

<p>A very commonly cited strategy for better understanding what someone means is to paraphrase what they said, even if you think you understood correctly.</p>

<blockquote>
  <p>👱‍♀️ : I think we'll have to shut down our data collection systems for that upgrade</p>
  
  <p>🧔: Do you mean that to be able to do the Elasticsearch upgrade, we'll have to stop fetching Facebook data?</p>
  
  <p>👱‍♀️ : I was talking about the MySQL upgrade. The Elasticsearch upgrade is planned for next week.</p>
  
  <p>🧔: Okay, I forgot about that. So to upgrade MySQL we'll stop fetching Facebook data?</p>
  
  <p>👱‍♀️ : Yes, in fact, we only have to stop processing the webhooks queue for Twitter and Facebook. We can keep receiving them and they'll just be waiting to be processed later.</p>
</blockquote>

<p><strong>By simply paraphrasing what was said, we resolved two or three misunderstandings.</strong> The power of this is immense, but it's sometimes hard to do. You'll need to be a very active listener, and try to put your assumptions on the side. Also, obviously, you'll have to speak up if you're not sure about something that was said.</p>

<p>That said, I see similarities between paraphrasing, Cunningham's Law, and the "making things visual" strategies. They all try to achieve the common goal of having a better shared understanding of something.</p>

<h2 id="%E2%8F%B1--%F0%9F%92%AC-postpone-decisions">⏱  💬 Postpone decisions</h2>

<p>I said it earlier, but this is a very valuable tactic in many situations. Even during programming, you can use this so that you can think about one problem at a time. You build something, and instead of worrying about e.g. the storage mechanism you're going to use, you program against an interface. That way, you can later decide how to implement the storage interface when you know more.</p>

<p>The same thing is true in discussions. If you want to decide on something, you can make assumptions, document them, and make the decision based on that. <strong>You can verify your assumptions later and reevaluate where needed.</strong> What you can also do is to "decide" that you need more background information to make an actual decision, and plan a follow-up discussion after everyone has had the time to look things up.</p>

<p>This is something I learnt when I was studying to become a teacher. Nobody expects you to know everything, so you can just admit that you need to look things up and then postpone the decision. This will highly likely lead to more sound decisions than making them on the spot without having enough information available.</p>

<h2 id="%F0%9F%99%8A-%F0%9F%A4%AB-activate-silent-people">🙊 🤫 Activate silent people</h2>

<p>Meetings often end up in a few people talking, and other people silently following along. In theory this is no problem for the actual discussion, but <strong>in practice, I find that the silent people often do have an opinion and just aren't vocalizing it.</strong> It might be because they're not feeling safe, they're not experts in the thing that's discussed or that they just don't think their "crazy" opinion is worth exploring. I do think that all people need to be heard. To help them, you can ask everybody for their opinion explicitly.</p>

<blockquote>
  <p>🧔: Do you agree that using Library A would be better than Library B, Tania 👩?</p>
  
  <p>👩: I think the performance impact is indeed the crucial factor in this decision, so yes</p>
  
  <p>🧔: What about you, George 👨‍🦰? You're frowning, is there something we forgot?</p>
</blockquote>

<p>If Tania 👩 and George 👨‍🦰 were silent for some time, you could try to involve them like this. Most of the time this works, and if you do this often, people will start to participate more without help, because they know their opinion is valued.</p>

<p>Another word of caution here: just like "playing the devil's advocate", this might be a bit pushy for some people, and they'll feel like they're put on the spot. In any discussion it's beneficial to have a safe environment where people aren't <em>punished</em> for what they say. When it's okay to change your opinion, make mistakes, and try things, we'll come to much better conclusions in the end.</p>

<h2 id="%F0%9F%97%A3-%F0%9F%93%9D-document-what-was-said">🗣 📝 Document what was said</h2>

<p>When the discussion is over, try to document what was said. It doesn't need to be word-for-word texts, but just something to look back on 2 weeks later and remember what was said, if decisions were made, and why they were made like this. There are multiple ways of doing this, but one of the most interesting things is <a href="https://github.com/joelparkerhenderson/architecture_decision_record">ADRs</a>. If that's too formal for you, don't worry. Anything will do really. Just write something down to look back on. By the way, this is another opportunity to get feedback by paraphrasing!</p>

<h2 id="%F0%9F%96%96-%F0%9F%99%87%E2%80%8D%E2%99%82%EF%B8%8F-outro">🖖 🙇‍♂️ Outro</h2>

<p>That's it for this post, thanks for reading all the way through to the end! I'm definitely not an expert in leading conversations and I have my flaws (some of them have remedies listed in this post). All of us have a lot to learn, and hopefully these strategies help you to get the most out of your discussions! See you in the next post! 👋</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some Pairing and Mobbing takeaways]]></title>
            <link href="/blog/2019/10/29/some-pairing-and-mobbing-take-aways"/>
            <updated>2019-10-29T13:30:00+00:00</updated>
            <id>/blog/2019/10/29/some-pairing-and-mobbing-take-aways</id>
            <content type="html"><![CDATA[<p>As you could already read in <a href="/blog/2018/12/07/one-month-of-pairing">one of our previous posts</a>, we started working in pairs some time ago. Now there's also some Mob Programming being done from time to time, and we started automatically doing some things to make our own lives easier. Some examples:</p>

<h2 id="%F0%9F%9B%8B-%F0%9F%93%BA-make-yourself-comfortable">🛋 📺 Make yourself comfortable</h2>

<p><img src="/images/2019-11-29-some-pairing-and-mobbing-take-aways/mobbing-team.jpg" alt="Keyboard Switcher in macOS" /></p>

<p>Make sure everyone has a good chair and good visibility of the screen you're working on. If you're pairing, this means that you should work on an external screen of some kind, instead of on a laptop. Make sure there's enough light, not too much noise, and that everyone has drinks and food if they need it.</p>

<p>You can work best if you're not focussing on something else. Taking away small distractions like restlessness or poor visibility of the screen can do wonders!</p>

<h2 id="%E2%8C%A8%EF%B8%8F%F0%9F%92%BB-set-your-machine-up-for-everyone">⌨️💻 Set your machine up for everyone</h2>

<p>Make sure the machine you're working on is set up so that you can switch drivers often and so that every driver is working comfortably on it. Of course, it's mostly impossible to all agree on the same set of shortcuts and keyboard setups, but we found a great compromise:</p>

<p><img src="/images/2019-11-29-some-pairing-and-mobbing-take-aways/keyboard-switcher.png" alt="Keyboard Switcher in macOS" /></p>

<ul>
<li>On macOS you can make the keyboard settings available from the top bar so that you can really quickly switch keyboard layouts</li>
<li>In PhpStorm or other editors, there are options to export your settings and import other ones. I just created a backup of my settings by exporting them and I ask everyone at the beginning of the session to send me their configs. When they start, they can select their own config from my desktop! After the session I can easily restore my own settings.</li>
<li>On macOS it's also possible to connect multiple Bluetooth keyboards, mice, etc. We have an AZERTY and a QUERTY keyboard available, as well as a trackpad and a mouse. They are easily passed on and ready to use by the next driver!</li>
</ul>

<p>These three small changes come a long way to make you feel as if you're working on your own machine!</p>

<h2 id="%E2%9B%94%EF%B8%8F%F0%9F%93%B1-only-allow-one-screen">⛔️📱 Only allow one screen</h2>

<p>Being distracted already came up in the previous tip, but here we go again! Ask everyone in the room to put their phones on silent and put them in their pockets. Ask them to close their laptops, they're not going to need them. If you need to look something up, or if you're unsure about what a given piece of code does, ask the driver to put it on the big screen.</p>

<p>This way, nobody dives off into their own cocoon and let their minds escape the group's focus.</p>

<h2 id="%F0%9F%8E%A8%E2%97%BB%EF%B8%8F--to-the-drawing-board">🎨◻️  To the drawing board</h2>

<p>Try to find a way to make things visible. If you have a whiteboard available, great! Do you have a wall? Use stickies or put up big pieces of paper. As a last resort, there's still just pieces of paper that you can draw on. Just make sure that you can make something visible so that you have something to talk about when a discussion is in order.</p>

<h2 id="%F0%9F%98%B0-%E2%9E%A1-%F0%9F%98%81-keeping-everyone-engaged">😰 ➡ 😁 Keeping everyone engaged</h2>

<p>Two rules:</p>

<ul>
<li>Switch drivers often</li>
<li>Take breaks often</li>
</ul>

<p>We use <a href="http://mobster.cc/">this simple app</a> to notify us when to switch and when to take breaks. If the app doesn't tell you to take a break but you feel like it anyway, just do it. You'll be more productive after the break.</p>

<h2 id="%F0%9F%92%BB%F0%9F%8F%A1-remote-work-and-mobbing">💻🏡 Remote work and mobbing</h2>

<ul>
<li>Make sure both parties have a perfect internet connection</li>
<li>Make sure the setup for audio is working properly. We use a Jabra kit that picks up less ambient noise and makes everything clear to understand</li>
<li>Use e.g. Slack screen sharing features to your advantage: you can draw on the screen and you can switch drivers easily!</li>
</ul>

<p>Hope these takeaways can help you as well! Happy Mobbing!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Experiment: Pair Programming By Default]]></title>
            <link href="/blog/2018/12/07/one-month-of-pairing"/>
            <updated>2018-12-07T16:00:00+00:00</updated>
            <id>/blog/2018/12/07/one-month-of-pairing</id>
            <content type="html"><![CDATA[<p>As you could already read in some of our <a href="/blog/2017/05/22/implementing-little-big-details-on-offsite-bootcamp">previous</a> <a href="/blog/2017/03/01/batman-chatman">blogposts</a>, we are a relatively small team, with some loose rules for working together. Up until one month ago, everyone just picked a project from the roadmap and started implementing, and there was a rotation system within the team to always have two people available to help out our support team to assess bugs &amp; fix issues respectively.</p>

<h2 id="%F0%9F%92%AD%F0%9F%98%B0-about-silos-%26-issue-fatigue">💭😰 About Silos &amp; Issue-Fatigue</h2>

<p>As you can imagine, this works really well for projects that are small and well defined, and for teams where everyone is of the same skill level, and has the same development practices. People are not in each other's ways, and you can "horizontally scale" your team. The only trouble is, we're a small team, we have senior and junior developer profiles, and our projects are mostly not so small. The result of this, is that the person implementing a feature is most likely the only one that <strong>really</strong> knows the feature inside out. So the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> for every feature was basically 1. For some features we had insane knowledge silos.</p>

<p>There's a similar story to the support rotation system within the team: the people talking to support and fixing bugs most likely didn't implement the features where the bugs appeared. If they did, the bugs were quickly fixed, and if not, people had to try and understand code written by someone else that they'd never seen <strong>over and over</strong> again. Not ideal. And the result was that for me personally, weeks when I was Batman (yes that's how we call the lucky engineer that's solving bugs that week) were the most draining periods of the year.</p>

<h2 id="%E2%9A%97%EF%B8%8F%F0%9F%94%AC-the-experiment">⚗️🔬 The Experiment</h2>

<p>We do weekly roundups, and after an exhausting week of being Batman, I, expressed my feelings towards the Silos and the Batman weeks. The whole team actually agreed that the situation was not perfect, and we decided it was time for an experiment:</p>

<ul>
<li>Split up the (already small) team in two groups of people (3 to 4 people per group) that will always try to work together on the same feature.</li>
<li>Start every day together with your team (at the same computer or over <a href="https://get.slack.help/hc/en-us/articles/216771908-Make-calls-in-Slack">Slack Voice Calls</a>) trying to solve issues or create features using Pair Programming techniques. Split up the team for "monkey-jobs".</li>
<li>Both teams provide one team member per week to be Batman or Robin. They form their own team and tackle bugs together.</li>
</ul>

<p>We limited the scope of the experiment to the winter release, so 3 months. So far we did a (very limited) retrospective every week.</p>

<h2 id="%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB%F0%9F%91%A8%E2%80%8D%F0%9F%92%BB-what-have-we-learned-so-far%3F">👩‍💻👨‍💻 What have we learned so far?</h2>

<p>We've only been doing this for 4 weeks, so I might be jumping to conclusions here. So far the experience has been positive!</p>

<ul>
<li>It's great to be able to verify your ideas immediately, and to try and build a shared understanding of the problem you're working on.</li>
<li>Pair Programming is exhausting, but it works! We feel the velocity gain and the concentration boost. We find that we're writing better code. We feel productive.</li>
<li>We're aware that it's exhausting and we take a lot of breaks, stop early when we're tired.</li>
<li>We're using Slack as team communication tool, and when someone is working at home, we can just keep Pair Programming because of the built-in voice calls and screen sharing. Slack even allows you to share your mouse and keyboard with the person at the other side of the call (that is, if you've installed Slack from their website instead of from the App Store).</li>
<li>We found this great blogpost with some basics to <a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">keep Pair Programming digestible</a>, by my friend <a href="https://twitter.com/woutersioen">Wouter Sioen</a>.</li>
<li>We've done some ad-hoc pair programming in the past, but starting the day at the same computer really helps you keep it up and encourages you to do it more often.</li>
<li>Batman and Robin are <em>way faster</em> at finding and fixing bugs than when they were working alone. Having that extra developer by your side improves your bug finding experience massively. When working alone, overlooking a small mistake could take up hours, while your pair could spot that in seconds. Our CTO <a href="https://twitter.com/oemebamo">Jurriaan Persyn</a> pointed out that we've fixed a third more issues than last month, even some that were open for a long time already!</li>
</ul>

<h2 id="%F0%9F%93%9A%F0%9F%A7%90-some-resources">📚🧐 Some resources</h2>

<ul>
<li><a href="https://tuple.app/pair-programming-guide/">Tuple's Pair Programming Guide with lots of good tips!</a></li>
<li><a href="http://www.davefarley.net/?p=267">Blog: Pair Programming For Introverts</a></li>
<li><a href="https://madewithlove.be/how-to-keep-pair-programming-digestible/">Blog: How To Keep Pair Programming Digestible</a></li>
<li><a href="https://www.martinfowler.com/bliki/PairProgrammingMisconceptions.html">Blog: Martin Fowler on Pair Programming Misconceptions</a></li>
<li><a href="http://wiki.c2.com/?ExtremeProgramming">WikiWikiWeb on Extreme Programming</a></li>
<li><a href="https://twitter.com/MrAlanCooper/status/1060558122916278272">Great twitter thread by @MrAlanCooper about Pair Programming</a></li>
<li><a href="https://twitter.com/mathiasverraes/status/1063063502254936065">Mathias Verraes talking about Pair Programming for quality</a></li>
</ul>

<p>We hope we can keep it up! 🤞</p>
]]></content>
        </entry>
    </feed>
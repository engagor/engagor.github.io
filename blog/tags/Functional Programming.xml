<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/Functional Programming.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-04-09T15:04:25+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Lists to wrap failure]]></title>
            <link href="/blog/2018/03/02/lambda-lists-to-wrap-failure"/>
            <updated>2018-03-02T11:00:00+00:00</updated>
            <id>/blog/2018/03/02/lambda-lists-to-wrap-failure</id>
            <content type="html"><![CDATA[<p><strong>This is the first post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Hang tight for more.</strong></p>

<h2 id="readability">Readability</h2>

<p>When we're reading code, one of the most important blocking factors is cognitive overhead. Minimize it, and your code instantly becomes easier to read and understand. Or is it the other way 'round? After some years of playing with functional programming languages in my spare time, I saw some things that functional programming does great in this field. One of them involves lists.</p>

<p>As you might know, lists are among the most important datastructures in functional programming, if not the most important. There's even a whole family of programming languages that took their name from them. Looking at you <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> ðŸ˜˜!</p>

<p>Let's dive in with a typical legacy PHP method discovered in the wild:</p>

<pre><code class="php">&lt;?php

function words($string)
{
    if (empty($string)) {
        return false;
    }

    return explode(' ', $string);
}

var_dump(words('')); // returns false
var_dump(words('foo bar baz')); // returns ['foo', 'bar', 'baz'];
</code></pre>

<p>The reason the <code>empty</code> check is there, apparently, is that <code>explode(' ', $s)</code> with an empty string will return <code>['']</code> a list with an empty string in it, which is really strange and non-desirable. Arguably, if the <code>$string</code> variable can't be empty, we should throw an exception. But let's say we want to explore our options here. Before I look into the body of a function, I always try to understand it as a black blox.</p>

<blockquote>
  <p>If I pass <code>words</code> a string, it returns an <code>array</code> of words in the string. Except that for empty strings, it will return <code>false</code>.</p>
</blockquote>

<p>Now, the "black box" already has some mystery to it. Why does it return <code>false</code>? Let's defer the answer to it, and check out if we can write the PHP7 type annotations for it.</p>

<pre><code class="php">function words(string $string): array
{
    // ...
}
</code></pre>

<p>Now, this is not correct. The exception that is made for empty strings can't be written as a type. In old-skool PHP they would've written a DocBlock like this:</p>

<pre><code class="php">/**
 * @param string $string
 * @return array|false depending on failure
 */
function words($string)
{
    // ...
}
</code></pre>

<p>But that is a type signature that is unrepresentable usinig PHP7 types. What if we would represent failure using an empty array?</p>

<pre><code class="php">function words(string $string): array
{
    if (empty($string)) {
        return array();
    }

    return explode(' ', $string);
}
</code></pre>

<p>Now the type signature just works. We turned "failure" into a valid result that we can work with. For instance, all code that works with the return value of this method can now just work with arrays. The type signature now tells a story about the function too:</p>

<blockquote>
  <p>If I pass <code>words</code> a string, it returns an <code>array</code> of words in the string.</p>
</blockquote>

<p>The base case where the string is empty is now logical: an empty string has no words, so a list of 0 words is returned.</p>

<h2 id="chaining-calls">Chaining calls</h2>

<p>Now, let's say we have a function <code>chars</code> that returns a list of chars in a string:</p>

<pre><code class="php">function chars(string $string): array
{
    if (empty($string)) {
        return array();
    }

    return str_split($string);
}
</code></pre>

<p>We're thinking we should be able to use this to list all the characters that appear within words. Would this work?</p>

<pre><code class="php">chars(words('foo bar baz'));
</code></pre>

<p>No... We get a fatal error <code>Fatal error: Uncaught TypeError: Argument 1 passed to chars() must be of the type string, array given</code>. Of course, the result of <code>words</code> is an array, which cannot be used as input to our <code>chars</code> function. Let's use <code>array_map</code>:</p>

<pre><code class="php">array_map(@chars, words('foo bar baz'));
</code></pre>

<p><em>don't worry about the <code>@</code>, it's a trick that I learned while working on <a href="https://github.com/mathiasverraes/lambdalicious/">lambdalicious</a>. <code>@</code> is PHP's error suppressing operator. In this case it allows us to write a function's name as a string, without using string notation, so that it's visually different from a string, BUT is interpreted by PHP as a string...</em></p>

<p>We get this:</p>

<pre><code class="php">[["f","o","o"],["b","a","r"],["b","a","z"]]
</code></pre>

<p>Of course, after mapping <code>chars</code> over the words, this is what we get... But actually, we wanted this:</p>

<pre><code class="php">["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>So how do we get there? We "flatten" the arrays by using <code>concat</code>, which does not exist in php. Let's write it ourselves:</p>

<pre><code class="php">function array_concat(array $arrays): array
{
    return call_user_func_array(
        @array_merge,
        array_merge(array(array()), $arrays)
    );
}
</code></pre>

<p>Now we can use it to flatten the array:</p>

<pre><code class="php">array_concat(array_map(@chars, words('foo bar baz')));
</code></pre>

<p>TADAAAA ðŸ˜† We get what we wanted!</p>

<pre><code class="php">["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>Let's call this combination of <code>array_map</code> and <code>array_concat</code> <code>array_bind</code> for now:</p>

<pre><code class="php">function array_bind(array $array, $f)
{
    return array_concat(array_map($f, $array));
}
</code></pre>

<p><code>array_bind</code> takes an array of values, and a function that operates of one of those values and returns an array. It returns a new array of values.</p>

<pre><code class="php">array_bind(array_bind(array('foo bar baz'), @words), @chars);
// returns ["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>Now that we have the <code>array_bind</code> function, we can apply functions to something in an array, and the result will always be an array! What happens if we first bind <code>words</code> and then bind <code>chars</code> to an empty string?</p>

<pre><code class="php">array_bind(array_bind(array(''), @words), @chars); // returns []
</code></pre>

<p>We get an empty array back, which is great!</p>

<p>You saw me wrap the empty string in an array, to be able to use <code>array_bind</code>. This is an act of "providing context". The array serves as a context wrapper for results of the chained functions <code>words</code> and <code>chars</code>. We'll always get our result as an array. If anywhere in the process something fails, we get an empty array, otherwise we get an array with value(s) in it.</p>

<p>I must admit, this doesn't look really great. Let's take a look at how this works in <a href="https://www.haskell.org/">Haskell</a>, a pure functional language.</p>

<p>Now, this is the equivalent of what we wrote earlier on in PHP:</p>

<pre><code class="haskell">pure "" &gt;&gt;= words &gt;&gt;= chars
</code></pre>

<pre><code class="haskell">pure "foo bar baz" &gt;&gt;= words &gt;&gt;= chars
</code></pre>

<p>These return <code>[]</code> and <code>["f","o","o","b","a","r","b","a","z"]</code>, as expected, but how?</p>

<ul>
<li><code>pure</code> wraps the string in our "wrapper" list.</li>
<li><code>&gt;&gt;=</code> is the <code>bind</code> infix function; it takes the "wrapped" value on the left, and applies the function on the right to the wrapped value. It then returns a new wrapped value.</li>
<li><code>words</code> takes a <code>String</code> and returns a list of strings <code>[String]</code>, split by spaces. It's in Haskell's default module <code>Prelude</code>.</li>
<li><p><code>chars</code> is a function we made up, it takes a <code>String</code> and returns a list of strings <code>[String]</code>. By default, <code>String</code>s in Haskell are lists of <code>Char</code>s. To break up a given string in a list of strings that represent chars we need to map over the input string. The mapping function <code>(\x -&gt; [x])</code> gets a <code>Char</code> as input and returns a <code>String</code> by wrapping the given <code>Char</code> in a list; check it out:</p>

<pre><code class="haskell">chars :: String -&gt; [String]
chars s = map (\x -&gt; [x]) s
</code></pre></li>
</ul>

<p>As you can see, Haskell was made for this kind of stuff... It also reads a lot better than our PHP implementation.</p>

<h2 id="expanding-on-this-concept">Expanding on this concept</h2>

<p>The reason this doesn't really work in PHP is that we don't have infix operators at our disposal. I've seen <a href="https://github.com/phunkie/phunkie">libraries</a> that do something with method calls along these lines:</p>

<pre><code class="php">pure('foo bar baz')-&gt;bind(@words)-&gt;bind(@chars);
</code></pre>

<p>which already looks a lot better than what we came up with. Failure can be encapsulated. There's a lot less boilerplate code to read. There's no checking for empty arrays or failure, while it still behaves as we wanted.</p>

<ul>
<li><code>pure()</code> wraps the value in an object.</li>
<li><code>bind()</code> is equivalent to returning a new wrapper object with the result of the applied function to the previously wrapped value. Internally it could all work using <code>arrays</code>, but it could just as well be done differently.</li>
</ul>

<p>For now, we've always worked with functions that return a number of results, but this whole concept can just as well be used with functions that are supposed to return a single result, like integer division <code>div</code>:</p>

<pre><code class="php">function div(int $divident, int $divisor): WrappedValue
{
    if ($divisor === 0) {
        return nothing();
    }

    return pure(intdiv($divident, $divisor));
}
</code></pre>

<p>Now, we created an integer division function that doesn't throw <code>DivisionByZeroError</code> exceptions, but uses this system of <code>WrappedValue</code>s to wrap it's return value on success (using <code>pure</code>, equivalent to an array with a value) or on failure (using <code>nothing</code>, equivalent to an empty array). Now, if we want to square the result of this, we can just bind <code>square</code> to the result of the previous computation.</p>

<pre><code class="php">function square(int $number): WrappedValue
{
    return pure($number * $number);
}

var_dump(div(10, 2)-&gt;bind(@square)); // [25]
var_dump(div(10, 0)-&gt;bind(@square)); // []
</code></pre>

<p>As with the previous examples, we can now just focus on the order of computation, without the need to worry about failure in the in-between steps.</p>

<p>There are also ways to make this whole thing even more interesting by providing more info like error messages in case of failure.</p>

<h2 id="day-to-day-usage">Day-to-day usage</h2>

<p>I'm not saying this is perfect for everything in OOP by any means, but we might want to think about how we handle failure in our (legacy) systems. I sometimes see trees of exception handling and boolean/null-checks on return values. This is a third option (PHP doesn't have option types by default); In lots of ways, the classic <a href="https://en.wikipedia.org/wiki/Null_object_pattern">Null Object</a> pattern resembles this whole thing in a more Object Oriented way. In many functional programming languages this is actually the most widely used means of error handing. If you want to know more about it, I suggest reading up on <code>Functors</code>, <code>Applicatives</code>, and <code>Monads</code>. Scary names for new concepts, don't let them hold you back.</p>

<p>If you want to do the most simple and useful thing: think about how your functions behave. What goes in, what comes out? Writing the type annotations helps a lot. And of course, throwing exceptions is not a sin.</p>

<p>Happy programming y'aÎ»Î»! ðŸ‘‹</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Refactoring to Collections]]></title>
            <link href="/blog/2017/11/15/refactoring-to-collections"/>
            <updated>2017-11-15T10:00:00+00:00</updated>
            <id>/blog/2017/11/15/refactoring-to-collections</id>
            <content type="html"><![CDATA[<p>How many times have you seen code like this?</p>

<pre><code class="php">public function displayCoffeeRunsOpenForOrders()
{
    $coffeeRuns = $this-&gt;coffeeRunsRepository-&gt;getAll();
    $openForOrders = array();

    foreach ($coffeeRuns as $coffeeRun) {
        if ($coffeeRun-&gt;ordersCanBeMade()) {
            $openForOrders[] = $coffeeRun;
        }
    }

    return $openForOrders;
}
</code></pre>

<p>Our office is very close to a <a href="http://simon-says.be/">great coffee bar</a>, and people are going there from time to time to get coffee for everyone in the office. Keeping track of who's going for coffee and who wants which coffee can be daunting, which is why I'm making this app. Let's take a closer look at that piece of code.</p>

<p>We're manually traversing an array of <code>CoffeeRun</code> objects that we got out of the Repository to filter out those who are open for orders. If we find one, we add it to a new array. This way we build a list of <code>CoffeeRuns</code> that are still accepting orders.</p>

<h2 id="to-iterator-or-not%2C-that%27s-the-question">To Iterator or not, that's the question</h2>

<p>Now, there's nothing very wrong with this, but it could be made a whole lot better, I think. Let's say that the Repository contains 1000 <code>CoffeeRun</code>s. We're now forcing the Repository to return an array of 1000 <code>CoffeeRun</code> objects when we call <code>getAll()</code>. That's not great. But let's think about it... The Repository already represents a list of all <code>CoffeeRun</code> objects. Why can't we just iterate over it? Something like this:</p>

<pre><code class="php">public function displayCoffeeRunsOpenForOrders()
{
    $coffeeRuns = $this-&gt;coffeeRunsRepository;
    $openForOrders = array();

    foreach ($coffeeRuns as $coffeeRun) {
        if ($coffeeRun-&gt;ordersCanBeMade()) {
            $openForOrders[] = $coffeeRun;
        }
    }

    return $openForOrders;
}
</code></pre>

<p>Having a repository we can iterate over like that would already be a first step. We could implement the <code>Iterator</code> interface within the Repository, and have this functionality immediately. But that would leave the foreach out there, and that would also present a problem for our dependency injection: the class where this <code>displayCoffeeRunsOpenForOrders</code> is a controller, and it has the Repository injected in its constructor, like this:</p>

<pre><code class="php">public function __construct(CoffeeRunsRepository $repository)
{
    $this-&gt;coffeeRunsRepository = $repository;
}
</code></pre>

<p>If we'd count on the fact that the Repository is now an <code>Iterator</code>, we should either typehint on it, but then we lose our typehint for <code>CoffeeRunsRepository</code>, which we don't want. Or we could make the <code>CoffeeRunsRepository</code> interface extend the <code>Iterator</code> interface, but then we get a really big interface we need to implement for every implementation of the Repository. Both of which are annoying to say the least.</p>

<h2 id="think-solidly-different">Think SOLIDly Different</h2>

<p>Let's try something completely different. In fact, the <code>foreach</code> in that method, is blocking progress for us right now; Let's extract that whole block to a method. This is what was in the controller before the extraction:</p>

<pre><code class="php">public function displayCoffeeRunsOpenForOrders()
{
    $coffeeRuns = $this-&gt;coffeeRunsRepository-&gt;getAll();
    $openForOrders = array();

    foreach ($coffeeRuns as $coffeeRun) {
        if ($coffeeRun-&gt;ordersCanBeMade()) {
            $openForOrders[] = $coffeeRun;
        }
    }

    return $openForOrders;
}
</code></pre>

<p>In the Repository we added a new method <code>openForOrders()</code>, and we kept the same implementation as before, which now resides in the implementation of that method:</p>

<pre><code class="php">interface CoffeeRunsRepository
{
    // ...

    /**
     * @return CoffeeRun[] A list of CoffeeRuns open for orders
     */
    public function openForOrders();

    // ...
}
</code></pre>

<pre><code class="php">final class CoffeeRunsRepositoryInMemory implements CoffeeRunsRepository
{
    // ...

    public function openForOrders()
    {
        $coffeeRuns = $this-&gt;getAll();
        $openForOrders = array();

        foreach ($coffeeRuns as $coffeeRun) {
            if ($coffeeRun-&gt;ordersCanBeMade()) {
                $openForOrders[] = $coffeeRun;
            }
        }

        return $openForOrders;
    }

    // ...
}
</code></pre>

<p>This is what's left in the controller after extraction:</p>

<pre><code class="php">public function displayCoffeeRunsOpenForOrders()
{
    return $this-&gt;coffeeRunsRepository-&gt;openForOrders();
}
</code></pre>

<p>I don't like the <code>Repository</code> word in there, while we're thinking about the Repository as just being a Collection. Let's rename the variable in our controller. Notice how well this reads:</p>

<pre><code class="php">public function displayCoffeeRunsOpenForOrders()
{
    return $this-&gt;coffeeruns-&gt;openForOrders();
}
</code></pre>

<p>"Return CoffeeRuns that are Open For Orders". I like it. What's even better, is that the filtering of the Collection is now happening in the object that worries about the Collection, namely the Repository. This means that the specific implementations can optimize for their own benifits. E.g. the database implementation of the Repository can use a specific <code>WHERE</code> query so that it doesn't need to filter <code>CoffeeRun</code>s in PHP, and as a result of that it doesn't need to load a whole list of <code>CoffeeRun</code> objects into memory.</p>

<h2 id="bump-your-head-twice">Bump your head twice</h2>

<p>What if we want a second method in our controller that displays all CoffeeRuns that are open for orders, and will happen before noon? The <code>openForOrders()</code> method won't be enough. We could use it, and then use a <code>foreach</code> as in the first example of the blog post, but then we're back to square one. We could also make it a Repository method, and that would be okay, but only if we don't have to do it too many times. Let's look for a different solution.</p>

<p>It looks like we now have two problems:</p>

<ol>
<li>We want to encapsulate the "looping over a list and picking out specific items"</li>
<li>We want to combine several of these actions on a list, or at least do them in succession</li>
</ol>

<p>The problems always come up when we're talking to the Repository. We made two changes to it, that were both half solutions. The Repository has too many responsibilities (Storage and Collection). What would happen if we'd return an object representing a list of CoffeeRun objects from the Repository, and use that to iterate over? The Repository only takes care of the storage, and the Collection object takes care of the Collection stuff.</p>

<p>What we want to do is "filter" CoffeeRuns so that we get CoffeeRuns that are open for orders, and then filter those again so that we get those open for orders that are happening before noon. In pseudo code:</p>

<pre><code class="php">coffeeRuns = repository.getAll
coffeeRuns
    .thatAre(openForOrders)
    .thatAre(happeningBeforeNoon)
</code></pre>

<p>If we can express <code>openForOrders</code> and <code>happeningBeforeNoon</code> as functions that take a <code>CoffeeRun</code> object and return a boolean (we'll call them predicates), then the <code>thatAre()</code> implementation could be very generic! Let's check it out:</p>

<pre><code class="php">$openForOrders = function (CoffeeRun $coffeeRun)
{
    return $coffeeRun-&gt;ordersCanBeMade();
};

$noon = new DateTime('today noon');
$happeningBeforeNoon = function (CoffeeRun $coffeeRun) use ($noon)
{
    return $coffeeRun-&gt;getDate() &lt; $noon;
};
</code></pre>

<p>Now we'll create the <code>CoffeeRuns</code> Collection object, with a <code>thatAre</code> method:</p>

<pre><code class="php">interface CoffeeRuns
{
    /**
     * @param callable function that takes a CoffeeRun and returns a boolean
     *
     * @return CoffeeRuns that match the predicate
     */
    public function thatAre(callable $matchingPredicate);

    /**
     * @return CoffeeRun[] An array of CoffeeRuns
     */
    public function asArray();
}
</code></pre>

<p>Let's create a naÃ¯ve <code>array</code> based implementation of it:</p>

<pre><code class="php">final class CoffeeRunsArray implements CoffeeRuns
{
    private $coffeeRuns;

    public function __construct(array $coffeeRuns)
    {
        $this-&gt;coffeeRuns = $coffeeRuns;
    }

    public function thatAre(callable $matchingPredicate)
    {
        return new static(
            array_filter(
                $this-&gt;coffeeRuns,
                $matchingPredicate
            )
        );
    }

    public function asArray()
    {
        $this-&gt;coffeeRuns;
    }
}
</code></pre>

<p>Right now, we can have our <code>CoffeeRunsRepository</code> return a <code>CoffeeRuns</code> Collection object for the <code>getAll()</code> method instead of <code>CoffeeRun[]</code> (an array of CoffeeRun) objects, and remove the specific methods we created, like <code>openForOrders()</code>.</p>

<pre><code class="php">interface CoffeeRunsRepository
{
    /**
     * @return CoffeeRuns A collection of CoffeeRuns
     */
    public function getAll();
}
</code></pre>

<p>In the controller, we now get this:</p>

<pre><code class="php">final class CoffeeController
{
    private $coffeeRuns;
    private $openForOrders;
    private $happeningBeforeNoon;

    public function __construct(CoffeeRunsRepository $repository)
    {
        $this-&gt;coffeeRuns = $repository;

        $this-&gt;openForOrders = function (CoffeeRun $coffeeRun)
        {
            return $coffeeRun-&gt;ordersCanBeMade();
        };

        $noon = new DateTime('today noon');
        $this-&gt;happeningBeforeNoon = function (CoffeeRun $coffeeRun) use ($noon)
        {
            return $coffeeRun-&gt;getDate() &lt; $noon;
        };
    }

    public function displayCoffeeRunsOpenForOrders()
    {
        $coffeeRuns =
            $this-&gt;coffeeRuns-&gt;getAll()
            -&gt;thatAre($this-&gt;openForOrders);

        return $coffeeRuns-&gt;asArray();
    }

    public function displayCoffeeRunsOpenForOrdersAndBeforeNoon()
    {
        $coffeeRuns =
            $this-&gt;coffeeRuns-&gt;getAll()
            -&gt;thatAre($this-&gt;openForOrders)
            -&gt;thatAre($this-&gt;happeningBeforeNoon);

        return $coffeeRuns-&gt;asArray();
    }
}
</code></pre>

<p>As you can see, the individual methods got very readable. The operations on the Collections are encapsulated. I extracted the <code>$openForOrders</code> and <code>$happeningBeforeNoon</code> predicates to class variables, because I didn't like the duplication in both controller methods, however, I'm not satisfied with their presence in the constructor. We could create a <code>Predicate</code> interface and make the <code>thatAre()</code> method accept <code>Predicate</code> instances. As a result our controller would just do something like <code>$coffeeRuns-&gt;thatAre(new OpenForOrders());</code>. But let's leave it like this for now. I've got some critical questions coming in:</p>

<h2 id="wait-a-minute%21-you-didn%27t-solve-the-memory-problem%21">Wait a minute! You didn't solve the memory problem!</h2>

<p>Exactly. Let's do that right now.</p>

<pre><code class="php">final class CoffeeRunsWithIterator implements CoffeeRuns
{
    private $coffeeRuns;
    private $predicates;

    public function __construct(Iterator $coffeeRuns, array $predicates = array())
    {
        $this-&gt;coffeeRuns = $coffeeRuns;
        $this-&gt;predicates = $predicates;
    }

    public function thatAre(callable $matchingPredicate)
    {
        $predicates = $this-&gt;predicates;
        $predicates[] = $matchingPredicate;

        return new static(
            $this-&gt;coffeeRuns,
            $predicates
        );
    }

    public function asArray()
    {
        $collectionAsArray = array();

        foreach ($this-&gt;coffeeRuns as $coffeeRun) {
            foreach ($this-&gt;predicates as $predicate) {
                if (call_user_func($predicate, $coffeeRun) !== true) {
                    continue 2;
                }
            }

            $collectionAsArray[] = $coffeeRun;
        }

        return $collectionAsArray;
    }
}
</code></pre>

<p>This is an implementation of the <code>CoffeeRuns</code> Collection interface that takes an <code>Iterator</code>. Whenever the <code>thatAre()</code> method gets called with a predicate, we don't do anything, except for creating a new instance of the Collection class with the same <code>Iterator</code> in it, but with the predicate added to the list of predicates that must be matched for each element in the Collection. It's only at the last step, when we try to extract the contents of the collection, that we run the <code>Iterator</code> and check every value against the given predicates. We still need to run the predicates against the whole collection, but because they are within an <code>Iterator</code>, the <code>Iterator</code> can e.g. get them from the database one by one. That's an implementation detail of the Repository.</p>

<h2 id="what-if-we-want-to-be-able-to-use-mysql-%60where%60-statements-in-our-repositories%3F">What if we want to be able to use MySQL <code>WHERE</code> statements in our Repositories?</h2>

<p>Let's say that we want to create a MySQL implementation of the Repository. We don't really want to write a query that will get the whole list of CoffeeRuns, even though we worked with an <code>Iterator</code> before (and thus preserving memory issues), so just passing closures to the <code>thatAre()</code> method will not help us a whole lot to write efficient queries. To improve on that, we could start passing our predicates as objects instead of closures, like this:</p>

<pre><code class="php">interface CoffeeRuns
{
    /**
     * @param Predicate that CoffeeRuns need to satisfy
     *
     * @return CoffeeRuns that match the predicate
     */
    public function thatAre(Predicate $matching);

    /**
     * @return CoffeeRun[] An array of CoffeeRuns
     */
    public function asArray();
}
</code></pre>

<p>A predicate could look something like this:</p>

<pre><code class="php">interface Predicate
{
    /**
     * @param CoffeeRun the CoffeeRun we want to check
     *
     * @return bool if the Predicate is satisfied by given CoffeeRun
     */
    public function isSatisfiedBy(CoffeeRun $coffeeRun);
}
</code></pre>

<p>And to get the same functionality as before we can implement it like this:</p>

<pre><code class="php">final class OpenForOrders implements Predicate
{
    public function isSatisfiedBy(CoffeeRun $coffeeRun)
    {
        return $coffeeRun-&gt;ordersCanBeMade();
    }
}
</code></pre>

<p>When we have this in place, implementing a repository that can translate these predicates to the correct <code>WHERE</code> statements is pretty much trivial: without doing an actual query, the Repository returns a <code>CoffeeRuns</code> collection object that can be filtered using <code>Predicate</code>s and when that is done, the query can be built by translating the Predicates to the appropriate <code>WHERE</code> statements. Now the <code>Predicate</code> object can still be used to check if a given <code>CoffeeRun</code> satisfies the rule encapsulated within it, but within the Repository, a more efficient way is used against the whole database table full of CoffeeRuns. Eric Evans calls this concept <code>Specification</code>, and you can read all about it in his great book <a href="http://dddcommunity.org/book/evans_2003/">Domain Driven Design</a>.</p>

<h2 id="doing-something-with-all-objects-in-our-collection">Doing something with all objects in our collection</h2>

<p>Let's say we want people to <code>stopOrdering()</code> for all <code>CoffeeRun</code>s that are happening before noon.</p>

<pre><code class="php">$stopOrdering = function (CoffeeRun $coffeeRun)
{
    $coffeeRun-&gt;stopOrdering();

    return $coffeeRun;
};

$coffeeRuns = $repository-&gt;getAll();
$stoppedOrderingForTheseRuns = $coffeeRuns
    -&gt;thatAre($happeningBeforeNoon)
    -&gt;updateEach($stopOrdering);
</code></pre>

<p>Let's add it to the Collection interface:</p>

<pre><code class="php">interface CoffeeRuns
{
    /**
     * @param Predicate that CoffeeRuns need to satisfy
     *
     * @return CoffeeRuns that match the predicate
     */
    public function thatAre(Predicate $matching);

    /**
     * @param callable function that takes a CoffeeRun and returns an updated one
     *
     * @return CoffeeRuns that got updated
     */
    public function updateEach(callable $update);

    /**
     * @return CoffeeRun[] An array of CoffeeRuns
     */
    public function asArray();
}
</code></pre>

<p>The implementation for the <code>CoffeeRunsArray</code> could be something like this:</p>

<pre><code class="php">final class CoffeeRunsArray implements CoffeeRuns
{
    private $coffeeRuns;

    public function __construct(array $coffeeRuns)
    {
        $this-&gt;coffeeRuns = $coffeeRuns;
    }

    public function thatAre(Predicate $predicate)
    {
        return new static(
            array_filter(
                $this-&gt;coffeeRuns,
                function (CoffeeRun $run) use ($predicate) {
                    return $predicate-&gt;isSatisfiedBy($run);
                }
            )
        );
    }

    public function updateEach(callable $update)
    {
        return new static(
            array_map(
                $update,
                $this-&gt;coffeeRuns
            )
        );
    }

    public function asArray()
    {
        $this-&gt;coffeeRuns;
    }
}
</code></pre>

<p>As you can see, the implementation is trivial in this case, but again it provides us with a powerful abstraction. The code that operates on the Collection doesn't have to know anything about how the Collection is implemented, it just knows about the methods we provided for interacting with it. For those that are into functional programming, we just implemented <code>filter</code> and <code>map</code> here.</p>

<p>I hope you see the value in this. For pieces of code where a lot of actions need to happen on Collections of objects, this might be the way to go. Since the code doesn't have to know anything about the implementation of the Collection, you can change it at any time. For instance, when you start out, you can just use a simple <code>Array</code> implementation, and swap it out for an <code>Iterator</code> later on when you notice memory consumption going up. It can also make things pretty readable, as demonstrated above with the <code>$coffeeRuns-&gt;thatAre(new OpenForOrders());</code>.</p>

<p>You can also choose to go A LOT further, or less far into this, as you desire. Good luck on your explorations!</p>

<p>PS: I gave a talk on this subject at the <a href="http://php.gent/">PHP.GENT meetup</a>, you can find the slides <a href="https://speakerdeck.com/turanct/the-language-of-collections">here</a>.</p>
]]></content>
        </entry>
    </feed>
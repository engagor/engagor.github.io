<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/blog/tags/Bug fixing.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-06-25T11:10:38+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Using decorators for debugging]]></title>
            <link href="/blog/2017/09/22/using-decorators-for-debugging"/>
            <updated>2017-09-22T10:00:00+00:00</updated>
            <id>/blog/2017/09/22/using-decorators-for-debugging</id>
            <content type="html"><![CDATA[<p>When you're writing SOLID code, you probably hide some implementation details behind interfaces in many parts of your codebase. In this post, we'll talk about an HTTP client, which is hidden behind an interface. The exact implementation we use doesn't matter. It could be a simple cURL call, or we could be using a more advance package like <a href="https://github.com/guzzle/guzzle/">Guzzle</a> or <a href="https://github.com/kriswallsmith/Buzz">Buzz</a>. In any case, our application knows only about the <code>HttpClient</code> interface that it defined, like this.</p>

<pre><code class="php">&lt;?php

namespace CoffeeRun;

interface HttpClient
{
    /**
     * @param Request $request An HTTP Request
     *
     * @throws ClientException if the request failed
     *
     * @return Response a response instance
     */
    public function execute(Request $request): Response;
}
</code></pre>

<p>Our code will ask the <code>HttpClient</code> implementation to <code>execute()</code> a <code>Request</code> and expects a <code>Response</code> if the call succeeded, or a <code>ClientException</code> if something unexpected happens.</p>

<p>The cool thing about this, is that our whole codebase needs to only know about this one interface, and not about the specific package that we're going to use. Plus, we can use another (fake) implementation of the <code>HttpClient</code> interface during testing.</p>

<h2 id="decorators">Decorators</h2>

<p>Now let's say that we want our application to make all HTTP calls with a certain User-Agent header. We don't want to go into our code and change every occurrence of <code>new Request</code> to also include that specific header. This is where decorators come in. We can "wrap" the <code>HttpClient</code> instance in a shell that acts as if it's the original <code>HttpClient</code>, but just takes the incoming <code>Request</code> and adds that header to it, and then passes on the call to the wrapped <code>HttpClient</code>. Like this:</p>

<pre><code class="php">&lt;?php

namespace CoffeeRun;

final class ClientWithUserAgent implements HttpClient
{
    private $wrappedClient;
    private $userAgentString;

    public function __construct(HttpClient $wrappedClient, $userAgentString = 'Coffee Bot 1.0')
    {
        $this-&gt;wrappedClient = $wrappedClient;
        $this-&gt;userAgentString = (string) $userAgentString;
    }

    public function execute(Request $request): Response
    {
        $request = $request-&gt;withHeader('User-Agent', $this-&gt;userAgentString);

        return $this-&gt;wrappedClient-&gt;execute($request);
    }
}
</code></pre>

<p>Creating an instance looks something like this:</p>

<pre><code>&lt;?php

$httpClient = new ClientWithUserAgent(
    new ClientCurl(),
    'ROBOCOP'
);
</code></pre>

<p>As this Decorator also implements the same <code>HttpClient</code> interface, the application doesn't even know this is happening, because from the outside it looks and behaves exactly the same. This change essentially now is a change in the configuration file of our Dependency Injection Container, no other files needed to be changed to make this happen.</p>

<h2 id="using-decorators-for-investigation">Using decorators for investigation</h2>

<p>Now, if we want to investigate the requests and responses that we get from a service while the application is running, e.g. when an unidentified bug is happening, we could do it with a decorator. The rest of the application won't know about it and should just keep on working as usual, while we get logs of the data that we want:</p>

<pre><code class="php">&lt;?php

namespace CoffeeRun;

final class LoggingClient implements HttpClient
{
    private $wrappedClient;
    private $logger;

    public function __construct(HttpClient $wrappedClient, LoggerInterface $logger)
    {
        $this-&gt;wrappedClient = $wrappedClient;
        $this-&gt;logger = $logger;
    }

    public function execute(Request $request): Response
    {
        $this-&gt;logger-&gt;debug('request', $request);

        $response = $this-&gt;wrappedClient-&gt;execute($request);

        $this-&gt;logger-&gt;debug('response', $response);

        return $response;
    }
}
</code></pre>

<p>The request and response are logged in our logs now, and they look good to us, but we still haven't found what we're looking for and we want to see if the requests our app is making work from the command line using <code>curl</code>. What if we made our application also log the complete curl commands? Then we could just copy paste them in our terminal to test them locally.</p>

<pre><code class="php">&lt;?php

namespace CoffeeRun;

final class CurlCommandLoggingClient implements HttpClient
{
    private $wrappedClient;
    private $logger;

    public function __construct(HttpClient $wrappedClient, LoggerInterface $logger)
    {
        $this-&gt;wrappedClient = $wrappedClient;
        $this-&gt;logger = $logger;
    }

    public function execute(Request $request): Response
    {
        $method = $request-&gt;getMethod();
        $url = $request-&gt;getUrl();
        $params = $request-&gt;getParams();
        $headers = $request-&gt;getHeaders();

        $curlString = 'curl';
        $curlString .= ' --' . strtolower($method);

        foreach ($params as $key =&gt; $value) {
            $curlString .= ' --data "' . $key . '=' . $value . '"';
        }

        foreach ($headers as $key =&gt; $value) {
            $curlString .= ' --header "' . $key . '=' . $value . '"';
        }

        $curlString .= ' "' . $url . '"';

        $this-&gt;logger-&gt;debug('curl command', $curlString);

        return $this-&gt;client-&gt;execute($request);
    }
}
</code></pre>

<p>Of course, this is an oversimplified way of building the <code>curl</code> command, but this will help you debug your HTTP calls by copy/pasting them to your terminal! Easy as that, and still no changes to the existing code. It takes one line to change it, and one line to delete and bring it back to production values.</p>

<h2 id="concerns">Concerns</h2>

<ul>
<li>Liskov Substition Principle: It's very important that our decorators still adhere to the original contract of the wrapped instance (in this case the <code>HttpClient</code> interface). If the decorator would produce another return value, or take different method parameters, it wouldn't work.</li>
<li>Applying a decorator that logs a lot of data in production might have an impact on your host. This is just an example of using your existing interfaces to create some plug &amp; play debugging solutions. If you do something like this in production, use the same caution as with other changes in production.</li>
</ul>

<p>That's it! Have fun.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Bugfixing with Git Bisect]]></title>
            <link href="/blog/2017/05/08/bugfixing-with-git-bisect"/>
            <updated>2017-05-08T10:00:00+00:00</updated>
            <id>/blog/2017/05/08/bugfixing-with-git-bisect</id>
            <content type="html"><![CDATA[<p>Lately, we've deployed code that broke features, that were surely working in the past. Since we're quite heavy committers, things can get lost in our <code>git log</code> quite easily. That makes it harder to go back in history and find out what exactly caused the failure to happen. We simply would have to look through too many commits. That's where <code>git bisect</code> comes in!</p>

<p>The <code>git bisect</code> command provides us with a "binary search" over the commit history: we tell it when things were good for sure, and when they were bad, and bisect will jump to the commit that's in the middle between those two commits. We then test if things work as expected. If it was good at that point we know all history before that point was good, and we move on the the other half of history and apply the same process of dividing it in two and seeing if things work as expected. We do that until we arrive at a point where we know which commit broke things. That's where we need to look. The cool thing is that we can sift through a huge amount of commits in very few steps, and locate the problem quickly. Let's see how that works in practice:</p>

<ol>
<li><p>Use <code>git log</code> to find out the commit hash for a commit where we know that things worked. Let's assume for now that the current <code>HEAD</code> we're at is at a point where things fail.</p>

<p><img src="/images/2017-05-08-bugfixing-with-git-bisect/1.png" alt="Screenshot of a git log history" /></p></li>
<li><p>Let's start the bisect session and tell git which points were good and bad:</p>

<pre><code class="sh">git bisect start
git bisect good {the commit hash where it was good}
git bisect bad
</code></pre>

<p>As you can see, I didn't specify a commit hash for the <code>git bisect bad</code> command. Bisect assumes that we mean <code>HEAD</code> if we don't specify a commit. Since the current commit is bad, and <code>HEAD</code> always points to the currently checked out commit, we can leave this blank.</p>

<p><img src="/images/2017-05-08-bugfixing-with-git-bisect/2.png" alt="Screenshot of the first steps of a git bisect session" /></p></li>
<li><p>Now git will checkout a commit in the middle between our <code>good</code> and <code>bad</code> indications. Just do what you have to do to check if things work or not, e.g. run a unit test, or do some manual checks. Then pass that info on to git with <code>git bisect good</code> if things work, and <code>git bisect bad</code> if they don't.</p>

<p><img src="/images/2017-05-08-bugfixing-with-git-bisect/3.png" alt="Screenshot of a git bisect bad" /></p></li>
<li><p>Repeat <em>step 3</em> until git knows which commit went bad. It will indicate the process at every step. When it's done, git will show you the exact commit where things went from <code>good</code> to <code>bad</code>, using <code>git show</code> behind the scenes. You then know where to look to fix your problem.</p>

<p><img src="/images/2017-05-08-bugfixing-with-git-bisect/4.png" alt="Screenshot of the result of a bisect session: 1 commit" /></p></li>
</ol>

<p>To go back to master, do a simple <code>git bisect reset</code>. Congratulations! You've used <code>git bisect</code> to locate a problem in your commit history! Now, there are some more things to know:</p>

<h3 id="when-something-goes-wrong">When something goes wrong</h3>

<p>What if you did something wrong? You typed <code>git bisect bad</code> when everything was fine and you should've typed <code>git bisect good</code>? No worries! Bisect has a secret weapon: <code>git bisect log</code>, which lets you dump the history of this bisect session to a file. You can then remove the faulty step from the file with a text editor, and replay the entire session without that bad step.</p>

<ol>
<li><p>Save your session to a file:</p>

<pre><code class="sh">git bisect log &gt; {filename}
</code></pre></li>
<li><p>Remove the faulty line from the file using your favorite text editor:</p>

<pre><code class="sh">vim {filename}
</code></pre></li>
<li><p>Reset your <code>bisect</code> session:</p>

<pre><code class="sh">git bisect reset
</code></pre></li>
<li><p>Replay the correct steps:</p>

<pre><code class="sh">git bisect replay {filename}
</code></pre></li>
<li><p>Do the rest of the bisect steps to find out where things went wrong. You can remove the replay file:</p>

<pre><code class="sh">rm {filename}
</code></pre></li>
</ol>

<h3 id="automating-the-steps-using-a-script-or-test">Automating the steps using a script or test</h3>

<p>You can automate the recursive steps of telling git that a revision is good or bad, by a simple bash script or unix command that returns a <code>0</code> status code on success, and <code>1</code> on failure. That way, if you have a testsuite, you can use that to really quickly find out where things went wrong by adding a test to it (the code is obviously not tested well or it wouldn't have happened so long ago), and using that test as the command. Let's see how that works:</p>

<pre><code class="sh">git bisect start
git bisect good {the commit hash where it was good}
git bisect bad
git bisect run {path to the script to run}
</code></pre>

<p>Don't forget to end your session with a <code>git bisect reset</code> when you found the offending commit.</p>

<h3 id="fantastic-on-fridays">Fantastic On Fridays</h3>

<p>So next time a nasty bug report comes in on a Friday -you're about to leave for a great weekend with your mates- and there were a thousand commits pushed to production that day by your team, don't dispair! Fire up <code>git bisect</code> and find where you need to be in a few minutes time, revert the commit, and enjoy your weekend!</p>

<p>Happy bughunting!</p>
]]></content>
        </entry>
    </feed>
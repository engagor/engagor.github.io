<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/blog/tags/Debugging.xml" rel="self"/>
    <link href="/"/>
    <updated>2020-10-23T08:20:10+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A tale of a small JavaScript bug]]></title>
            <link href="/blog/2019/10/02/a-tale-of-a-small-javascript-bug"/>
            <updated>2019-10-02T14:30:00+00:00</updated>
            <id>/blog/2019/10/02/a-tale-of-a-small-javascript-bug</id>
            <content type="html"><![CDATA[<p>Sometimes it's assumed that the frontend is a relatively harmless place to be programming. We've been proven wrong once again.</p>

<h2 id="%F0%9F%94%A5%F0%9F%90%B6%E2%98%95%EF%B8%8F%F0%9F%94%A5-this-is-fine">üî•üê∂‚òïÔ∏èüî• This is fine</h2>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/this-is-fine.png" alt="This is fine" /></p>

<p>For a few months now, we have been seeing relatively high loads on our web servers. The loads varied from around 90% of the total CPU power available, to a bit over 100% in peak hours. We assumed that this was normal and that our product was just being used more (which it was), and that this was a natural burden on the load on our servers. The approach we were going to take was to continue scaling horizontally.</p>

<p>Two weeks ago however, we noticed huge daily load spikes (up to 1000% of our capacity) during peak hours. We got alert SMS'es of Redis that couldn't handle the amount of requests, and saw Kibana logs of very slow user requests to certain routes, effectively rendering our application unusable at times. It was "all hands on deck" immediately, and we started digging. Before we could find out what was happening it stopped again, and the load dropped to what we assumed was "normal load". We found, also using Kibana, that there was a huge amount of calls to our <code>/find</code> endpoint, and so we decided to implement a <a href="/blog/2017/05/02/sliding-window-rate-limiter-redis/">rate limiter</a> on those, to prevent our app from going down, and buy us some time to look for the actual issue. However, we couldn't see why that endpoint was hit so hard.</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/kibana.png" alt="Kibana showing a lot of requests for one user in a short time frame" /></p>

<h2 id="%F0%9F%90%9B%F0%9F%95%B5%EF%B8%8F%E2%80%8D%E2%99%82%EF%B8%8F--bug-hunting">üêõüïµÔ∏è‚Äç‚ôÇÔ∏è  Bug Hunting</h2>

<p>A few days later, when we were hit with a huge amount of calls again (this time, they were ratelimited and not producing those huge loads on our servers, but we could see them in the logs and in Kibana), we noticed that most of them were coming from only a limited number of customers. We tried to work in our app as they would do, but couldn't reproduce it. After some time however, we noticed in the network tab of the browser we were working in, that the same call to the <code>/find</code> endpoint was done multiple times simultaneously! Bingo!</p>

<p>Or not Bingo? The code seemed to be fine: When we mount our inbox's react component, we use <code>Sonora.on(eventname, callback)</code> to bind a callback to a given websocket eventname (Sonora is an abstraction around <a href="https://socket.io/">socket.io</a>). When we unmount the react component again, we call <code>Sonora.off(eventname, callback)</code> to stop listening for those events. When such an event comes in, we would potentially need more info from the backend and a call to the <code>/find</code> endpoint is issued. It definitely looked like we didn't unregister the callbacks when unmounting that component, given how we saw multiple calls being made simultaneously in the console's network tab, whenever a websocket message came in.</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/performance-tab.png" alt="Browser's performance tab showing lots of calls to the find endpoint" /></p>

<p>While everything was looking okay in the consuming code of the Sonora <code>.on()</code> and <code>.off()</code> methods, we concluded that something must've been wrong in the wrapper around socket.io itself. When looking inside the <code>.on()</code> method, we found out that there was a debugging statement added like this:</p>

<pre><code class="javascript">const Sonora = {
    // ...

    on: (event, callback) =&gt; {
        socket.on(
            event,
            () =&gt; {
                console.log('some debugging here');

                callback.apply(this, arguments);
            }
        );
    }

    // ...
}
</code></pre>

<p>As you can see, we wrapped the actual callback inside an anonymous function, and passed that on to Socket.io's <code>.on()</code> handler. Now, when calling <code>.off()</code>, we sent along the original callback which didn't match the wrapped one, and nothing was removed. Since it's possible to have multiple callbacks for each incoming event, this resulted in the same callback being added time after time and not being removed. So we had basically made all our clients do <em>loads</em> of unnecessary calls to <code>/find</code> by adding a debugging statement! And believe it or not, this debugging statement was there for a while! (Thanks git blame!)</p>

<h2 id="%F0%9F%94%A8%F0%9F%91%A9%E2%80%8D%F0%9F%94%A7-fixing-it">üî®üë©‚Äçüîß Fixing it</h2>

<p>The fix was easy enough: don't add that anonymous function.</p>

<p>The load on our servers dropped immediately when we put that small change into production, and not only during peak hours. It seemed that we had been on a tipping point. A few more users online at any given time, a few more open tabs with our application running in them. The servers constantly running at semi-high loads. And then we went over it. üî•</p>

<p><img src="/images/2019-10-02-a-tale-of-a-small-javascript-bug/loads-dropping.png" alt="Graph displaying the huge drop in load on our servers" /></p>

<p>Along the way we did some other optimisations:</p>

<ul>
<li>we implemented a rate limiter on the <code>/find</code> endpoint</li>
<li>we disallowed to register exactly the same callback twice for the same event using <code>Sonora.on()</code></li>
<li>we fixed a second bug in <code>Sonora.off()</code> where we didn't remove the correct callbacks sometimes</li>
</ul>

<h2 id="%F0%9F%98%87%F0%9F%92%AD-and-they-lived-happily-ever-after">üòáüí≠ And they lived happily ever after</h2>

<p>This was the tale of the small JavaScript bug bringing down the huge web application, a modern David and Goliath if you will. Frontend debugging <em>tricks</em> can take down your application! Every change is important, certainly changes that happen in code that's used very frequently. Some changes that look inconspicuous can over time become real bottlenecks. Tools like Kibana and the browser profiler &amp; network tabs really helped us a great deal finding the issue, so don't forget what you have at your disposal.</p>

<p>We hope you enjoyed reading about our failures! Happy debugging! üëã</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Exceptional Exceptions]]></title>
            <link href="/blog/2019/05/22/exceptional-exceptions"/>
            <updated>2019-05-22T15:00:00+00:00</updated>
            <id>/blog/2019/05/22/exceptional-exceptions</id>
            <content type="html"><![CDATA[<p>You've made it to this post thinking "Why do we still need to talk about Exceptions?". Well, they're used everywhere in OOP codebases, but sometimes they're used in a way that make debugging a bit difficult. Let's look at some ways to make debugging exceptions a bit more fun!</p>

<p>You know that feeling when you're trying to investigate an Exception that was thrown, but you can't seem to find the origin of it? You dig a bit deeper and you find that it's an exception that was caught and not rethrown, e.g.:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!');
}
</code></pre>

<p>Now, when you encounter this <code>SomethingWentWrongException</code>, you'll see that the trace takes you back to the 6th line of this code example. All information that was inside the <code>VeryDescriptiveException</code>, including its message, stack trace and other useful information is gone. Of course, debugging that error in <code>doSomeImportantStuffWith()</code> would be much easier if you had all that info.</p>

<pre><code class="php">Fatal error: Uncaught SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withoutPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<h2 id="prevent-information-loss-by-using-%60%24previous%60">Prevent information loss by using <code>$previous</code></h2>

<p>The obvious answer to this simplified example would be to just rethrow the <code>VeryDescriptiveException</code> instead of throwing a more general <code>SomethingWentWrongException</code>... And that would be valid, but let's say we're implementing an Interface that prescribes that we only throw <code>SomethingWentWrongException</code>s. We can't let the <code>VeryDescriptiveException</code> through or we'll break the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>. We want to throw that specific <code>SomethingWentWrongException</code>, while still somehow preserving the information of that previous exception that we caught. Let's check <a href="https://www.php.net/manual/en/exception.construct.php">the docs</a>:</p>

<p><img src="/images/2019-05-24-exceptional-exceptions/php-docs-exception-construct.png" alt="PHP Docs for the Exception Constructor" /></p>

<p>That <code>Throwable $previous = null</code> is what we're looking for! I've almost never seen this being used in the wild, but it's great for our usecase:</p>

<pre><code class="php">try {
    $this-&gt;doSomeImportantStuffWith($foo);
} catch (VeryDescriptiveException $e) {
    // do some stuff here

    throw new SomethingWentWrongException('oh no!', 0, $e);
}
</code></pre>

<p>this results in this error:</p>

<pre><code class="php">Fatal error: Uncaught VeryDescriptiveException: hello there! in test.php:15
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(23): Test-&gt;doSomeImportantStuffWith('test')
#1 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#2 {main}

Next SomethingWentWrongException: oh no! in test.php:6
Stack trace:
#0 /Users/toon/Projects/devblog/test.php(34): Test-&gt;withPrevious()
#1 {main}
  thrown in /Users/toon/Projects/devblog/test.php on line 6
</code></pre>

<p>As you can see, the stack trace of the original exception along with the one we wrapped it in are presented to us on error! We can see the message as well, and we can even add our own properties to the exception and be presented with them here if we just implement the <code>__toString()</code> method of the exception.</p>

<h2 id="custom-properties-in-exceptions">Custom properties in exceptions</h2>

<p>Let's say we've been building an API client that does some HTTP requests to an endpoint. Something can go wrong during the HTTP request, and we want to thrown an <code>ApiConnectionFailed</code> exception whenever the HTTP response code is not <code>2xx</code> or something else fails, so that the rest of our application has one single Exception it needs to prepare for. It would be very handy to debug if that exception contained our HTTP Request &amp; Response objects, e.g.:</p>

<pre><code class="php">final class ApiConnectionFailed extends Exception
{
    private $request;
    private $response;

    public static function withHttpRequestAndResponse(
        $message,
        Request $request = null,
        Response $response = null,
        Throwable $previous = null
    ) {
        $exception = new static($message, 0, $previous);
        $exception-&gt;request = $request;
        $exception-&gt;response = $response;

        return $exception;
    }

    public function __toString()
    {
        $string = parent::__toString();
        $string .= "\n{$this-&gt;request}";
        $string .= "\n{$this-&gt;response}";

        return $string;
    }
}
</code></pre>

<p>As you can see, we used a <a href="http://verraes.net/2014/06/named-constructors-in-php/">named constructor</a> <code>withHttpRequestAndResponse</code> to be able to keep the default constructor for Exceptions, but to also be able to construct it using a lot of extra relevant debugging information. This means that this Exception behaves like other exceptions and is very transparent to other developers.</p>

<p>If something fails, we'll construct the exception like this:</p>

<pre><code class="php">try {
    $response = $httpClient-&gt;execute($request);
} catch (HttpClientException $e) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'Http connection could not be established',
        $request,
        null,
        $e
    );
}

if ($response-&gt;getResponseCode() === 500) {
    throw ApiConnectionFailed::withHttpRequestAndResponse(
        'We got a 500 error from the host',
        $request,
        $response
    );
}
</code></pre>

<p>The exception will always contain all relevant information to be able to debug.</p>

<h2 id="recap">Recap</h2>

<p>To quickly recap, you can make your life a lot easier by</p>

<ul>
<li>providing exceptions with descriptive names</li>
<li>providing the <code>$previous</code> exception when rethrowing</li>
<li>providing all relevant data to an exception</li>
<li>providing named constructors for your exceptions to be able to add debugging info but keep the original constructor</li>
</ul>

<p>Hope that helps! Until next time, have fun coding! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Vim As A PHP IDE - Debugging]]></title>
            <link href="/blog/2017/10/02/vim-ide-debugging"/>
            <updated>2017-10-02T10:00:00+00:00</updated>
            <id>/blog/2017/10/02/vim-ide-debugging</id>
            <content type="html"><![CDATA[<p><strong>This blogpost is part of the "Vim As A PHP IDE" series, which starts <a href="/blog/2017/01/01/vim-ide-setting-up">here</a>.</strong></p>

<p>A few weeks ago, I ended the "Vim As A PHP IDE" series with the <a href="/blog/2017/06/15/vim-ide-refactoring">refactoring</a> post. However, there's a huge thing missing from this series, and that's debugging. A lot of people debug their code using <code>var_dump</code> and <code>echo</code>, or worse, with self-made methods to markup the things they want to dump. Not only is this very old-school, there are also problems with this method. For instance, the dumped code affects the behaviour or the output of the running script. This is where the step debugger comes in.</p>

<p>A step debugger lets you step trough your code while it's running, so that you can inspect variables on the fly. This eliminates the need for dumping lines to the standard output, while giving you more insight in what's happening. e.g. you can see the whole stack trace and step through that as well...</p>

<p><a href="/images/2017-10-02-vim-ide-debugging/1.png"><img src="/images/2017-10-02-vim-ide-debugging/1.png" alt="screenshot of Vdebug in action" /></a></p>

<h2 id="how-does-this-work%3F">How does this work?</h2>

<p>Basically, the debugger, in the case of PHP <a href="https://xdebug.org/">xdebug</a>, hooks into the running code and exposes an API that you can use to set breakpoints, make the compiler run, etc... To install xdebug, follow the instructions on <a href="https://xdebug.org/docs/install">their documentation page</a>. Now you'll also have to add some lines to your <code>php.ini</code> configuration file. In my case it looks like this:</p>

<pre><code class="ini">[xdebug]
zend_extension="/path/to/xdebug.so"
xdebug.remote_enable=1
</code></pre>

<p>The important part is the <code>remote_enable=1</code>, which allows us to hook into the step debugger.</p>

<p>Then you, as a user, sets a breakpoint somewhere and inspects the state of the program at that point, using a "client" that knows how to speak the language of the debugger's API and integrates with your IDE. In our case that client is going to be the Vim plugin <a href="https://github.com/joonty/vdebug/">Vdebug</a>. You can install the plugin using your favorite plugin installation method.</p>

<h2 id="debugging-our-first-script">Debugging our first script</h2>

<p>Let's create a script <code>test.php</code> that we want to debug:</p>

<pre><code class="php">&lt;?php

$foo = 'bar';
$foo = 'baz';
</code></pre>

<p>We want to see what's inside the <code>$foo</code> variable during the time this script runs. In Vim, press <code>F5</code> to activate Vdebug. Now, run the script with debugging enabled:</p>

<pre><code class="sh">XDEBUG_CONFIG="idekey=xdebug" php test.php
</code></pre>

<p>You'll notice that the script seems to hang. In Vim, however, you'll see something like this happening:</p>

<p><img src="/images/2017-10-02-vim-ide-debugging/2.png" alt="Vdebug first startup screen" /></p>

<p>That's right! A new tab opened in Vim, containing the Vdebug window with the first breakpoint active. You can instantly see the local variables on the right, as well as the stack trace. If we now move our cursor to line <code>4</code> and press <code>F9</code>, to make the debugger run to that line and inspect the state right before it, we'll see that the <code>$foo</code> variable's value was changed to <code>'bar'</code>. Look ma, no <code>var_dump</code>!</p>

<p><img src="/images/2017-10-02-vim-ide-debugging/3.png" alt="Inspecting the $foo variable in Vdebug" /></p>

<p>You can also see the superglobals by hitting that tab in the variables screen:</p>

<p><img src="/images/2017-10-02-vim-ide-debugging/4.png" alt="Vdebug shows PHPs superglobals at this point in time" /></p>

<p>Great! Now you know the basics. Take a look at the other things you can do while debugging (stepping out, stepping over, etc) with Vdebug on <a href="https://github.com/joonty/vdebug/#quick-guide">their documentation's Quick Guide section</a>. To quickly stop debugging and return to where you were before, press <code>F6</code> twice.</p>

<p>Tip: if you don't want to set the environment variable every time, you can make XDebug try and run a remote debugger session all the time, and hook into it when you want to by enabling your client. Put this extra line in your <code>php.ini</code> configuration file:</p>

<pre><code class="ini">xdebug.remote_autostart=1
</code></pre>

<h2 id="debugging-code-that-is-run-by-a-webserver">Debugging code that is run by a webserver</h2>

<p>Running the debugger for web requests is also possible. If the webserver is running on your local machine, you don't have to change much (assuming XDebug is installed and configured as above): just append a parameter to your URL, like this <code>XDEBUG_SESSION_START=xdebug</code>. For instance, <code>https://foo.local/test.php</code> would become <code>https://foo.local/test.php?XDEBUG_SESSION_START=xdebug</code>. The debugger will now try to connect to your client!</p>

<p>So hereby we conclude this blog series about Vim as an IDE once more, and we hope that you liked it! Happy Debugging!</p>
]]></content>
        </entry>
    </feed>
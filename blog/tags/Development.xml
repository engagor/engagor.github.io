<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/Development.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-11-28T10:26:38+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Monoids]]></title>
            <link href="/blog/2018/10/08/lambda-monoids"/>
            <updated>2018-10-08T10:30:00+00:00</updated>
            <id>/blog/2018/10/08/lambda-monoids</id>
            <content type="html"><![CDATA[<p><strong>This is the fourth post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h2 id="%E2%98%95%EF%B8%8F-ordering-some-coffees">‚òïÔ∏è Ordering some coffees</h2>

<p>In the previous posts, you already came across a few functional programming concepts. Let's explore one more. Let's say we went to a coffee bar and we want to calculate the total price of an order of coffees:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50
</code></pre>

<p>If you want to quickly do this from the top of your head, it makes sense to calculate it like this:</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= (2.50 + 2.50) + (2.90 + 2.10) + 4.50
= 5             + 5             + 4.50
= 10                            + 4.50
= 14.50
</code></pre>

<p>instead of</p>

<pre><code class="haskell">2.50 + 2.50 + 2.90 + 2.10 + 4.50
= 2.50 + (2.50 + 2.90) + (2.10 + 4.50)
= 2.50 + 5.40          + 6.60
= 7.90                 + 6.60
= 14.50
</code></pre>

<p>As you already knew, these two approaches yield the same results. We say the location of the <code>(</code> and <code>)</code> when doing <code>+</code> isn't important, or <code>+</code> is <em>associative</em>.</p>

<p>Usually the receipt has a line "service" with some service costs of the order as well. In this case, since we ordered more than 4 coffees, we get service for free. The actual receipt looked like this:</p>

<pre><code class="haskell">- Lungo           ‚Ç¨ 2.50
- Lungo           ‚Ç¨ 2.50
- Cappuccino      ‚Ç¨ 2.90
- Double Espresso ‚Ç¨ 2.10
- Iced Coffee     ‚Ç¨ 4.50

- service         ‚Ç¨ 0
</code></pre>

<p>Does this change our calculation?</p>

<pre><code class="haskell">(2.50 + 2.50) + (2.90 + 2.10) + 4.50 + 0
= 5           + 5             + 4.50 + 0
= 10                          + 4.50 + 0
= 14.50                              + 0
= 14.50
</code></pre>

<p>Not at all! We conclude that 0 is "neutral" in that it doesn't change our calculations when using <code>+</code>. We call this <code>0</code> value <em>identity</em>.</p>

<h2 id="%F0%9F%A7%90-monoids">üßê Monoids</h2>

<p>Now, when we find these two properties (associativity and neutral element) for a function and its data, we found a <em>Monoid</em>. Cool! Let's see if we can find some other Monoids!</p>

<p>Let's see if a list of integers, and the operation <code>++</code> (append) form a Monoid:</p>

<pre><code class="haskell">$ ([1, 2] ++ [3, 4]) ++ [5, 6]
[1, 2, 3, 4, 5, 6]

$ [1, 2] ++ ([3, 4] ++ [5, 6])
[1, 2, 3, 4, 5, 6]
</code></pre>

<p>Ok, we have associativity, let's check if we can find a neutral element. How about the empty list?</p>

<pre><code class="haskell">$ [1, 2] ++ []
[1, 2]
</code></pre>

<p>Nice! We found another Monoid!</p>

<p>How about this:</p>

<pre><code class="haskell">data DiskUsage = DiskUsage { server :: String
                           , consumed :: Int
                           } deriving (Eq, Show)

data ServerStats = ServerStats { totalInGB :: Int
                               , perServer :: [DiskUsage]
                               } deriving (Eq, Show)

mergeServerStats :: ServerStats -&gt; ServerStats -&gt; ServerStats
mergeServerStats a b = ServerStats { totalInGB = totalInGB a + totalInGB b
                                   , perServer = perServer a ++ perServer b
                                   }
</code></pre>

<p>A program we could use to measure disk usage in our fictional data center's server racks returns <code>ServerStats</code> per rack. For every server in the rack, there's a <code>DiskUsage</code> entry in the <code>perServer</code> list. To easily calculate the total disk usage in our fictional data center, we just use <code>mergeServerStats</code> to sum it all, <em>et voil√†</em> we get one <code>ServerStats</code> with a total amount of GB used, and a list of all servers with their <code>DiskUsage</code>. (Note that the <code>totalInGB</code> can be totally wrong in this example. In a real world application you would just calculate that from the <code>perServer</code> value at all times. It's there because of convenience: you can immedately see how much disk usage is for a given rack.)</p>

<p>The question is, is this a <strong>Monoid</strong>? ü§î</p>

<p>To talk about a Monoid, we know we need a datatype. In this case we have <code>ServerStats</code>. Good. We also need a binary operation. We have <code>mergeServerStats</code>. Nice! We're halfway there. Let's see if we have the other stuff we need:</p>

<ul>
<li><p>associativity:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$ bar = DiskUsage { server = "bar", consumed = 99 }
$ baz = DiskUsage { server = "baz", consumed = 1 }
$ qux = DiskUsage { server = "qux", consumed = 0 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ rack2 = ServerStats { totalInGB = 100, perServer = [bar, baz] }
$ rack3 = ServerStats { totalInGB = 0, perServer = [qux] }
$
$ result1 = mergeServerStats (mergeServerStats rack1 rack2) rack3
$ result2 = mergeServerStats rack1 (mergeServerStats rack2 rack3)
$
$ result1 == result2
True
</code></pre>

<p>Applying <code>mergeServerStats</code> first to <code>rack1</code> and <code>rack2</code>, and then applying the same function to the result of the first calculation and <code>rack3</code> had the same result as first applying <code>mergeServerStats</code> to <code>rack1</code> and the result of applying that same function to <code>rack2</code> and <code>rack3</code>. We have associativity!</p></li>
<li><p>neutral element:</p>

<pre><code class="haskell">$ foo = DiskUsage { server = "foo", consumed = 42 }
$
$ rack1 = ServerStats { totalInGB = 42, perServer = [foo] }
$ neutral = ServerStats { totalInGB = 0, perServer = [] }
$
$ result = mergeServerStats rack1 neutral
$
$ result == rack1
True
</code></pre>

<p>We were able to find a <code>ServerStats</code> value <code>neutral</code> that, when appended to another value <code>rack1</code> using <code>mergeServerStats</code> resulted in the same value as <code>rack1</code> again! This means we have a neutral element!</p></li>
</ul>

<p>We can conclude that <code>ServerStats</code> forms a Monoid with its operation <code>mergeServerStats</code>.</p>

<h2 id="%F0%9F%92%B0-usefulness">üí∞ Usefulness</h2>

<p>Now why is this such a big deal? Why do we keep rambling on about this? Let's evaluate this next question from our fictional operations engineers:</p>

<blockquote>
  <p>Our datacenter grew quickly and we now have 10 racks with 10 servers each. We have a script that produces a <code>ServerStats</code> entry per rack. We want to know the total disk usage across all racks. Can we do this?</p>
</blockquote>

<p>We quickly head back to <a href="/blog/2018/06/27/lambda-recursion/#recognizing-a-pattern">last "Lambda To The Rescue" episode</a> and check out the paragraph about <code>fold</code>. Let's see if folds can help us!</p>

<pre><code class="haskell">$ foldr mergeServerStats neutral [ rack1, rack2, rack3, ... ]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          , ...
                          ]
            }
</code></pre>

<p>As you can see, we used all aspects of the Monoid in this example. We used the <em>neutral element</em> to have a starting value for our <code>foldl</code> invocation. We gave <code>foldl</code> the <code>mergeServerStats</code> binary operation over our datatype, and didn't worry about order of evaluation, which is where the <code>associativity</code> was helpful (we don't have to worry about implementation of <code>foldl</code>).</p>

<p>So, when we find out we're working with a Monoid, we immediately know we can <code>fold</code> easily over lists of that datatype!</p>

<p>In fact, if you're acquainted with <em>MapReduce</em>, a strategy for processing lots of data, you'll see that having a list of data allows you to <code>map</code> over it, and finding a Monoid between the datatype inside that list and the operation you want to do will allow you to <code>reduce</code> (or <code>fold</code>) easily over the list. Now you know what to look for!</p>

<p>Aside from "knowing what we can do with it", there's another benefit to understanding <code>Monoid</code>s, and that is <em>familiarity</em>. If you're checking out a codebase, and you find a Monoid instance, you'll feel right at home, and you'll understand the operations done on that particular datatype much easier than before. Which leads me to "formalizing".</p>

<h2 id="%F0%9F%A4%AF-formalizing">ü§Ø Formalizing</h2>

<p>You can even go further with this: in Haskell, there's a datatype <code>Monoid</code> which formalizes these properties in a typeclass:</p>

<pre><code class="haskell">class Monoid m where
  mempty :: m
  mappend :: m -&gt; m -&gt; m
  mconcat :: [m] -&gt; m
  mconcat = foldr mappend mempty
</code></pre>

<p>This means that you can formalize that your datatype &amp; operation combo is a <code>Monoid</code> instance, because it has a neutral element <code>mempty</code> and a binary operation <code>mappend</code>. You then get <code>mconcat</code> for free, which is the same as doing the <code>foldr</code> of the last example. Let's do this for our <code>ServerStats</code> type:</p>

<pre><code class="haskell">instance Monoid ServerStats where
  mempty = ServerStats { totalInGB = 0, perServer = [] }
  mappend = mergeServerStats
</code></pre>

<p>We can now do this:</p>

<pre><code class="haskell">$ mconcat [rack1, rack2, rack3]
ServerStats { totalInGB = 142
            , perServer = [ DiskUsage {server = "foo", consumed = 42}
                          , DiskUsage {server = "bar", consumed = 99}
                          , DiskUsage {server = "baz", consumed = 1}
                          , DiskUsage {server = "qux", consumed = 0}
                          ]
            }
</code></pre>

<p>This <code>mconcat</code> function thus comes for free and will work on any <code>Monoid</code>! You can mostly guess the behaviour of this function whenever you see it!</p>

<h2 id="%F0%9F%98%85-back-to-oop">üòÖ Back to OOP</h2>

<p>What to do with this knowledge in the Object Oriented world? We use lists to work with objects of the same type constantly, and do operations on objects in those lists to gather new information. Most of the time I see this, it's done using <code>foreach</code> or something like it. However, as far as I'm concerned there's no difference to the Functional Programming world here. If you already embrace <code>map</code>, <code>filter</code> and <code>reduce</code>, you should also be thinking about the datastructure inside the list: is it a <em>Monoid</em>? You'll then understand better how it will behave when doing operations on it and you'll immediately know which the best reducer functions are!</p>

<p>That concludes this post. I hope you try it out soon! Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Recursion]]></title>
            <link href="/blog/2018/06/27/lambda-recursion"/>
            <updated>2018-06-27T14:00:00+00:00</updated>
            <id>/blog/2018/06/27/lambda-recursion</id>
            <content type="html"><![CDATA[<p><strong>This is the third post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<h3 id="procedural-and-declarative-styles">Procedural and Declarative styles</h3>

<p>Most programming languages have language structures to loop through lists and do interesting stuff with those lists. When you're used to programming using one of those languages, it can be pretty terrifying to have your basics taken away from you when you jump into a functional programming language like Scheme or Haskell. Let's see what the problem is that functional languages have with loops and how they solved it.</p>

<p>Let's look at a pretty standard loop in PHP that counts how many words are in a list:</p>

<pre><code class="php">function countWordsInList(array $listOfWords)
{
    $count = 0;

    foreach ($listOfWords as $word) {
        $count++;
    }

    return $count;
}
</code></pre>

<p>Of course, this is an overly simple example (and you should probably use <code>count()</code>), but you get the point. Now, things get difficult, because there are no loops like this <code>foreach</code> in a lot of functional programming languages. Why, you ask? Because most of them either don't allow you to reassign variables (which makes the loop pretty useless), and, in fact, some of them disallow side-effects altogether. Let's see how we do this in Haskell instead:</p>

<pre><code class="haskell">countWordsInList :: [String] -&gt; Int
countWordsInList [] = 0
countWordsInList (x:xs) = 1 + countWordsInList xs
</code></pre>

<p>OK, stop. ü§î What the hack is happening here?</p>

<ul>
<li>On the first line, we have the type definition of our function: It takes a list of strings <code>[String]</code> and it returns an <code>Int</code>. It's a good practice to write it (it helps you think), but Haskell's compiler can infer it most of the time.</li>
<li>Then we define a "base" case: <code>countWordsInList</code> returns <code>0</code> for an empty list <code>[]</code>.</li>
<li>Then we say that for a list with at least one word <code>x</code> and possibly other words <code>xs</code>, we'll return <code>1</code> and add the result of the recursive call to the same function, with the rest of the list of words (the whole list without the first word).</li>
</ul>

<p>As you can see, in the PHP example we told the machine what to do with the list to get to a result. In the Haskell example, we declared what the result was, and some variables just had to be filled in. You could say that no computation needed to happen, just substitution.</p>

<pre><code class="haskell">countWordsInList ["foo", "bar", "baz"] = 1 + countWordsInList ["bar", "baz"]
countWordsInList ["foo", "bar", "baz"] = 1 + 1 + countWordsInList ["baz"]
countWordsInList ["foo", "bar", "baz"] = 1 + 1 + 1 + countWordsInList []
countWordsInList ["foo", "bar", "baz"] = 1 + 1 + 1 + 0
countWordsInList ["foo", "bar", "baz"] = 3
</code></pre>

<h3 id="recognizing-a-pattern">Recognizing a Pattern</h3>

<p>Let's try and write a function to sum all numbers in a list of integers:</p>

<pre><code class="haskell">sum' :: [Int] -&gt; Int
sum' [] = 0
sum' (x:xs) = x + sum' xs
</code></pre>

<p>OK, so:</p>

<ul>
<li>We'll call our function <code>sum'</code> because <code>sum</code> already exists.</li>
<li>We want <code>sum'</code> to take a list of integers <code>[Int]</code> and we'll return the sum of all those as an <code>Int</code>.</li>
<li>We'll start with the simplest case: an empty list will have the sum <code>0</code>.</li>
<li>In all other cases, we'll take the first <code>Int</code> in the list, and add it to the sum of all other items in the list.</li>
</ul>

<p>üí° Does that make you think of something?</p>

<p>You're right, this looks <strong>a lot</strong> like the previous example <code>countWordsInList</code>. And that's what other functional programmers thought when they were doing stuff like this. What if we could make an abstraction over this?</p>

<pre><code class="haskell">xxxxx [] = __value__
-- either return something for an empty list

xxxxx (x:xs) = __function__ x (xxxxx xs)
-- or take the first item of the list and combine
-- it with the recursive call with the rest of the list
</code></pre>

<p>Let's try. With the above blueprint, we can see that we need to create a function that</p>

<ol>
<li>takes a <code>__function__</code> that combines a value with the next</li>
<li>takes a <code>__value__</code> that is the default for empty lists</li>
<li>abstracts away the recursive call and returns the endresult;</li>
</ol>

<p>Let's define its type:</p>

<pre><code class="haskell">fold' :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a
</code></pre>

<ul>
<li>we'll call our function <code>fold'</code></li>
<li><code>(a -&gt; b -&gt; a)</code> first parameter is a function that takes a value of type <code>a</code> and type <code>b</code> and returns a value of type <code>a</code></li>
<li><code>-&gt; a</code> second parameter is the default value of type <code>a</code></li>
<li><code>-&gt; [b]</code> third parameter is a list of values to loop over, they all have type <code>b</code></li>
<li><code>-&gt; a</code> the return value will be of type <code>a</code></li>
</ul>

<p>Now we can start writing. We know that if the list we got is empty, we can just return the default value:</p>

<pre><code class="haskell">fold' _ def [] = def
</code></pre>

<p>The <code>_</code> means "we don't care about that value". It doesn't matter what the function is; if the list is empty, we don't need it. What if the list is not empty, but contains one or more elements? Let's use the combining <code>func</code> to combine the first item of the list with the result of the recursive call to the <code>fold'</code> function with exactly the same parameters (except for the "list", we just pass everything but the first element that we already used):</p>

<pre><code class="haskell">fold' func def (x:xs) = func x (fold' func def xs)
</code></pre>

<p>We apply the <code>func</code> to the first element and the result of the recursive call to our <code>fold'</code> function with all the same parameters, except for the list. There we just pass on the rest of the list (so without the first element that we already used).</p>

<p>Combined, that is:</p>

<pre><code class="haskell">fold' :: (b -&gt; a -&gt; a) -&gt; a -&gt; [b] -&gt; a
fold' _ def [] = def
fold' func def (x:xs) = func x (fold' func def xs)
</code></pre>

<p>Let's see if it works! Remember <code>countWordsInList</code>?</p>

<pre><code class="haskell">countWordsInList :: [String] -&gt; Int
countWordsInList [] = 0
countWordsInList (x:xs) = 1 + countWordsInList xs
</code></pre>

<p>We'll rewrite it using the <code>fold'</code> function:</p>

<pre><code class="haskell">countWordsInList :: [String] -&gt; Int
countWordsInList list = fold' (\word count -&gt; count + 1) 0 list
</code></pre>

<p>We'll fold over the <code>list</code> with a function that takes the next <code>word</code> and the current <code>count</code>, and returns <code>count + 1</code>. The stuff that's written between parens is a lambda (anonymous function) and looks like this <code>(\params -&gt; body)</code>. The default value for our <code>fold'</code> is <code>0</code>. When we use it, it gives expected results:</p>

<pre><code class="haskell">countWordsInList ["foo", "bar", "baz", "qux"]
-- 4

countWordsInList []
-- 0

countWordsInList ["foo"]
-- 1
</code></pre>

<p>How about the <code>sum</code> function that we made earlier?</p>

<pre><code class="haskell">sum' :: [Int] -&gt; Int
sum' = fold' (+) 0
</code></pre>

<p>Let's try it out:</p>

<pre><code class="haskell">sum' [1, 2, 3, 4]
-- 10

sum' []
-- 0

sum' [5]
-- 5
</code></pre>

<p>That seems to work... But wait... We wrote the definition <code>sum' = fold' (+) 0</code> without a list? Isn't this function definition incomplete? Yes. In Haskell, like in math, you can omit things that happen on both sides of the equals sign. Compare it to <code>3 + 4 = 1 + 2 + 4</code>. You could just as well write <code>3 = 1 + 2</code>. It's the same thing in Haskell. <code>sum' list = fold' (+) 0 list</code> is the same as <code>sum' = fold' (+) 0</code>.</p>

<p>As an exercise, let's do one more. We'll try to write a function that finds the maximum value of a list of positive integers, and returns <code>0</code> otherwise:</p>

<pre><code class="haskell">maximum' :: [Int] -&gt; Int
maximum' = fold' (\next current -&gt; if next &gt; current then next else current) 0
</code></pre>

<pre><code class="haskell">maximum' []
-- 0

maximum' [1, 2, 3, 5, 3, 2, 10, 0, 1]
-- 10

maximum' [42]
-- 42
</code></pre>

<p>If you want to use folds in Haskell, you certainly shouldn't write them yourself üòÖ - they already exist. Check out <a href="https://wiki.haskell.org/Foldr_Foldl_Foldl'">the documentation</a> for <code>foldl</code>, <code>foldr</code> and <code>foldl'</code>.</p>

<h3 id="transforming-a-list-to-another-list">Transforming a list to another list</h3>

<p>Let's say we have a list of Users, and we wanted to only have a list of their ages. The above methods could help us do that, but it would be quite tedious. Let's try writing a function for it ourselves.</p>

<pre><code class="haskell">data User = User { name :: String
                 , age :: Int
                 } deriving (Show)

ages :: [User] -&gt; [Int]
ages [] = []
ages (u:us) = age u : ages us
</code></pre>

<p>Again, we make sure we got the base case of an "empty list of users" covered: we'll just return an empty list of ages. Then we really need to start thinking. We'll just get what we need for the first value of the input list, and prepend that to the result of the recursive call with the rest of the list (just like what we did with the folds). Let's see what that gives us:</p>

<pre><code class="haskell">ages []
-- []

ages [ User {name="toon", age=29}, User {name="jenne", age=30} ]
-- [29,30]

ages [ User {name="toon", age=29} ]
-- [29]
</code></pre>

<p>It seems to work!</p>

<p>What if we had a list of ages, and we wanted to know how many years these people still had left to live. Let's oversimplify again, and subtract their age from <code>100</code>.</p>

<pre><code class="haskell">yearsLeft :: [Int] -&gt; [Int]
yearsLeft [] = []
yearsLeft (x:xs) = 100 - x : yearsLeft xs
</code></pre>

<p>Again, we take the first element of the list, do something with it, and recurse on the rest of the list. That looks a lot like the "age" example, doesn't it?</p>

<p>Well... there's an abstraction that can be made again. The "generic" function for doing things like this should look like so:</p>

<pre><code class="haskell">xxxxx [] = []
-- an empty input list results in an empty output list

xxxxx (x:xs) = __function__ x : (xxxxx xs)
-- take the first item of the list and do something with it
-- recurse on the rest of the list and append results.
</code></pre>

<p>Let's define its type:</p>

<pre><code class="haskell">map' :: (a -&gt; b) -&gt; [a] -&gt; [b]
</code></pre>

<p>Let's name our function <code>map'</code>, it takes a function from type <code>a</code> to type <code>b</code> and a list with <code>a</code>s. It then returns a list of <code>b</code>s. In the base case, it should return an empty list:</p>

<pre><code class="haskell">map' _ [] = []
</code></pre>

<p>In other cases, it should take the first item of the list, apply the function to it, and append the result of the recursive call:</p>

<pre><code class="haskell">map' func (x:xs) = func x : map' func xs
</code></pre>

<p>So, we get this:</p>

<pre><code class="haskell">map' :: (a -&gt; b) -&gt; [a] -&gt; [b]
map' _ [] = []
map' func (x:xs) = func x : map' func xs
</code></pre>

<p>Let's try it out: we want to write a function that takes a list of <code>Int</code>s and returns the same list but with <code>1</code> added to each element.</p>

<pre><code class="haskell">plusOne :: [Int] -&gt; [Int]
plusOne = map' (+ 1)
</code></pre>

<pre><code class="haskell">plusOne []
-- []

plusOne [1, 2, 3]
-- [2,3,4]

plusOne [3]
-- [4]
</code></pre>

<p>Cool! So now we have generalizations over some of these recursive functions! There are others to be found. I'll leave that to the reader to find out about.</p>

<h3 id="back-to-oop">Back to OOP</h3>

<p>You can probably see that these abstractions have their value. E.g.: <code>map</code> lets you use a function that applies to one thing on a whole list of those things. Even better, it lets you do it in a totally declarative style. You don't need to worry about state or changing variables. You don't need to keep counter values. Nothing. It's totally transparent. For me, this results in a huge reduction of mental overhead. I know, I talk a lot about that, but it's important to me. The same thing is true for the <code>fold</code>s. It's another way of thinking about loops that works really well for me.</p>

<p>When we get back to e.g. PHP now, I see many cases where a <code>map</code> or <code>fold</code> would be great. Implementing them ourselves isn't necessary (luckily), because they already exist in practically every programming language.</p>

<p>One more thing. The above implementations -which actually work really great in functional programming languages- wouldn't work in languages like PHP. The reason is simple: we would get stack overflows pretty quickly; In functional programming languages, there are things called tail call optimizations that can be made. They make sure that you don't blow the stack, even if you recurse a thousand times. This is not really possible in PHP functions right now. Try it out! But after it, just use <code>array_map()</code> and <code>array_reduce()</code> if you want to do stuff like this üòâ!</p>

<p>Happy programming y'aŒªŒª! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Pure Functions]]></title>
            <link href="/blog/2018/06/04/lambda-pure-functions"/>
            <updated>2018-06-04T10:00:00+00:00</updated>
            <id>/blog/2018/06/04/lambda-pure-functions</id>
            <content type="html"><![CDATA[<p><strong>This is the second post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Start <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure">here</a> if you want to read the whole thing.</strong></p>

<p>Whenever you read up on functional programming on the internet, it's common to come across words like "pure" and "transparent", and for good reason. Let's explore their meaning in the functional programming world. üïµÔ∏è‚Äç‚ôÇÔ∏è</p>

<h2 id="%F0%9F%92%8E-purity">üíé Purity</h2>

<p>Let's pretend we need to represent the number of cylinders in an engine <code>2</code> in our code. In a normal scenario, we would assign it to a variable and be done with it. We'll use <a href="https://www.haskell.org/">Haskell</a>, a pure functional language.</p>

<pre><code class="haskell">cylinders :: Int
cylinders = 2
</code></pre>

<p>In the example, we start with a type annotation. You can read the first line as "cylinders <strong>is an</strong> Int". Then we write our statement.</p>

<p>Now, whenever we need the number of cylinders for computation, we could just get it from the variable right? Sure! Let's try something else, since we're talking about "pure" functions. Let's try to use a function that doesn't take any input and always returns the number of cylinders, instead of a variable:</p>

<pre><code class="haskell">cylinders :: Int
cylinders = 2
</code></pre>

<p>Wait? WAT? That is exactly the same?</p>

<p>Yes, in Haskell, a function without parameters is the same as a value. And that's logical right? No computation needs to happen when there's no input... right?</p>

<p>Well... Let me disappoint you:</p>

<pre><code class="php">function cylinders()
{
    echo rand();

    return 2;
}
</code></pre>

<p>In PHP, and in practically any other language, you can do things in functions that have side effects. In this case</p>

<ul>
<li>we created output on the <code>stdout</code></li>
<li>we called <code>rand()</code> which in turn tried to create a random number by reading from a randomness source</li>
</ul>

<p>Of course this can result in A LOT of unexpected behaviour. By just looking at the function, you can't always immediately see what's going to happen. And this is what the word <code>pure</code> refers to. This function has "side effects", so it's not "pure".</p>

<p>In Haskell though, if you want to do side effects within a function it will be marked with an <code>IO</code> tag. In fact, this is a type that behaves a bit like an environment. Getting a random number and echo'ing it requires <code>IO</code>, so the type can't just be <code>Int</code>, it's <code>IO Int</code>.</p>

<pre><code class="haskell">cylinders :: IO Int
</code></pre>

<p>This way, you can always clearly see, just by looking at the types, that the function has side effects, and thus is not "pure".</p>

<h2 id="%F0%9F%91%93-transparency">üëì Transparency</h2>

<p>While these terms are used interchangibly, in my book the word "transparency" makes this very clear: you can "look straight through" a function.</p>

<pre><code class="haskell">double :: (Num a) =&gt; a -&gt; a
double x = 2 * x
</code></pre>

<p>For every numeric value, we can calculate its <code>double</code>. You could really write this as a complete mapping from every number to its double:</p>

<pre><code class="haskell">double :: (Num a) =&gt; a -&gt; a
double 0 = 0
double 1 = 2
double 2 = 4
double 3 = 6
double 4 = 8
-- ... etcetera
</code></pre>

<p>As you can see, we reduced the function to (essentially) "values" again, as in the first example of this post. Calls to transparent functions could in theory be replaced by their values. In functional programming jargon this is called "referential transparancy".</p>

<p>A lot of functions can be made in an entirely transparent way, even quite complex things like parsing structured text or doing extensive computation.</p>

<h2 id="%F0%9F%A4%A9-consequences">ü§© Consequences</h2>

<h4 id="reduced-mental-overhead">Reduced mental overhead</h4>

<p>As you can imagine, being able to reason about functions as "values" makes things <em>much</em> easier. Otherwise you have to deal with side effects that can change the world while you just expected an Integer representing the number of cylinders in a motorcycle. The same goes for the other case, where an <code>IO Int</code> lets you know instantly that there will be stuff happening behind the curtains, and you're not getting your <code>Int</code> for free.</p>

<h4 id="in-fp-as-well-as-oop-environments">In FP as well as OOP environments</h4>

<p>Even in OOP environments I always try to see which parts of the code that I'm writing can be written as pure functions, so that they can be extracted to functions that represent values. E.g. processing incoming social media posts to a unified format of a post that our system understands is essentially a "transparent" operation. It's just a transformation of data to a certain format. The fact that this function is pure makes it very easy to reason about: we can essentially just think about the post in it's basic form (inline the function as value).</p>

<p>Now that I'm thinking about it: it would be GREAT if static analysis could detect side effects in functions... What do you think? ü§Ø</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Tips For Distraction-Free Programming]]></title>
            <link href="/blog/2018/04/09/some-tips-for-distraction-free-programming"/>
            <updated>2018-04-09T17:00:00+00:00</updated>
            <id>/blog/2018/04/09/some-tips-for-distraction-free-programming</id>
            <content type="html"><![CDATA[<p>I'm very easily distracted. The slightest movement or conversation in the room takes my focus right away, not to mention the endless stream of information and notifications that e.g. services like Slack (team chat) and e-mail generate. I might be working on something with a colleague or on my own, when a simple notification pops in. My brain glitches for a moment while I process the notification and get back to where I was, but it's enough to completely lose focus. When pair programming with someone that isn't easily distracted, it's mostly fixed in an instant by getting back to the conversation or repeating the last question, but it's a lot more difficult when working on a feature alone. Over time I tried to change a few things to make this kind of interruptions less frequent or pervasive. Let's check some out:</p>

<h2 id="%F0%9F%8F%9D-environment">üèù Environment</h2>

<p>The room I'm working in has a huge impact on my concentration levels. People talking or walking around are direct hits, as is any movement in my surroundings, even behind me. This is mostly fixed in our case since we don't have an open floor plan, so we don't share rooms with other teams, and when it's noisy in the room next to ours, we can just close the door. To prevent people talking from disrupting my concentration and the other way around, I'll put on headphones when working alone (mostly to prevent myself from listening in on the conversation), and I'll move to another room when pair programming. I know it sounds antisocial and makes me less approachable for questions or consultation, but I try to only do this when there's noise.</p>

<h2 id="%F0%9F%93%B1-phone-%26-social-media">üì± Phone &amp; Social Media</h2>

<p>My phone is out of sight. When I get a message I will read it when I find the time. When someone calls me I mostly take the call. It might sound strange because we're a social media company, but I'm not logged in to any of my personal social media accounts during the day. This really helps me concentrate, because my Twitter timeline is a real timesink for me. If I'm looking at that, I'm certainly not concentrating üòè. For testing stuff, I'll aways use test accounts.</p>

<h2 id="%F0%9F%96%A5-full-screen-applications">üñ• Full Screen Applications</h2>

<p>Although I don't like Full Screen Applications, I started using them more and more. They hide anything that might be happening in other windows, covering unwanted distractions up until you switch to the other application. I still don't like the oversight that is taken away by using an app in Full Screen mode though. The cool thing for me specifically is that iTerm behaves a bit like a tiling window manager for me, since I do most of my development in Vim &amp; the terminal, using iTerm splits. A great tip there is that you can use <code>Cmd + Shift + Enter</code> in an iTerm split to make it appear Full Screen temporarily.</p>

<h2 id="%F0%9F%9B%8E-osx-notification-center">üõé OSX Notification center</h2>

<p><img src="/images/2018-04-09-some-tips-for-distraction-free-programming/1.png" alt="do not disturb" /></p>

<p>I already hinted at it earlier on, but notifications of any kind really disturb me. They pop over any fullscreen application that might be open, and I really can't help looking at them. This is why I set the <code>DO NOT DISTURB</code> mode on during workdays. You can configure Mac OSX to enable it by default during work hours, or you can do it manually when you notice being distracted. Notifications I get are mostly from Slack, Calendar and Mail. You can also configure this on a per-application basis in your System Preferences.</p>

<h2 id="%F0%9F%8E%88-osx-application-badges">üéà OSX Application Badges</h2>

<p><img src="/images/2018-04-09-some-tips-for-distraction-free-programming/2.png" alt="dock icons with badges" /></p>

<p>What's really annoying me is that Mac OS displays so-called "badges" -the red circle icons with a number in them- on applications that received notifications, and these badges are visible in the Dock and the Application Switcher (<code>Cmd + Tab</code>). When I'm switching to my browser, I don't want to see how many Slack messages I missed. I'll check those later. I just went to Notification Center in System Preferences and disabled these badges for Slack, Calendar and Mail. I believe that I can be more productive when I read these things periodically instead of during other tasks. In the screenshot above, I enabled them temporarily for Calendar to show you what I mean, but what you can't see is that I have 25+ unread messages in Slack. Don't worry, I'll read them after I get this blogpost out! üòâ</p>

<h2 id="%F0%9F%93%A2-slack">üì¢ Slack</h2>

<p>Some great things to do in Slack are to Leave channels you don't use, and to use the Mute üîá functionality on channels that are not urgent but you can't really leave. Of course, I disabled Slack's notification sounds by default.</p>

<p>I hope these tips were helpful, they certainly help me concentrate a bit better. If you think of anything else, comment below, I want to hear it! Happy pair programming!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lambda To The Rescue: Lists to wrap failure]]></title>
            <link href="/blog/2018/03/02/lambda-lists-to-wrap-failure"/>
            <updated>2018-03-02T11:00:00+00:00</updated>
            <id>/blog/2018/03/02/lambda-lists-to-wrap-failure</id>
            <content type="html"><![CDATA[<p><strong>This is the first post in a series about using Functional Programming concepts to make your Object Oriented code more comprehensible. Hang tight for more.</strong></p>

<h2 id="readability">Readability</h2>

<p>When we're reading code, one of the most important blocking factors is cognitive overhead. Minimize it, and your code instantly becomes easier to read and understand. Or is it the other way 'round? After some years of playing with functional programming languages in my spare time, I saw some things that functional programming does great in this field. One of them involves lists.</p>

<p>As you might know, lists are among the most important datastructures in functional programming, if not the most important. There's even a whole family of programming languages that took their name from them. Looking at you <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> üòò!</p>

<p>Let's dive in with a typical legacy PHP method discovered in the wild:</p>

<pre><code class="php">&lt;?php

function words($string)
{
    if (empty($string)) {
        return false;
    }

    return explode(' ', $string);
}

var_dump(words('')); // returns false
var_dump(words('foo bar baz')); // returns ['foo', 'bar', 'baz'];
</code></pre>

<p>The reason the <code>empty</code> check is there, apparently, is that <code>explode(' ', $s)</code> with an empty string will return <code>['']</code> a list with an empty string in it, which is really strange and non-desirable. Arguably, if the <code>$string</code> variable can't be empty, we should throw an exception. But let's say we want to explore our options here. Before I look into the body of a function, I always try to understand it as a black blox.</p>

<blockquote>
  <p>If I pass <code>words</code> a string, it returns an <code>array</code> of words in the string. Except that for empty strings, it will return <code>false</code>.</p>
</blockquote>

<p>Now, the "black box" already has some mystery to it. Why does it return <code>false</code>? Let's defer the answer to it, and check out if we can write the PHP7 type annotations for it.</p>

<pre><code class="php">function words(string $string): array
{
    // ...
}
</code></pre>

<p>Now, this is not correct. The exception that is made for empty strings can't be written as a type. In old-skool PHP they would've written a DocBlock like this:</p>

<pre><code class="php">/**
 * @param string $string
 * @return array|false depending on failure
 */
function words($string)
{
    // ...
}
</code></pre>

<p>But that is a type signature that is unrepresentable usinig PHP7 types. What if we would represent failure using an empty array?</p>

<pre><code class="php">function words(string $string): array
{
    if (empty($string)) {
        return array();
    }

    return explode(' ', $string);
}
</code></pre>

<p>Now the type signature just works. We turned "failure" into a valid result that we can work with. For instance, all code that works with the return value of this method can now just work with arrays. The type signature now tells a story about the function too:</p>

<blockquote>
  <p>If I pass <code>words</code> a string, it returns an <code>array</code> of words in the string.</p>
</blockquote>

<p>The base case where the string is empty is now logical: an empty string has no words, so a list of 0 words is returned.</p>

<h2 id="chaining-calls">Chaining calls</h2>

<p>Now, let's say we have a function <code>chars</code> that returns a list of chars in a string:</p>

<pre><code class="php">function chars(string $string): array
{
    if (empty($string)) {
        return array();
    }

    return str_split($string);
}
</code></pre>

<p>We're thinking we should be able to use this to list all the characters that appear within words. Would this work?</p>

<pre><code class="php">chars(words('foo bar baz'));
</code></pre>

<p>No... We get a fatal error <code>Fatal error: Uncaught TypeError: Argument 1 passed to chars() must be of the type string, array given</code>. Of course, the result of <code>words</code> is an array, which cannot be used as input to our <code>chars</code> function. Let's use <code>array_map</code>:</p>

<pre><code class="php">array_map(@chars, words('foo bar baz'));
</code></pre>

<p><em>don't worry about the <code>@</code>, it's a trick that I learned while working on <a href="https://github.com/mathiasverraes/lambdalicious/">lambdalicious</a>. <code>@</code> is PHP's error suppressing operator. In this case it allows us to write a function's name as a string, without using string notation, so that it's visually different from a string, BUT is interpreted by PHP as a string...</em></p>

<p>We get this:</p>

<pre><code class="php">[["f","o","o"],["b","a","r"],["b","a","z"]]
</code></pre>

<p>Of course, after mapping <code>chars</code> over the words, this is what we get... But actually, we wanted this:</p>

<pre><code class="php">["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>So how do we get there? We "flatten" the arrays by using <code>concat</code>, which does not exist in php. Let's write it ourselves:</p>

<pre><code class="php">function array_concat(array $arrays): array
{
    return call_user_func_array(
        @array_merge,
        array_merge(array(array()), $arrays)
    );
}
</code></pre>

<p>Now we can use it to flatten the array:</p>

<pre><code class="php">array_concat(array_map(@chars, words('foo bar baz')));
</code></pre>

<p>TADAAAA üòÜ We get what we wanted!</p>

<pre><code class="php">["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>Let's call this combination of <code>array_map</code> and <code>array_concat</code> <code>array_bind</code> for now:</p>

<pre><code class="php">function array_bind(array $array, $f)
{
    return array_concat(array_map($f, $array));
}
</code></pre>

<p><code>array_bind</code> takes an array of values, and a function that operates of one of those values and returns an array. It returns a new array of values.</p>

<pre><code class="php">array_bind(array_bind(array('foo bar baz'), @words), @chars);
// returns ["f","o","o","b","a","r","b","a","z"]
</code></pre>

<p>Now that we have the <code>array_bind</code> function, we can apply functions to something in an array, and the result will always be an array! What happens if we first bind <code>words</code> and then bind <code>chars</code> to an empty string?</p>

<pre><code class="php">array_bind(array_bind(array(''), @words), @chars); // returns []
</code></pre>

<p>We get an empty array back, which is great!</p>

<p>You saw me wrap the empty string in an array, to be able to use <code>array_bind</code>. This is an act of "providing context". The array serves as a context wrapper for results of the chained functions <code>words</code> and <code>chars</code>. We'll always get our result as an array. If anywhere in the process something fails, we get an empty array, otherwise we get an array with value(s) in it.</p>

<p>I must admit, this doesn't look really great. Let's take a look at how this works in <a href="https://www.haskell.org/">Haskell</a>, a pure functional language.</p>

<p>Now, this is the equivalent of what we wrote earlier on in PHP:</p>

<pre><code class="haskell">pure "" &gt;&gt;= words &gt;&gt;= chars
</code></pre>

<pre><code class="haskell">pure "foo bar baz" &gt;&gt;= words &gt;&gt;= chars
</code></pre>

<p>These return <code>[]</code> and <code>["f","o","o","b","a","r","b","a","z"]</code>, as expected, but how?</p>

<ul>
<li><code>pure</code> wraps the string in our "wrapper" list.</li>
<li><code>&gt;&gt;=</code> is the <code>bind</code> infix function; it takes the "wrapped" value on the left, and applies the function on the right to the wrapped value. It then returns a new wrapped value.</li>
<li><code>words</code> takes a <code>String</code> and returns a list of strings <code>[String]</code>, split by spaces. It's in Haskell's default module <code>Prelude</code>.</li>
<li><p><code>chars</code> is a function we made up, it takes a <code>String</code> and returns a list of strings <code>[String]</code>. By default, <code>String</code>s in Haskell are lists of <code>Char</code>s. To break up a given string in a list of strings that represent chars we need to map over the input string. The mapping function <code>(\x -&gt; [x])</code> gets a <code>Char</code> as input and returns a <code>String</code> by wrapping the given <code>Char</code> in a list; check it out:</p>

<pre><code class="haskell">chars :: String -&gt; [String]
chars s = map (\x -&gt; [x]) s
</code></pre></li>
</ul>

<p>As you can see, Haskell was made for this kind of stuff... It also reads a lot better than our PHP implementation.</p>

<h2 id="expanding-on-this-concept">Expanding on this concept</h2>

<p>The reason this doesn't really work in PHP is that we don't have infix operators at our disposal. I've seen <a href="https://github.com/phunkie/phunkie">libraries</a> that do something with method calls along these lines:</p>

<pre><code class="php">pure('foo bar baz')-&gt;bind(@words)-&gt;bind(@chars);
</code></pre>

<p>which already looks a lot better than what we came up with. Failure can be encapsulated. There's a lot less boilerplate code to read. There's no checking for empty arrays or failure, while it still behaves as we wanted.</p>

<ul>
<li><code>pure()</code> wraps the value in an object.</li>
<li><code>bind()</code> is equivalent to returning a new wrapper object with the result of the applied function to the previously wrapped value. Internally it could all work using <code>arrays</code>, but it could just as well be done differently.</li>
</ul>

<p>For now, we've always worked with functions that return a number of results, but this whole concept can just as well be used with functions that are supposed to return a single result, like integer division <code>div</code>:</p>

<pre><code class="php">function div(int $divident, int $divisor): WrappedValue
{
    if ($divisor === 0) {
        return nothing();
    }

    return pure(intdiv($divident, $divisor));
}
</code></pre>

<p>Now, we created an integer division function that doesn't throw <code>DivisionByZeroError</code> exceptions, but uses this system of <code>WrappedValue</code>s to wrap it's return value on success (using <code>pure</code>, equivalent to an array with a value) or on failure (using <code>nothing</code>, equivalent to an empty array). Now, if we want to square the result of this, we can just bind <code>square</code> to the result of the previous computation.</p>

<pre><code class="php">function square(int $number): WrappedValue
{
    return pure($number * $number);
}

var_dump(div(10, 2)-&gt;bind(@square)); // [25]
var_dump(div(10, 0)-&gt;bind(@square)); // []
</code></pre>

<p>As with the previous examples, we can now just focus on the order of computation, without the need to worry about failure in the in-between steps.</p>

<p>There are also ways to make this whole thing even more interesting by providing more info like error messages in case of failure.</p>

<h2 id="day-to-day-usage">Day-to-day usage</h2>

<p>I'm not saying this is perfect for everything in OOP by any means, but we might want to think about how we handle failure in our (legacy) systems. I sometimes see trees of exception handling and boolean/null-checks on return values. This is a third option (PHP doesn't have option types by default); In lots of ways, the classic <a href="https://en.wikipedia.org/wiki/Null_object_pattern">Null Object</a> pattern resembles this whole thing in a more Object Oriented way. In many functional programming languages this is actually the most widely used means of error handing. If you want to know more about it, I suggest reading up on <code>Functors</code>, <code>Applicatives</code>, and <code>Monads</code>. Scary names for new concepts, don't let them hold you back.</p>

<p>If you want to do the most simple and useful thing: think about how your functions behave. What goes in, what comes out? Writing the type annotations helps a lot. And of course, throwing exceptions is not a sin.</p>

<p>Happy programming y'aŒªŒª! üëã</p>

<h2 id="what%27s-next%3F">What's next?</h2>

<p>Upcoming <em>lambda to the rescue</em> posts will be linked here:</p>

<ul>
<li>Lists to wrap failure (this post)</li>
<li><a href="/blog/2018/06/04/lambda-pure-functions">Pure Functions</a></li>
<li><a href="/blog/2018/06/27/lambda-recursion">Recursion</a></li>
<li><a href="/blog/2018/10/08/lambda-monoids">Monoids</a></li>
<li>...</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Why Vim Doesn&#039;t Need Multiple Cursors]]></title>
            <link href="/blog/2018/02/21/why-vim-doesnt-need-multiple-cursors"/>
            <updated>2018-02-21T10:00:00+00:00</updated>
            <id>/blog/2018/02/21/why-vim-doesnt-need-multiple-cursors</id>
            <content type="html"><![CDATA[<p>We're back with a Vim Special! A lot of people that get to the point where they want to learn Vim often start looking for a plugin to do something like the Multiple Cursors feature that they're used to from other text editors. This post will try to show you why you don't need this feature in Vim.</p>

<p>Let's jump right in with the first basic feature that Vim provides us to make life simple.</p>

<h2 id="%60%3B.%60-repeat-movement%2C-repeat-command"><code>;.</code> Repeat movement, Repeat command</h2>

<p>As you know, almost all <em>movements</em> in Vim can be done efficiently and fast, using e.g. <code>h j k l w b e f t F T ( ) { }</code>. The cool thing is, Vim remembers the last movement you made and makes it available to repeat immediately using the <code>;</code> key. If you just jumped to the last word beginning with <code>I</code> by typing <code>FI</code>, you can jump back even more by using <code>;</code>.</p>

<p>Next up is the <em>command</em>. For instance, we want to lowercase the letter we jumped to: <code>gul</code>. Vim also remembers this command and makes it available using the dot operator: <code>.</code>.</p>

<p>You can now combine those to repeat movement and action over multiple occurences.</p>

<h2 id="%60%2F%60-search%2C-%60gn%60-text-object%2C-dot-operator"><code>/</code> Search, <code>gn</code> Text object, Dot operator</h2>

<p>If you want to combine the power of Vim's search with the dot operator, that's perfectly possible. Let's say you searched for <code>/ruby\|php\|python\|javascript\|java</code> and want to replace some of the matches with <code>Haskell</code>. Just jump to the first one using <code>n</code> and replace it using the <code>gn</code> text object, like this: <code>cgn</code> type <code>Haskell</code> and then hit <code>&lt;Esc&gt;</code>. Since <code>cgn</code> is a command, we can now use <code>.</code> the dot operator to repeat that. If you want to skip an occurrence or undo what you did you can use <code>n</code> and <code>u</code> respectively.</p>

<h2 id="search-%26-replace-with-confirm">Search &amp; Replace with confirm</h2>

<ul>
<li><p>You most probably know you can search &amp; replace in your whole file by using</p>

<pre><code>:%s/search goes here/replace goes here/g
</code></pre></li>
<li><p>or in a visual selection by making a visual selection using <code>v</code> or <code>V</code> and then typing</p>

<pre><code>:s/search goes here/replace goes here/g
</code></pre>

<p>you should see something like <code>:'&lt;, '&gt;s/search/replace/</code> which is again some Vim magic. <code>'&lt;</code> points to the beginning of the last visual select, and <code>'&gt;</code> to the end of it. The <code>,</code> that separates them is making a range of it. It's like saying <code>:1,5</code> if you want to do something with the first 5 lines of your file.</p></li>
</ul>

<p>Now, this is really nice, but you might want to skip some matches, or you want to be sure that you don't replace matches that you didn't want to replace. You can use the <code>c</code> modifier to your search, and Vim will ask you to confirm every match using <code>y</code> or <code>n</code>. E.g.:</p>

<pre><code>:'&lt;, '&gt;s/search/replace/gc
</code></pre>

<h2 id="visual-block-mode">Visual Block mode</h2>

<p>If the things you want to change are neatly aligned with each other, you can make a Visual Block change:</p>

<pre><code>point 1
point 2
point 3
point 4
</code></pre>

<p>I want to uppercase those first <code>p</code>'s of the words, and I want to make this an enumeration using <code>-</code>. Let's make a Visual Block selection in the beginning of those lines using <code>0&lt;C-v&gt;3j</code> and then use <code>U</code> to uppercase the first letters. Then <code>gv</code> to go back to the visual select and <code>I- &lt;Esc&gt;</code> to make the enumeration happen.</p>

<pre><code>- Point 1
- Point 2
- Point 3
- Point 4
</code></pre>

<h2 id="macro%27s">Macro's</h2>

<p>If you need to do more than just a few inserts or updates on multiple lines or more complicated edits in json, for instance, Vim's macro's can really come in handy. They allow you to "record" a sequence of edits and movements, and replay that sequence as many times as you want. Let's see how we can use this to convert some copied JSON to a PHP array:</p>

<pre><code class="json">{
    "foo": "bar",
    "baz": "qux",
    "vim": "sexy",
    "rest": "lazy"
}
</code></pre>

<ul>
<li>We'll start with the cursor on the first <code>:</code> of the file. We'll start recording to register <code>i</code> by pressing <code>qi</code>.</li>
<li>As a standard practice, and to increase our chances to reproduce this on the following lines, the first thing I do is move the cursor to the first character of the row: <code>^</code>.</li>
<li>Then, we'll replace the double quotes we're on with single quotes using <code>r'</code> and look for the next one using <code>f"</code>. This can now be repeated using the dot operator <code>.</code> and the repeat movement operator <code>;</code>.</li>
<li>We return to the <code>:</code> by using <code>F:</code> and replace it with <code>=&gt;</code> by issuing this command: <code>cw =&gt;</code></li>
<li>We did all changes to the first line, so we can end our recording by going to the next line using <code>j</code> (again, to increase our chances of repeating this easily), and ending the recording with <code>q</code>.</li>
<li>repeating this is as easy as executing the register <code>i</code> to which we recorded this using <code>@i</code>. You can also use a multiplyer if you need to do this 100 times: <code>100@i</code>.</li>
</ul>

<p>We now have</p>

<pre><code>{
    'foo' =&gt; 'bar',
    'baz' =&gt; 'qux',
    'vim' =&gt; 'sexy',
    'rest' =&gt; 'lazy'
}
</code></pre>

<p>Changing the brackets to PHP's <code>array()</code> should be easy.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hear you: you now need to learn 5 different ways of doing replaces which could all be solved by using multiple cursors. But all of these have some great benefits. They are deliberately executed on a piece of text, you can undo them easily (and one by one), and they are faster and less error-prone than multiple cursors (when you know them by heart). Also, Vim's autocompletion keeps working when using them, as opposed to all multiple cursor plugins that I've tried.</p>

<p>That said, I still have <a href="https://github.com/terryma/vim-multiple-cursors">a multiple cursors plugin</a> installed, for when I'm doing pair programming.</p>

<p>Have fun Vimming! üéπ‚å®Ô∏è</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Wishful Development]]></title>
            <link href="/blog/2018/02/05/wishful-development"/>
            <updated>2018-02-05T14:00:00+00:00</updated>
            <id>/blog/2018/02/05/wishful-development</id>
            <content type="html"><![CDATA[<p>In this blogpost I'm going to try and explain the main way I solve problems by delaying things that I don't want to think about at the time that I'm solving them. I use "wishful thinking" for that (hence the title of this blog post), but I guess this could also be called <em>Interface Discovery</em>. Let's look at a specific problem:
For the CoffeeRun application that we used as an example in <a href="/blog/2017/11/15/refactoring-to-collections/">previous posts</a>, we want to make a tool that compares prices of a given drink between a list of shops in our neighbourhood. What's interesting to us is the comparison logic:</p>

<ol>
<li>We ask the tool to find the cheapest {drink of a certain type}</li>
<li>The tool shows us the cheapest coffee shop in our neighbourhood where we can get a {drink of that type}</li>
</ol>

<h2 id="wishful-thinking">Wishful Thinking</h2>

<p>Let's write that in a very na√Øve way: I wish there was a comparison class with a method to find the cheapest drink.</p>

<pre><code class="php">final class CompareCoffeeShops
{
    public function findCheapest(Drink $drink): CoffeeShop
    {
        $cheapestShop = array_reduce(
            $this-&gt;shops,
            function($cheapestShop, $nextShop) use ($drink) {
                $cheapestPrice = $cheapestShop-&gt;getPriceFor($drink);
                $nextPrice = $nextShop-&gt;getPriceFor($drink);

                if ($nextPrice-&gt;lowerThan($cheapestPrice)) {
                    return $nextShop;
                }

                return $cheapestShop;
            },
            reset($this-&gt;shops)
        );

        return $cheapestShop;
    }
}
</code></pre>

<p>We just made assumptions about <em>everything</em>. Let's see.</p>

<ol>
<li><p>We assumed there was a <code>Drink</code> class. There wasn't, so let's make it happen:</p>

<pre><code class="php">final class Drink
{
    private $name;

    public function __construct(string $name)
    {
        $this-&gt;name = $name;
    }
}
</code></pre></li>
<li><p>We assumed there was a list of coffee shops, oops, there was no such thing. Let's fix that by adding a constructor parameter:</p>

<pre><code class="php">final class CompareCoffeeShops
{
    private $shops;

    public function __construct(array $shops)
    {
        $this-&gt;shops = $shops;
    }

    public function findCheapest(Drink $drink): CoffeeShop
    {
        // ...
    }
}
</code></pre></li>
<li><p>Each <code>CoffeeShop</code> in the list seems to have a <code>getPriceFor(Drink)</code> method which returns a <code>Price</code>...</p>

<pre><code class="php">interface CoffeeShop
{
    public function getPriceFor(Drink $drink): Price;
}
</code></pre></li>
<li><p>Talking about <code>Price</code>, how do prices look? They certainly seem to have a <code>lowerThan(Price)</code> method</p>

<pre><code class="php">final class Price
{
    private $price;

    public function __construct(int $price)
    {
        $this-&gt;price = $price;
    }

    public function lowerThan(Price $other): bool
    {
        return $this-&gt;price &lt; $other-&gt;price;
    }
}
</code></pre></li>
</ol>

<p>Let's write a test too:</p>

<pre><code class="php">&lt;?php

use PHPUnit\Framework\TestCase;

class CompareCoffeeShopsTest extends TestCase
{
    public function test_it_finds_the_cheapest_cappuccino()
    {
        $shop1 = $this-&gt;createMock('CoffeeShop');
        $shop1-&gt;method('getPriceFor')-&gt;willReturn(new Price(200));

        $shop2 = $this-&gt;createMock('CoffeeShop');
        $shop2-&gt;method('getPriceFor')-&gt;willReturn(new Price(195));

        $shop3 = $this-&gt;createMock('CoffeeShop');
        $shop3-&gt;method('getPriceFor')-&gt;willReturn(new Price(250));

        $shops = array($shop1, $shop2, $shop3);

        $comparisons = new CompareCoffeeShops($shops);

        $cheapest = $comparisons-&gt;findCheapest(new Drink('Cappuccino'));

        $this-&gt;assertEquals($shop2, $cheapest);
    }
}
</code></pre>

<p>Wait, what? The test passes! (I know, I know, it's not complete...)</p>

<h2 id="why-is-this-great%3F">Why is this great?</h2>

<p>We just tested and implemented most of the comparison logic through "wishful thinking" (although in a very na√Øve way). The details about looking up the real prices of a cappuccino in all shops in our neighbourhood were left out. We didn't need them! We actually wrote the most important thing first, how to compare drinks in multiple shops and find the cheapest place to buy our cappuccino! Nothing even hints at trying to scrape their websites (god forbid) and we can actually give up on that temporarily and implement a hardcoded list of shops and their inventories until we find the courage needed to scrape coffeeshop websites üò±!</p>

<p>In fact, look at the interface that we need to implement to get this to work:</p>

<pre><code class="php">interface CoffeeShop
{
    public function getPriceFor(Drink $drink): Price;
}
</code></pre>

<p>It's so simple! We could implement this however we want, e.g. have some shops with hardcoded inventories, others with webscrapers. None of our code needs to know about the specific implementation of the shops, it already knows about the available methods. And as a bonus, we didn't write any code we didn't need.</p>

<p>Think about it: if you can imagine it, it already works. Have fun programming! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some insights regarding Value Objects]]></title>
            <link href="/blog/2018/01/22/some-insights-regarding-value-objects"/>
            <updated>2018-01-22T15:00:00+00:00</updated>
            <id>/blog/2018/01/22/some-insights-regarding-value-objects</id>
            <content type="html"><![CDATA[<p>We've been using Value Objects more and more over the years, and although there's a lot of info out there, there are some things that we found particularly interesting to talk about in a blog post.</p>

<h2 id="what%27s-a-value-object%3F">What's a Value Object?</h2>

<p>Value Objects are simply put <em>objects that represent a value</em>, i.e. objects that don't have an identity except for the value they represent. Very frequently used examples are <code>Money</code> (if someone owes me ‚Ç¨5 and they pay me ‚Ç¨2 + ‚Ç¨2 + ‚Ç¨1 I'm happy) and <code>DateTime</code>, but there are lots of things that would qualify. For instance, combined values like a <code>TimeSlot</code> which comprises of two <code>DateTime</code> objects <code>start</code> and <code>end</code>, which is equal to another <code>TimeSlot</code> object if both <code>start</code> and <code>end</code> for both <code>TimeSlot</code> objects are equal. Or points in a 2D plane with <code>x</code> and <code>y</code> coordinates, where -you guessed it- two points are equal if both points have the same <code>x</code> and <code>y</code> coordinates.</p>

<p>A lot of people wonder why they should use Value Objects, instead of passing around primitive values. Let's take some user input in the form of a telephone number, and treat it as a <code>String</code>. We want to pass it around in our code. Somewhere in our code there's a function that expects a telephone number as a parameter. How can it be sure that we passed a telephone number? It can't... Since we're just passing around a <code>String</code>, it needs to do some checks: Does the string look like a telephone number? Does it have a valid country code? etc. The next function that takes a telephone number as a parameter needs to do these checks again. There are some rules about what makes a valid telephone number, which can't be encapsulated in the <code>String</code> representation. If we make a specialized object to represent that phone number, we we can check these rules upon creation of the object, and thus prevent invalid state before it occurs. If some part of our code now gets that <code>PhoneNumber</code> object, it can be sure that it's a valid phone number.</p>

<h2 id="yes%2C-value-objects-should-be-immutable">Yes, Value Objects should be immutable</h2>

<p>Earlier we said that <code>DateTime</code> is a Value Object. Since a <code>DateTime</code> is just a value, once it is instantiated it should represent that value. Let's check something out:</p>

<pre><code class="php">$noon1 = new DateTime('today noon');
$noon2 = new DateTime('today noon');
var_dump($noon1 == $noon2); // bool(true)

$noon3 = $noon1-&gt;modify('+ 2 hours');

var_dump($noon1 == $noon2); // bool(false)
</code></pre>

<p>What happened? I instantiated two <code>DateTime</code> objects that were equal to each other, representing "today at noon". I created a third <code>DateTime</code> object that should represent "today, two hours later than noon". After that, one of the objects that represented "noon" a second ago doesn't anymore. It's like saying: "here you have a 3", and when you start calculating with it, it changed to a 4. This essentially teleported us to another universe where 3 means 4 suddenly.</p>

<p>The reason this happened is because of the fact that the <code>-&gt;modify()</code> call mutates the <code>DateTime</code> object. If we prevent our objects from being changed (make them immutable), they will become a lot safer to work with. In this regard, you should probably always use <a href="https://secure.php.net/manual/en/class.datetimeimmutable.php"><code>DateTimeImmutable</code></a>.</p>

<h2 id="how-to-introduce-a-value-object%3F">How to introduce a Value Object?</h2>

<p>Let's say we have some code that takes a user's <a href="https://help.twitter.com/en/managing-your-account/twitter-username-rules">Twitter handle</a> to perform some operations:</p>

<pre><code class="php">final class Twitter
{
    public function publicTimelineFor(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return timeline
    }

    public function tweepsFollowing(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return followers
    }

    /**
     * @param string $handle
     *
     * @throws InvalidArgumentException when not valid
     */
    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }
}
</code></pre>

<p>The <code>assertValidTwitterHandle()</code> must happen in every call that uses the concept of a Twitter handle, but it's so easy to forget when you write a new function! Also, it's impossible to know if a given string has been approved in a previous call. If you now call <code>publicTimelineFor($handle)</code> and <code>tweepsFollowing($handle)</code> in succession for the same <code>$handle</code>, you're basically repeating yourself for no reason. Let's refactor this!</p>

<p>The first thing that you want to do is make sure you get your code under test (it should already be that way üòò). What I like to do in this case, is at least have some tests for what a "valid Twitter handle" means. Since I'll be working towards an object that can only represent a valid Twitter handle, I'll make the <code>private</code> assertion <code>public</code>, write some unit tests against the assertion, and be done with it. We'll change the test later on.</p>

<pre><code class="php">class TwitterHandleTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        $this-&gt;twitter = new Twitter();
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function test_it_throws_when_longer_than_16_chars()
    {
        $this-&gt;twitter-&gt;assertValidTwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
    }

    // Tests for other rules go here too
    // - handle is a string and should start with '@'
    // - handle contains only uppercase chars, lowercase chars, digits and underscores
    // - make sure to provide some happy path cases as well
    // - you can of course use data providers in your tests to test multiple examples per test
}
</code></pre>

<p>Then create a very basic class for our Value Object:</p>

<pre><code class="php">final class TwitterHandle
{
    private $handle;

    public function __construct(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        $this-&gt;handle = $handle;
    }

    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }

    public function __toString(): string
    {
        return $this-&gt;handle;
    }
}
</code></pre>

<p>As you can see I created a basic class with the Twitter handle as a string as a constructor parameter. If we use the class as a string, it will cast to the exact Twitter handle as a string that we got as input. This is a temporary measure. I then just moved the <code>assertValidTwitterHandle()</code> method from the <code>Twitter</code> class to <code>TwitterHandle</code>, and made it private. I can fix my tests by just using the constructor of the <code>TwitterHandle</code> class as entry point:</p>

<pre><code class="php">/**
 * @expectedException InvalidArgumentException
 */
public function test_it_throws_when_longer_than_16_chars()
{
    new TwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
}
</code></pre>

<p>The code that used to work with handlers in the string form can now easily be changed to accept our object:</p>

<pre><code class="php">public function publicTimelineFor(TwitterHandle $handle)
{
    // ... fetch &amp; return timeline
}
</code></pre>

<p>As you can see, we just typehint on the Value Object in the function definition, and since the <code>__toString()</code> method is defined to return the same string as we had before, everything just keeps working. With the one perk that the check for valid handles is gone from all our functions! We don't need it anymore, since it's now impossible to pass an invalid handle to them! Now you just need to handle the case of the invalid Twitter handle the moment you get it from the user.</p>

<p>As a final measure, I make sure that the output from the <code>__toString()</code> method can always be parsed back into the same Value Object again, by just giving it to the constructor. In this case that means that I need to return the complete value that the object was instantiated with (which is already the case). If you're tempted to use the <code>__toString()</code> method for other presentational purposes, <a href="http://verraes.net/2013/02/2013-02-16-casting-value_objects/#1-dont-use-_tostring-for-presentation">you're advised to create a specific function for that</a>.</p>

<h2 id="comparing-value-objects">Comparing Value Objects</h2>

<p>Let's say we want to represent points in a <code>x</code> by <code>y</code> two-dimentional plane using a <code>Point</code> Value Object. We've got something like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }
}
</code></pre>

<p>Comparing two of these <code>Point</code>s for equality is easy. We can just use PHP's built-in <code>==</code>, which will compare the objects by the values of their properties (exactly what we want for now).</p>

<pre><code class="php">$c1 = new Point(10, 20);
$c2 = new Point(10, 30);
$c3 = new Point(10, 20);

var_dump($c1 == $c2); // false
var_dump($c1 == $c3); // true
</code></pre>

<p>This gets more complicated when we want to e.g. calculate the distance between two <code>Point</code>s. Aren't those <code>x</code> and <code>y</code> properties private to the object?</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }
}
</code></pre>

<p>Yes. But since these are two objects of the same type, they can access each other private properties! The code above just works! Be careful though, that you don't change any properties (and therefore make the objects mutable...).</p>

<h2 id="nested-value-objects">Nested Value Objects</h2>

<p>With the <code>Point</code> Value Object that we defined above, we can go a little bit further and represent other things in 2D planes, e.g. line segments, which are defined by two points A and B:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }
}
</code></pre>

<p>As you can see, we just created a Value Object that encapsulates two other Value Objects. This is great, we can successfully represent a <code>LineSegment</code> with this, but there's a problem with this:</p>

<p>The math (the domain in this case) tells us that two line segments are equal if they have the same delimiting points. In our case, we called them <code>$a</code> and <code>$b</code>, but actually, the order is not important. This means the <code>==</code> check I described above won't work like this:</p>

<pre><code class="php">$pointA = new Point(0, 0);
$pointB = new Point(5, 5);

$line1 = new LineSegment($pointA, $pointB);
$line2 = new LineSegment($pointB, $pointA);

var_dump($line1 == $line2); // false
</code></pre>

<p>We can solve that problem using an <code>equals()</code> method:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }

    public function equals(LineSegment $other): bool
    {
        return ($this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b)
            || ($this-&gt;a == $other-&gt;b &amp;&amp; $this-&gt;b == $other-&gt;a);
    }
}
</code></pre>

<p>This can now be used to compare lines, but the <code>==</code> still gives wrong results. This is the point where I tell you <code>==</code> is not the best thing to use with Objects in PHP. You cannot override it, or make it work in all cases. It actually breaks encapsulation and checks private properties of objects. But we still want to make it work so that if it gets used instead of the <code>equals()</code> method, nothing breaks. We can then use a rule in our static analysis tools to check for <code>==</code> used with our object. We can make the <code>==</code> work using a fixed order in which point A and B get assigned inside <code>LineSegment</code>'s constructor:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    // ...
}
</code></pre>

<p>Our <code>Point</code> objects now need the <code>greaterThan()</code> method, which can be implemented a bit like this:</p>

<pre><code class="php">final class Point
{
    // ...

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}
</code></pre>

<p>Now we can simplify <code>LineSegment</code>'s <code>equals()</code> method, since <code>$a</code> and <code>$b</code> will be assigned in order:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }

    // ...
}
</code></pre>

<p>Even though we don't want people to use <code>==</code> with our <code>LineSegment</code> Value Object, we made it work. Like this, we can prevent unexpected errors in our code. The final code looks like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}

final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }
}
</code></pre>

<p>If we wanted to represent the nested Value Objects as a string, e.g. to be able to save them in a field in the database, we could just make the <code>Point</code> represent itself as <code>(x, y)</code> and the <code>LineSegment</code> as <code>[(Xa, Ya), (Xb, Yb)]</code> by letting the <code>LineSegment</code>'s <code>__toString</code> method call that of the nested <code>Point</code> objects. For parsing the string representation back into a <code>LineSegment</code>, we'll need a <code>fromString()</code> <a href="http://verraes.net/2014/06/named-constructors-in-php/">alternative constructor</a> that can parse those strings and instantiate the correct objects for them, but I'll leave that as an exercise for the reader!</p>

<p>So, these were our take-aways after introducing Value Objects into our codebase. Did we forget something?</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Our Favorite Content Of 2017]]></title>
            <link href="/blog/2017/12/22/our-favorite-content-of-2017"/>
            <updated>2017-12-22T14:30:00+00:00</updated>
            <id>/blog/2017/12/22/our-favorite-content-of-2017</id>
            <content type="html"><![CDATA[<p>As a team, we consume A LOT of blog posts, YouTube videos, podcasts, and tweets about software development and related topics each year. We asked everyone in the team to share their favorite stuff that they found online, so that you can read it too. Here we go!</p>

<h1 id="people-%26-community">People &amp; Community</h1>

<p><img src="https://media.giphy.com/media/pTY9EtkiakcU/giphy.gif" alt="The Blind" /></p>

<h3 id="in-the-kingdom-of-the-blind"><a href="https://bridgetkromhout.com/blog/in-the-kingdom-of-the-blind/">In The Kingdom Of The Blind</a></h3>

<blockquote>
  <p>As you can imagine, there are plenty of reasons that under-represented people in tech aren't going to jump the second your event's CFP opens. But submissions will pour in nonetheless... from the folks whose (devrel/marketing/field engineer) vendor job includes public speaking (and on-the-job time to fine-tune their abstracts). And spoiler alert, many of them will fall into the majority cis het white male demographic.</p>
</blockquote>

<p>Ursula recommends this for the great ideas on how to improve diversity at conferences, and an excellent candid overview of the reasons why underrepresented minorities do not speak at or attend tech conferences as often.</p>

<h3 id="we-fired-our-top-talent.-best-decision-we-ever-made."><a href="https://medium.freecodecamp.org/we-fired-our-top-talent-best-decision-we-ever-made-4c0a99728fde">We fired our top talent. Best decision we ever made.</a></h3>

<blockquote>
  <p>Your team's strength is not a function of the talent of individual members. It's a function of their collaboration, tenacity, and mutual respect.</p>
</blockquote>

<p>Hans likes this because when there's a smart guy around, you'll find it tempting to just go ask him instead of trying to do the research yourself and learn something new. He doesn't like developers who think that they know everything. They don't. In fact, you'll never know everything. Sharing knowledge and working together as a team is something we should focus on instead. Each person has their own strengths.</p>

<h3 id="the-myth-of-the-%22cool-tech-girl%22"><a href="https://code.likeagirl.io/the-myth-of-the-cool-tech-girl-7868fa63769b">The myth of the "cool tech girl"</a></h3>

<blockquote>
  <p>Don't reward good behaviour with scotch, don't tap kegs at 12pm, and don't host video game or ping pong tournaments. Don't call your employees "rockstars". Shine a harsh light on some of your internal slack channels. If your company doesn't perpetuate the kind of culture that makes women feel like they need to be 'one of the boys', they won't need the coping mechanism of the "cool tech girl".</p>
</blockquote>

<p>Ursula has seen this type of behaviour from women in tech in many countries. "I would almost go as far as to say that if you don't fit into the 'cool tech girl' box, it's difficult to survive. As a woman in tech I think you have a responsibility to speak up for diversity in the industry. It's really hard, and it's great to hear viewpoints that identify that."</p>

<h1 id="engineering">Engineering</h1>

<p><img src="https://pbs.twimg.com/media/C3G2KYAWYAEj9km.jpg" alt="Stickies on the wall kind of engineering" /></p>

<h3 id="transactions-redefined"><a href="https://www.youtube.com/watch?v=NqKNqIsB8_k">Transactions Redefined</a></h3>

<blockquote>
  <p>Event Storming is my pizza, you can add your toppings, as long as it's not database tables or pineapple</p>
</blockquote>

<p>Toon recommends this because Alberto Brandolini is a great speaker, and his vision on Domain Driven Design and software development in general is really clear and deep. He goes a long way to understand the business, and the problems associated with the business. He goes out of his way to find out how he can solve them.</p>

<h3 id="modern-software-over-engineering-mistakes"><a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8">Modern Software Over-Engineering Mistakes</a></h3>

<blockquote>
  <p>Duplication is better than the wrong abstraction</p>
</blockquote>

<p>Jurriaan likes this because too much of technical literature is about how you should start doing things, and how everything you‚Äôve done in the past is probably wrong. This article captures the essence of trying to architect real-life development projects.</p>

<h3 id="kubernetes-at-github"><a href="https://githubengineering.com/kubernetes-at-github/">Kubernetes at Github</a></h3>

<blockquote>
  <p>With a self-service application provisioning workflow in place, SRE can devote more of our time to delivering infrastructure products to the rest of the engineering organisation in support of our best practices, building toward a faster and more resilient GitHub experience for everyone.</p>
</blockquote>

<p>Jeffry liked this because everybody and their dog are rethinking how to do platform now that the technology to do so has matured. This write-up from Github offers a great look into the decision making and preparation that goes into gradually building up confidence. He gives the author additional points for sprinkling snippets of inspiration throughout the post: e.g. chatops-rpc to make our hubot do more than offer drunk commentary, Kelsey Hightower's "Kubernetes the hard way" which he has set his mind to working through over the holidays, flipper and mission control bar and simulating kernel panics with sysrq-trigger.</p>

<h1 id="think-differently">Think Differently</h1>

<p><img src="https://media.giphy.com/media/ximCDHoBlx4UU/giphy.gif" alt="Excel on mobile, epic experience" /></p>

<h3 id="exploring-time"><a href="https://www.youtube.com/watch?v=Zm95cYAtAa8">Exploring Time</a></h3>

<blockquote>
  <p>It‚Äôs impossible to know if this talk started on time</p>
</blockquote>

<p>Toon recommends this because Eric Evans uses his own Domain Driven Design to explore better ways to think about time. Very inspiring. He shows how "generic" subdomains of software development are not generally "solved problems", and how you can make a difference there, as a programmer.</p>

<h3 id="clojure-for-the-brave-and-true"><a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/">Clojure for the Brave and True</a></h3>

<blockquote>
  <p>Humor has a certain relationship to seriousness. It is appropriate to joke about serious things, but only after the right amount of time has passed. For example, it took years for me to be able to crack a smile when I remember my favorite uncle‚Äôs last words: "Hold my beer".</p>
  
  <p>I'm so proud of you, little teapot. You've run your first Clojure program! Not only that, but you've become acquainted with the REPL, one of the most important tools for developing Clojure software. Amazing!</p>
</blockquote>

<p>Niek thinks this book is a hilarious and down-to-earth explanation of yet another programming language to learn. Clojure is a Lisp dialect and will melt your brain with its elegance!</p>

<h3 id="you-suck-at-excel"><a href="https://www.youtube.com/watch?v=0nbkaYsR94c">You Suck At Excel</a></h3>

<blockquote>
  <p>This material is -I guess- kinda like basic to intermediate, but for you all it's going to be stupid hard, so try paying attention and don't slow me down.</p>
</blockquote>

<p>Toon enjoyed this because this guy solves real world problems for people using Excel. "I learned a 100 things from seeing him work like this." He knows Excel inside out.</p>

<h3 id="lemme-tell-you-about-the-most-successful-program-i-ever-wrote"><a href="https://twitter.com/revin/status/940700486117634050">Lemme tell you about the most successful program I ever wrote</a></h3>

<h6 id="twitter-thread">(twitter thread)</h6>

<blockquote>
  <p>It was the first time I genuinely understood that users don't care how something is implemented; they care how it makes them feel</p>
</blockquote>

<p>Hans thinks we put so much effort in making our application code clean and future-proof while just a tiny poorly written program (that works) can make someone really happy. Software can seem magical for some people.</p>

<h1 id="big-data">Big Data</h1>

<p><img src="https://media.giphy.com/media/xydGi3nSTlkqs/giphy.gif" alt="Ben Stiller as Big Data" /></p>

<h3 id="wat-als-tomorrowland-alles-met-je-data-en-privacy-zou-mogen-doen%3F"><a href="https://medium.com/@ransbottyn/wat-als-tomorrowland-alles-met-je-data-en-privacy-zou-mogen-doen-e25a703668b4">Wat als Tomorrowland alles met je data en privacy zou mogen doen?</a></h3>

<blockquote>
  <p>Zo'n bracelet (gelinkt aan je identiteitsbewijs trouwens) is dus een mes dat aan twee kanten snijdt: handig, maar misschien ook de reden waarom u de volgende keer net iets minder "gewenst" bent.</p>
</blockquote>

<p>Jasper likes this because it's incredible how much data a festival organizer track and save about you with just a bracelet, and also, what they (can possibly) do with it.</p>

<h3 id="deep-learning-for-chatbots"><a href="http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/">Deep Learning for Chatbots</a></h3>

<blockquote>
  <p>Generative models are an active area of research, but we‚Äôre not quite there yet. If you want to build a conversational agent today your best bet is most likely a retrieval-based model.</p>
</blockquote>

<p>Niek checked this out because it was exactly the right content for his reply suggestions adventure, a feature he is working on for CX Social.</p>

<p>Those were our highlights for 2017, let us know if we missed something!</p>
]]></content>
        </entry>
    </feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/tags/Development.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-02-21T08:32:10+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Why Vim Doesn&#039;t Need Multiple Cursors]]></title>
            <link href="/blog/2018/02/21/why-vim-doesnt-need-multiple-cursors"/>
            <updated>2018-02-21T10:00:00+00:00</updated>
            <id>/blog/2018/02/21/why-vim-doesnt-need-multiple-cursors</id>
            <content type="html"><![CDATA[<p>We're back with a Vim Special! A lot of people that get to the point where they want to learn Vim often start looking for a plugin to do something like the Multiple Cursors feature that they're used to from other text editors. This post will try to show you why you don't need this feature in Vim.</p>

<p>Let's jump right in with the first basic feature that Vim provides us to make life simple.</p>

<h2 id="%60%3B.%60-repeat-movement%2C-repeat-command"><code>;.</code> Repeat movement, Repeat command</h2>

<p>As you know, almost all <em>movements</em> in Vim can be done efficiently and fast, using e.g. <code>h j k l w b e f t F T ( ) { }</code>. The cool thing is, Vim remembers the last movement you made and makes it available to repeat immediately using the <code>;</code> key. If you just jumped to the last word beginning with <code>I</code> by typing <code>FI</code>, you can jump back even more by using <code>;</code>.</p>

<p>Next up is the <em>command</em>. For instance, we want to lowercase the letter we jumped to: <code>gul</code>. Vim also remembers this command and makes it available using the dot operator: <code>.</code>.</p>

<p>You can now combine those to repeat movement and action over multiple occurences.</p>

<h2 id="%60%2F%60-search%2C-%60gn%60-text-object%2C-dot-operator"><code>/</code> Search, <code>gn</code> Text object, Dot operator</h2>

<p>If you want to combine the power of Vim's search with the dot operator, that's perfectly possible. Let's say you searched for <code>/ruby\|php\|python\|javascript\|java</code> and want to replace some of the matches with <code>Haskell</code>. Just jump to the first one using <code>n</code> and replace it using the <code>gn</code> text object, like this: <code>cgn</code> type <code>Haskell</code> and then hit <code>&lt;Esc&gt;</code>. Since <code>cgn</code> is a command, we can now use <code>.</code> the dot operator to repeat that. If you want to skip an occurrence or undo what you did you can use <code>n</code> and <code>u</code> respectively.</p>

<h2 id="search-%26-replace-with-confirm">Search &amp; Replace with confirm</h2>

<ul>
<li><p>You most probably know you can search &amp; replace in your whole file by using</p>

<pre><code>:%s/search goes here/replace goes here/g
</code></pre></li>
<li><p>or in a visual selection by making a visual selection using <code>v</code> or <code>V</code> and then typing</p>

<pre><code>:s/search goes here/replace goes here/g
</code></pre>

<p>you should see something like <code>:'&lt;, '&gt;s/search/replace/</code> which is again some Vim magic. <code>'&lt;</code> points to the beginning of the last visual select, and <code>'&gt;</code> to the end of it. The <code>,</code> that separates them is making a range of it. It's like saying <code>:1,5</code> if you want to do something with the first 5 lines of your file.</p></li>
</ul>

<p>Now, this is really nice, but you might want to skip some matches, or you want to be sure that you don't replace matches that you didn't want to replace. You can use the <code>c</code> modifier to your search, and Vim will ask you to confirm every match using <code>y</code> or <code>n</code>. E.g.:</p>

<pre><code>:'&lt;, '&gt;s/search/replace/gc
</code></pre>

<h2 id="visual-block-mode">Visual Block mode</h2>

<p>If the things you want to change are neatly aligned with each other, you can make a Visual Block change:</p>

<pre><code>point 1
point 2
point 3
point 4
</code></pre>

<p>I want to uppercase those first <code>p</code>'s of the words, and I want to make this an enumeration using <code>-</code>. Let's make a Visual Block selection in the beginning of those lines using <code>0&lt;C-v&gt;3j</code> and then use <code>U</code> to uppercase the first letters. Then <code>gv</code> to go back to the visual select and <code>I- &lt;Esc&gt;</code> to make the enumeration happen.</p>

<pre><code>- Point 1
- Point 2
- Point 3
- Point 4
</code></pre>

<h2 id="macro%27s">Macro's</h2>

<p>If you need to do more than just a few inserts or updates on multiple lines or more complicated edits in json, for instance, Vim's macro's can really come in handy. They allow you to "record" a sequence of edits and movements, and replay that sequence as many times as you want. Let's see how we can use this to convert some copied JSON to a PHP array:</p>

<pre><code class="json">{
    "foo": "bar",
    "baz": "qux",
    "vim": "sexy",
    "rest": "lazy"
}
</code></pre>

<ul>
<li>We'll start with the cursor on the first <code>:</code> of the file. We'll start recording to register <code>i</code> by pressing <code>qi</code>.</li>
<li>As a standard practice, and to increase our chances to reproduce this on the following lines, the first thing I do is move the cursor to the first character of the row: <code>^</code>.</li>
<li>Then, we'll replace the double quotes we're on with single quotes using <code>r'</code> and look for the next one using <code>f"</code>. This can now be repeated using the dot operator <code>.</code> and the repeat movement operator <code>;</code>.</li>
<li>We return to the <code>:</code> by using <code>F:</code> and replace it with <code>=&gt;</code> by issuing this command: <code>cw =&gt;</code></li>
<li>We did all changes to the first line, so we can end our recording by going to the next line using <code>j</code> (again, to increase our chances of repeating this easily), and ending the recording with <code>q</code>.</li>
<li>repeating this is as easy as executing the register <code>i</code> to which we recorded this using <code>@i</code>. You can also use a multiplyer if you need to do this 100 times: <code>100@i</code>.</li>
</ul>

<p>We now have</p>

<pre><code>{
    'foo' =&gt; 'bar',
    'baz' =&gt; 'qux',
    'vim' =&gt; 'sexy',
    'rest' =&gt; 'lazy'
}
</code></pre>

<p>Changing the brackets to PHP's <code>array()</code> should be easy.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hear you: you now need to learn 5 different ways of doing replaces which could all be solved by using multiple cursors. But all of these have some great benefits. They are deliberately executed on a piece of text, you can undo them easily (and one by one), and they are faster and less error-prone than multiple cursors (when you know them by heart). Also, Vim's autocompletion keeps working when using them, as opposed to all multiple cursor plugins that I've tried.</p>

<p>That said, I still have <a href="https://github.com/terryma/vim-multiple-cursors">a multiple cursors plugin</a> installed, for when I'm doing pair programming.</p>

<p>Have fun Vimming! üéπ‚å®Ô∏è</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Wishful Development]]></title>
            <link href="/blog/2018/02/05/wishful-development"/>
            <updated>2018-02-05T14:00:00+00:00</updated>
            <id>/blog/2018/02/05/wishful-development</id>
            <content type="html"><![CDATA[<p>In this blogpost I'm going to try and explain the main way I solve problems by delaying things that I don't want to think about at the time that I'm solving them. I use "wishful thinking" for that (hence the title of this blog post), but I guess this could also be called <em>Interface Discovery</em>. Let's look at a specific problem:
For the CoffeeRun application that we used as an example in <a href="/blog/2017/11/15/refactoring-to-collections/">previous posts</a>, we want to make a tool that compares prices of a given drink between a list of shops in our neighbourhood. What's interesting to us is the comparison logic:</p>

<ol>
<li>We ask the tool to find the cheapest {drink of a certain type}</li>
<li>The tool shows us the cheapest coffee shop in our neighbourhood where we can get a {drink of that type}</li>
</ol>

<h2 id="wishful-thinking">Wishful Thinking</h2>

<p>Let's write that in a very na√Øve way: I wish there was a comparison class with a method to find the cheapest drink.</p>

<pre><code class="php">final class CompareCoffeeShops
{
    public function findCheapest(Drink $drink): CoffeeShop
    {
        $cheapestShop = array_reduce(
            $this-&gt;shops,
            function($cheapestShop, $nextShop) use ($drink) {
                $cheapestPrice = $cheapestShop-&gt;getPriceFor($drink);
                $nextPrice = $nextShop-&gt;getPriceFor($drink);

                if ($nextPrice-&gt;lowerThan($cheapestPrice)) {
                    return $nextShop;
                }

                return $cheapestShop;
            },
            reset($this-&gt;shops)
        );

        return $cheapestShop;
    }
}
</code></pre>

<p>We just made assumptions about <em>everything</em>. Let's see.</p>

<ol>
<li><p>We assumed there was a <code>Drink</code> class. There wasn't, so let's make it happen:</p>

<pre><code class="php">final class Drink
{
    private $name;

    public function __construct(string $name)
    {
        $this-&gt;name = $name;
    }
}
</code></pre></li>
<li><p>We assumed there was a list of coffee shops, oops, there was no such thing. Let's fix that by adding a constructor parameter:</p>

<pre><code class="php">final class CompareCoffeeShops
{
    private $shops;

    public function __construct(array $shops)
    {
        $this-&gt;shops = $shops;
    }

    public function findCheapest(Drink $drink): CoffeeShop
    {
        // ...
    }
}
</code></pre></li>
<li><p>Each <code>CoffeeShop</code> in the list seems to have a <code>getPriceFor(Drink)</code> method which returns a <code>Price</code>...</p>

<pre><code class="php">interface CoffeeShop
{
    public function getPriceFor(Drink $drink): Price;
}
</code></pre></li>
<li><p>Talking about <code>Price</code>, how do prices look? They certainly seem to have a <code>lowerThan(Price)</code> method</p>

<pre><code class="php">final class Price
{
    private $price;

    public function __construct(int $price)
    {
        $this-&gt;price = $price;
    }

    public function lowerThan(Price $other): bool
    {
        return $this-&gt;price &lt; $other-&gt;price;
    }
}
</code></pre></li>
</ol>

<p>Let's write a test too:</p>

<pre><code class="php">&lt;?php

use PHPUnit\Framework\TestCase;

class CompareCoffeeShopsTest extends TestCase
{
    public function test_it_finds_the_cheapest_cappuccino()
    {
        $shop1 = $this-&gt;createMock('CoffeeShop');
        $shop1-&gt;method('getPriceFor')-&gt;willReturn(new Price(200));

        $shop2 = $this-&gt;createMock('CoffeeShop');
        $shop2-&gt;method('getPriceFor')-&gt;willReturn(new Price(195));

        $shop3 = $this-&gt;createMock('CoffeeShop');
        $shop3-&gt;method('getPriceFor')-&gt;willReturn(new Price(250));

        $shops = array($shop1, $shop2, $shop3);

        $comparisons = new CompareCoffeeShops($shops);

        $cheapest = $comparisons-&gt;findCheapest(new Drink('Cappuccino'));

        $this-&gt;assertEquals($shop2, $cheapest);
    }
}
</code></pre>

<p>Wait, what? The test passes! (I know, I know, it's not complete...)</p>

<h2 id="why-is-this-great%3F">Why is this great?</h2>

<p>We just tested and implemented most of the comparison logic through "wishful thinking" (although in a very na√Øve way). The details about looking up the real prices of a cappuccino in all shops in our neighbourhood were left out. We didn't need them! We actually wrote the most important thing first, how to compare drinks in multiple shops and find the cheapest place to buy our cappuccino! Nothing even hints at trying to scrape their websites (god forbid) and we can actually give up on that temporarily and implement a hardcoded list of shops and their inventories until we find the courage needed to scrape coffeeshop websites üò±!</p>

<p>In fact, look at the interface that we need to implement to get this to work:</p>

<pre><code class="php">interface CoffeeShop
{
    public function getPriceFor(Drink $drink): Price;
}
</code></pre>

<p>It's so simple! We could implement this however we want, e.g. have some shops with hardcoded inventories, others with webscrapers. None of our code needs to know about the specific implementation of the shops, it already knows about the available methods. And as a bonus, we didn't write any code we didn't need.</p>

<p>Think about it: if you can imagine it, it already works. Have fun programming! üññ</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some insights regarding Value Objects]]></title>
            <link href="/blog/2018/01/22/some-insights-regarding-value-objects"/>
            <updated>2018-01-22T15:00:00+00:00</updated>
            <id>/blog/2018/01/22/some-insights-regarding-value-objects</id>
            <content type="html"><![CDATA[<p>We've been using Value Objects more and more over the years, and although there's a lot of info out there, there are some things that we found particularly interesting to talk about in a blog post.</p>

<h2 id="what%27s-a-value-object%3F">What's a Value Object?</h2>

<p>Value Objects are simply put <em>objects that represent a value</em>, i.e. objects that don't have an identity except for the value they represent. Very frequently used examples are <code>Money</code> (if someone owes me ‚Ç¨5 and they pay me ‚Ç¨2 + ‚Ç¨2 + ‚Ç¨1 I'm happy) and <code>DateTime</code>, but there are lots of things that would qualify. For instance, combined values like a <code>TimeSlot</code> which comprises of two <code>DateTime</code> objects <code>start</code> and <code>end</code>, which is equal to another <code>TimeSlot</code> object if both <code>start</code> and <code>end</code> for both <code>TimeSlot</code> objects are equal. Or points in a 2D plane with <code>x</code> and <code>y</code> coordinates, where -you guessed it- two points are equal if both points have the same <code>x</code> and <code>y</code> coordinates.</p>

<p>A lot of people wonder why they should use Value Objects, instead of passing around primitive values. Let's take some user input in the form of a telephone number, and treat it as a <code>String</code>. We want to pass it around in our code. Somewhere in our code there's a function that expects a telephone number as a parameter. How can it be sure that we passed a telephone number? It can't... Since we're just passing around a <code>String</code>, it needs to do some checks: Does the string look like a telephone number? Does it have a valid country code? etc. The next function that takes a telephone number as a parameter needs to do these checks again. There are some rules about what makes a valid telephone number, which can't be encapsulated in the <code>String</code> representation. If we make a specialized object to represent that phone number, we we can check these rules upon creation of the object, and thus prevent invalid state before it occurs. If some part of our code now gets that <code>PhoneNumber</code> object, it can be sure that it's a valid phone number.</p>

<h2 id="yes%2C-value-objects-should-be-immutable">Yes, Value Objects should be immutable</h2>

<p>Earlier we said that <code>DateTime</code> is a Value Object. Since a <code>DateTime</code> is just a value, once it is instantiated it should represent that value. Let's check something out:</p>

<pre><code class="php">$noon1 = new DateTime('today noon');
$noon2 = new DateTime('today noon');
var_dump($noon1 == $noon2); // bool(true)

$noon3 = $noon1-&gt;modify('+ 2 hours');

var_dump($noon1 == $noon2); // bool(false)
</code></pre>

<p>What happened? I instantiated two <code>DateTime</code> objects that were equal to each other, representing "today at noon". I created a third <code>DateTime</code> object that should represent "today, two hours later than noon". After that, one of the objects that represented "noon" a second ago doesn't anymore. It's like saying: "here you have a 3", and when you start calculating with it, it changed to a 4. This essentially teleported us to another universe where 3 means 4 suddenly.</p>

<p>The reason this happened is because of the fact that the <code>-&gt;modify()</code> call mutates the <code>DateTime</code> object. If we prevent our objects from being changed (make them immutable), they will become a lot safer to work with. In this regard, you should probably always use <a href="https://secure.php.net/manual/en/class.datetimeimmutable.php"><code>DateTimeImmutable</code></a>.</p>

<h2 id="how-to-introduce-a-value-object%3F">How to introduce a Value Object?</h2>

<p>Let's say we have some code that takes a user's <a href="https://help.twitter.com/en/managing-your-account/twitter-username-rules">Twitter handle</a> to perform some operations:</p>

<pre><code class="php">final class Twitter
{
    public function publicTimelineFor(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return timeline
    }

    public function tweepsFollowing(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        // ... fetch &amp; return followers
    }

    /**
     * @param string $handle
     *
     * @throws InvalidArgumentException when not valid
     */
    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }
}
</code></pre>

<p>The <code>assertValidTwitterHandle()</code> must happen in every call that uses the concept of a Twitter handle, but it's so easy to forget when you write a new function! Also, it's impossible to know if a given string has been approved in a previous call. If you now call <code>publicTimelineFor($handle)</code> and <code>tweepsFollowing($handle)</code> in succession for the same <code>$handle</code>, you're basically repeating yourself for no reason. Let's refactor this!</p>

<p>The first thing that you want to do is make sure you get your code under test (it should already be that way üòò). What I like to do in this case, is at least have some tests for what a "valid Twitter handle" means. Since I'll be working towards an object that can only represent a valid Twitter handle, I'll make the <code>private</code> assertion <code>public</code>, write some unit tests against the assertion, and be done with it. We'll change the test later on.</p>

<pre><code class="php">class TwitterHandleTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        $this-&gt;twitter = new Twitter();
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function test_it_throws_when_longer_than_16_chars()
    {
        $this-&gt;twitter-&gt;assertValidTwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
    }

    // Tests for other rules go here too
    // - handle is a string and should start with '@'
    // - handle contains only uppercase chars, lowercase chars, digits and underscores
    // - make sure to provide some happy path cases as well
    // - you can of course use data providers in your tests to test multiple examples per test
}
</code></pre>

<p>Then create a very basic class for our Value Object:</p>

<pre><code class="php">final class TwitterHandle
{
    private $handle;

    public function __construct(string $handle)
    {
        $this-&gt;assertValidTwitterHandle($handle);

        $this-&gt;handle = $handle;
    }

    private function assertValidTwitterHandle(string $handle)
    {
        // check the rules here, throw exception if not valid
    }

    public function __toString(): string
    {
        return $this-&gt;handle;
    }
}
</code></pre>

<p>As you can see I created a basic class with the Twitter handle as a string as a constructor parameter. If we use the class as a string, it will cast to the exact Twitter handle as a string that we got as input. This is a temporary measure. I then just moved the <code>assertValidTwitterHandle()</code> method from the <code>Twitter</code> class to <code>TwitterHandle</code>, and made it private. I can fix my tests by just using the constructor of the <code>TwitterHandle</code> class as entry point:</p>

<pre><code class="php">/**
 * @expectedException InvalidArgumentException
 */
public function test_it_throws_when_longer_than_16_chars()
{
    new TwitterHandle('@VeryVeryVeryLongHandleThatShouldThrow');
}
</code></pre>

<p>The code that used to work with handlers in the string form can now easily be changed to accept our object:</p>

<pre><code class="php">public function publicTimelineFor(TwitterHandle $handle)
{
    // ... fetch &amp; return timeline
}
</code></pre>

<p>As you can see, we just typehint on the Value Object in the function definition, and since the <code>__toString()</code> method is defined to return the same string as we had before, everything just keeps working. With the one perk that the check for valid handles is gone from all our functions! We don't need it anymore, since it's now impossible to pass an invalid handle to them! Now you just need to handle the case of the invalid Twitter handle the moment you get it from the user.</p>

<p>As a final measure, I make sure that the output from the <code>__toString()</code> method can always be parsed back into the same Value Object again, by just giving it to the constructor. In this case that means that I need to return the complete value that the object was instantiated with (which is already the case). If you're tempted to use the <code>__toString()</code> method for other presentational purposes, <a href="http://verraes.net/2013/02/2013-02-16-casting-value_objects/#1-dont-use-_tostring-for-presentation">you're advised to create a specific function for that</a>.</p>

<h2 id="comparing-value-objects">Comparing Value Objects</h2>

<p>Let's say we want to represent points in a <code>x</code> by <code>y</code> two-dimentional plane using a <code>Point</code> Value Object. We've got something like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }
}
</code></pre>

<p>Comparing two of these <code>Point</code>s for equality is easy. We can just use PHP's built-in <code>==</code>, which will compare the objects by the values of their properties (exactly what we want for now).</p>

<pre><code class="php">$c1 = new Point(10, 20);
$c2 = new Point(10, 30);
$c3 = new Point(10, 20);

var_dump($c1 == $c2); // false
var_dump($c1 == $c3); // true
</code></pre>

<p>This gets more complicated when we want to e.g. calculate the distance between two <code>Point</code>s. Aren't those <code>x</code> and <code>y</code> properties private to the object?</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }
}
</code></pre>

<p>Yes. But since these are two objects of the same type, they can access each other private properties! The code above just works! Be careful though, that you don't change any properties (and therefore make the objects mutable...).</p>

<h2 id="nested-value-objects">Nested Value Objects</h2>

<p>With the <code>Point</code> Value Object that we defined above, we can go a little bit further and represent other things in 2D planes, e.g. line segments, which are defined by two points A and B:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }
}
</code></pre>

<p>As you can see, we just created a Value Object that encapsulates two other Value Objects. This is great, we can successfully represent a <code>LineSegment</code> with this, but there's a problem with this:</p>

<p>The math (the domain in this case) tells us that two line segments are equal if they have the same delimiting points. In our case, we called them <code>$a</code> and <code>$b</code>, but actually, the order is not important. This means the <code>==</code> check I described above won't work like this:</p>

<pre><code class="php">$pointA = new Point(0, 0);
$pointB = new Point(5, 5);

$line1 = new LineSegment($pointA, $pointB);
$line2 = new LineSegment($pointB, $pointA);

var_dump($line1 == $line2); // false
</code></pre>

<p>We can solve that problem using an <code>equals()</code> method:</p>

<pre><code class="php">final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;
    }

    public function equals(LineSegment $other): bool
    {
        return ($this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b)
            || ($this-&gt;a == $other-&gt;b &amp;&amp; $this-&gt;b == $other-&gt;a);
    }
}
</code></pre>

<p>This can now be used to compare lines, but the <code>==</code> still gives wrong results. This is the point where I tell you <code>==</code> is not the best thing to use with Objects in PHP. You cannot override it, or make it work in all cases. It actually breaks encapsulation and checks private properties of objects. But we still want to make it work so that if it gets used instead of the <code>equals()</code> method, nothing breaks. We can then use a rule in our static analysis tools to check for <code>==</code> used with our object. We can make the <code>==</code> work using a fixed order in which point A and B get assigned inside <code>LineSegment</code>'s constructor:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    // ...
}
</code></pre>

<p>Our <code>Point</code> objects now need the <code>greaterThan()</code> method, which can be implemented a bit like this:</p>

<pre><code class="php">final class Point
{
    // ...

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}
</code></pre>

<p>Now we can simplify <code>LineSegment</code>'s <code>equals()</code> method, since <code>$a</code> and <code>$b</code> will be assigned in order:</p>

<pre><code class="php">final class LineSegment
{
    // ...

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }

    // ...
}
</code></pre>

<p>Even though we don't want people to use <code>==</code> with our <code>LineSegment</code> Value Object, we made it work. Like this, we can prevent unexpected errors in our code. The final code looks like this:</p>

<pre><code class="php">final class Point
{
    private $x;
    private $y;

    public function __construct(int $x, int $y)
    {
        $this-&gt;x = $x;
        $this-&gt;y = $y;
    }

    public function distanceTo(Point $other): float
    {
        return sqrt(pow($this-&gt;x - $other-&gt;x, 2) + pow($this-&gt;y - $other-&gt;y, 2));
    }

    public function greaterThan(Point $other): bool
    {
        if ($this-&gt;x == $other-&gt;x) {
            return $this-&gt;y &gt; $other-&gt;y;
        }

        return $this-&gt;x &gt; $other-&gt;x;
    }
}

final class LineSegment
{
    private $a;
    private $b;

    public function __construct(Point $a, Point $b)
    {
        $this-&gt;a = $a;
        $this-&gt;b = $b;

        if ($a-&gt;greaterThan($b)) {
            $this-&gt;a = $b;
            $this-&gt;b = $a;
        }
    }

    public function equals(LineSegment $other): bool
    {
        return $this-&gt;a == $other-&gt;a &amp;&amp; $this-&gt;b == $other-&gt;b;
    }
}
</code></pre>

<p>If we wanted to represent the nested Value Objects as a string, e.g. to be able to save them in a field in the database, we could just make the <code>Point</code> represent itself as <code>(x, y)</code> and the <code>LineSegment</code> as <code>[(Xa, Ya), (Xb, Yb)]</code> by letting the <code>LineSegment</code>'s <code>__toString</code> method call that of the nested <code>Point</code> objects. For parsing the string representation back into a <code>LineSegment</code>, we'll need a <code>fromString()</code> <a href="http://verraes.net/2014/06/named-constructors-in-php/">alternative constructor</a> that can parse those strings and instantiate the correct objects for them, but I'll leave that as an exercise for the reader!</p>

<p>So, these were our take-aways after introducing Value Objects into our codebase. Did we forget something?</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Our Favorite Content Of 2017]]></title>
            <link href="/blog/2017/12/22/our-favorite-content-of-2017"/>
            <updated>2017-12-22T14:30:00+00:00</updated>
            <id>/blog/2017/12/22/our-favorite-content-of-2017</id>
            <content type="html"><![CDATA[<p>As a team, we consume A LOT of blog posts, YouTube videos, podcasts, and tweets about software development and related topics each year. We asked everyone in the team to share their favorite stuff that they found online, so that you can read it too. Here we go!</p>

<h1 id="people-%26-community">People &amp; Community</h1>

<p><img src="https://media.giphy.com/media/pTY9EtkiakcU/giphy.gif" alt="The Blind" /></p>

<h3 id="in-the-kingdom-of-the-blind"><a href="https://bridgetkromhout.com/blog/in-the-kingdom-of-the-blind/">In The Kingdom Of The Blind</a></h3>

<blockquote>
  <p>As you can imagine, there are plenty of reasons that under-represented people in tech aren't going to jump the second your event's CFP opens. But submissions will pour in nonetheless... from the folks whose (devrel/marketing/field engineer) vendor job includes public speaking (and on-the-job time to fine-tune their abstracts). And spoiler alert, many of them will fall into the majority cis het white male demographic.</p>
</blockquote>

<p>Ursula recommends this for the great ideas on how to improve diversity at conferences, and an excellent candid overview of the reasons why underrepresented minorities do not speak at or attend tech conferences as often.</p>

<h3 id="we-fired-our-top-talent.-best-decision-we-ever-made."><a href="https://medium.freecodecamp.org/we-fired-our-top-talent-best-decision-we-ever-made-4c0a99728fde">We fired our top talent. Best decision we ever made.</a></h3>

<blockquote>
  <p>Your team's strength is not a function of the talent of individual members. It's a function of their collaboration, tenacity, and mutual respect.</p>
</blockquote>

<p>Hans likes this because when there's a smart guy around, you'll find it tempting to just go ask him instead of trying to do the research yourself and learn something new. He doesn't like developers who think that they know everything. They don't. In fact, you'll never know everything. Sharing knowledge and working together as a team is something we should focus on instead. Each person has their own strengths.</p>

<h3 id="the-myth-of-the-%22cool-tech-girl%22"><a href="https://code.likeagirl.io/the-myth-of-the-cool-tech-girl-7868fa63769b">The myth of the "cool tech girl"</a></h3>

<blockquote>
  <p>Don't reward good behaviour with scotch, don't tap kegs at 12pm, and don't host video game or ping pong tournaments. Don't call your employees "rockstars". Shine a harsh light on some of your internal slack channels. If your company doesn't perpetuate the kind of culture that makes women feel like they need to be 'one of the boys', they won't need the coping mechanism of the "cool tech girl".</p>
</blockquote>

<p>Ursula has seen this type of behaviour from women in tech in many countries. "I would almost go as far as to say that if you don't fit into the 'cool tech girl' box, it's difficult to survive. As a woman in tech I think you have a responsibility to speak up for diversity in the industry. It's really hard, and it's great to hear viewpoints that identify that."</p>

<h1 id="engineering">Engineering</h1>

<p><img src="https://pbs.twimg.com/media/C3G2KYAWYAEj9km.jpg" alt="Stickies on the wall kind of engineering" /></p>

<h3 id="transactions-redefined"><a href="https://www.youtube.com/watch?v=NqKNqIsB8_k">Transactions Redefined</a></h3>

<blockquote>
  <p>Event Storming is my pizza, you can add your toppings, as long as it's not database tables or pineapple</p>
</blockquote>

<p>Toon recommends this because Alberto Brandolini is a great speaker, and his vision on Domain Driven Design and software development in general is really clear and deep. He goes a long way to understand the business, and the problems associated with the business. He goes out of his way to find out how he can solve them.</p>

<h3 id="modern-software-over-engineering-mistakes"><a href="https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8">Modern Software Over-Engineering Mistakes</a></h3>

<blockquote>
  <p>Duplication is better than the wrong abstraction</p>
</blockquote>

<p>Jurriaan likes this because too much of technical literature is about how you should start doing things, and how everything you‚Äôve done in the past is probably wrong. This article captures the essence of trying to architect real-life development projects.</p>

<h3 id="kubernetes-at-github"><a href="https://githubengineering.com/kubernetes-at-github/">Kubernetes at Github</a></h3>

<blockquote>
  <p>With a self-service application provisioning workflow in place, SRE can devote more of our time to delivering infrastructure products to the rest of the engineering organisation in support of our best practices, building toward a faster and more resilient GitHub experience for everyone.</p>
</blockquote>

<p>Jeffry liked this because everybody and their dog are rethinking how to do platform now that the technology to do so has matured. This write-up from Github offers a great look into the decision making and preparation that goes into gradually building up confidence. He gives the author additional points for sprinkling snippets of inspiration throughout the post: e.g. chatops-rpc to make our hubot do more than offer drunk commentary, Kelsey Hightower's "Kubernetes the hard way" which he has set his mind to working through over the holidays, flipper and mission control bar and simulating kernel panics with sysrq-trigger.</p>

<h1 id="think-differently">Think Differently</h1>

<p><img src="https://media.giphy.com/media/ximCDHoBlx4UU/giphy.gif" alt="Excel on mobile, epic experience" /></p>

<h3 id="exploring-time"><a href="https://www.youtube.com/watch?v=Zm95cYAtAa8">Exploring Time</a></h3>

<blockquote>
  <p>It‚Äôs impossible to know if this talk started on time</p>
</blockquote>

<p>Toon recommends this because Eric Evans uses his own Domain Driven Design to explore better ways to think about time. Very inspiring. He shows how "generic" subdomains of software development are not generally "solved problems", and how you can make a difference there, as a programmer.</p>

<h3 id="clojure-for-the-brave-and-true"><a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/">Clojure for the Brave and True</a></h3>

<blockquote>
  <p>Humor has a certain relationship to seriousness. It is appropriate to joke about serious things, but only after the right amount of time has passed. For example, it took years for me to be able to crack a smile when I remember my favorite uncle‚Äôs last words: "Hold my beer".</p>
  
  <p>I'm so proud of you, little teapot. You've run your first Clojure program! Not only that, but you've become acquainted with the REPL, one of the most important tools for developing Clojure software. Amazing!</p>
</blockquote>

<p>Niek thinks this book is a hilarious and down-to-earth explanation of yet another programming language to learn. Clojure is a Lisp dialect and will melt your brain with its elegance!</p>

<h3 id="you-suck-at-excel"><a href="https://www.youtube.com/watch?v=0nbkaYsR94c">You Suck At Excel</a></h3>

<blockquote>
  <p>This material is -I guess- kinda like basic to intermediate, but for you all it's going to be stupid hard, so try paying attention and don't slow me down.</p>
</blockquote>

<p>Toon enjoyed this because this guy solves real world problems for people using Excel. "I learned a 100 things from seeing him work like this." He knows Excel inside out.</p>

<h3 id="lemme-tell-you-about-the-most-successful-program-i-ever-wrote"><a href="https://twitter.com/revin/status/940700486117634050">Lemme tell you about the most successful program I ever wrote</a></h3>

<h6 id="twitter-thread">(twitter thread)</h6>

<blockquote>
  <p>It was the first time I genuinely understood that users don't care how something is implemented; they care how it makes them feel</p>
</blockquote>

<p>Hans thinks we put so much effort in making our application code clean and future-proof while just a tiny poorly written program (that works) can make someone really happy. Software can seem magical for some people.</p>

<h1 id="big-data">Big Data</h1>

<p><img src="https://media.giphy.com/media/xydGi3nSTlkqs/giphy.gif" alt="Ben Stiller as Big Data" /></p>

<h3 id="wat-als-tomorrowland-alles-met-je-data-en-privacy-zou-mogen-doen%3F"><a href="https://medium.com/@ransbottyn/wat-als-tomorrowland-alles-met-je-data-en-privacy-zou-mogen-doen-e25a703668b4">Wat als Tomorrowland alles met je data en privacy zou mogen doen?</a></h3>

<blockquote>
  <p>Zo'n bracelet (gelinkt aan je identiteitsbewijs trouwens) is dus een mes dat aan twee kanten snijdt: handig, maar misschien ook de reden waarom u de volgende keer net iets minder "gewenst" bent.</p>
</blockquote>

<p>Jasper likes this because it's incredible how much data a festival organizer track and save about you with just a bracelet, and also, what they (can possibly) do with it.</p>

<h3 id="deep-learning-for-chatbots"><a href="http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/">Deep Learning for Chatbots</a></h3>

<blockquote>
  <p>Generative models are an active area of research, but we‚Äôre not quite there yet. If you want to build a conversational agent today your best bet is most likely a retrieval-based model.</p>
</blockquote>

<p>Niek checked this out because it was exactly the right content for his reply suggestions adventure, a feature he is working on for CX Social.</p>

<p>Those were our highlights for 2017, let us know if we missed something!</p>
]]></content>
        </entry>
    </feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Clarabridge Engage Dev Blog]]></title>
    <link href="/blog/tags/Unit Tests.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-04-29T15:43:26+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A few tips for making your code easier to reason about]]></title>
            <link href="/blog/2020/10/05/a-few-tips-for-making-your-code-easier-to-reason-about"/>
            <updated>2020-10-05T14:30:00+00:00</updated>
            <id>/blog/2020/10/05/a-few-tips-for-making-your-code-easier-to-reason-about</id>
            <content type="html"><![CDATA[<p>It's been a long time since the last post! In <a href="/blog/2018/03/02/lambda-lists-to-wrap-failure/">previous posts</a>, we already discussed some strategies for making our code easier to reason about by looking at Functional Programming concepts and integrating them in our own workflow. In this post, we go at the problem from a more traditional perspective and look at a few small things that can make our lives a lot easier (as well as the lives of the other people that need to check out our code)!</p>

<h2 id="%F0%9F%8D%8D-%F0%9F%99%85%E2%80%8D%E2%99%82%EF%B8%8F-%F0%9F%8D%95-make-invalid-state-impossible-to-represent">üçç üôÖ‚Äç‚ôÇÔ∏è üçï Make invalid state impossible to represent</h2>

<p>Let's say we are building an app that lets people order coffee from a local coffee shop. They pick the product they want to order from a list, and they have to put in the number of items they want to order (the quantity) per product that they picked.</p>

<p>You could write something like</p>

<pre><code class="php">$cart-&gt;add(new ProductId('001-esspresso'), 3);
</code></pre>

<p>If you wanted to buy three Espressos.</p>

<p>The problem with this, is that we can easily pass a faulty value to that function:</p>

<pre><code class="php">$cart-&gt;add(new ProductId('001-esspresso'), 0);
</code></pre>

<p>or</p>

<pre><code class="php">$cart-&gt;add(new ProductId('001-esspresso'), -2);
</code></pre>

<p>or even</p>

<pre><code class="php">$cart-&gt;add(new ProductId('001-esspresso'), 3.14);
</code></pre>

<p>This can become a problem later on, for instance when we are calculating the price of the order. This means that our method needs to guard against faulty input values here, but it's impossible to know from the outside of the method if it does it or not. This will throw an exception:</p>

<pre><code class="php">$cart-&gt;add(new ProductId('001-esspresso'), -2);
</code></pre>

<p>But you don't know that. You need to go and look inside that method to know for sure. Also, you don't know <em>when</em> it will throw...</p>

<p>PHP's type system could be of help in some cases (e.g. to prevent the float value, we could typehint for an integer), but in this case, we're missing a concept: <code>Quantity</code> which is a Value Object that represents the exact value that we need, a positive integer that's bigger than zero.</p>

<p>The method now only accepts instances of that object, which means it doesn't need to do any additional checks.</p>

<pre><code class="php">public function add(ProductId $id, Quantity $quantity): void
{
    // ...
}
</code></pre>

<p>What's more, every time we pass a <code>Quantity</code> around, or when we are passed one, it's guaranteed to be a verified correct value:</p>

<pre><code class="php">final class Quantity
{
    private $quantity;

    public function __construct(int $quantity): Quantity
    {
        $this-&gt;assertBiggerThanZero($quantity);

        $this-&gt;quantity = $quantity;
    }

    private function assertBiggerThanZero(int $quantity): void
    {
        if ($quantity &lt;= 0) {
            throw new InvalidArgumentException('Quantity should be bigger than zero');
        }
    }
}
</code></pre>

<h2 id="%F0%9F%A4%96-%E2%9E%A1%EF%B8%8F--%F0%9F%98%81--using-annotation-and-static-analysis-to-our-advantage">ü§ñ ‚û°Ô∏è  üòÅ  Using annotation and static analysis to our advantage</h2>

<p>It's good to <em>know</em> that the <code>Quantity</code> object is a Value Object, because this makes it easy to reason about: it behaves like a value, it's immutable. Knowing this, you can forget about passing by reference and other headaches. It's even better if you can let other developers know:</p>

<pre><code class="php">/**
 * @immutable
 */
final class Quantity
{
    // ...
}
</code></pre>

<p>You can get even more out of it, if you use <a href="https://psalm.dev/">psalm</a>. You can let psalm guard this property for you: if someone would add a method to the <code>Quantity</code> class that made it mutable, your tests would start failing:</p>

<pre><code class="php">/**
 * @psalm-immutable
 */
final class Quantity
{
    // ...
}
</code></pre>

<p>At this point, you can be pretty sure that no mutation is going to happen. You can also annotate functions/methods like this to let others (and psalm) know that the function is "pure":</p>

<pre><code class="php">/**
 * @psalm-pure
 */
public function addOneFreeCoffee(Quantity $quantity): Quantity
{
    return new Quantity($quantity-&gt;toInt() + 1);
}
</code></pre>

<p>This annotation makes it impossible to do anything in the body of this method that changes state, or even generates output. It becomes a lot easier to reason about this function: if you give it input <code>a</code>, it will always return output <code>b</code>. It won't magically pull out some random value, or a record from a database. It's <em>transparent</em>.</p>

<h2 id="%E2%9C%85-%E2%9E%A1%EF%B8%8F--%F0%9F%93%96-your-tests-are-domain-expectations">‚úÖ ‚û°Ô∏è  üìñ Your tests are domain expectations</h2>

<p>Tests are often used as "a way to make sure our code works". While I don't disagree with that, I think good tests are way more valuable than that. If you're working in a Test-Driven manner, they provide confidence and flow during development. They help you to do safe refactors. But also, they document your code. Let's look at an example, would you rather find this:</p>

<pre><code class="php">/**
 * @test
 */
public function shippingIsFreeWhenYouOrderThreeOrMoreProductsAtLeastOneBigLatte()
{
    $cart = new Cart();

    $cart-&gt;add(new ProductId('001-esspresso'), new Quantity(2));
    $cart-&gt;add(new ProductId('002-lungo'), new Quantity(3));
    $cart-&gt;add(new ProductId('003-latte-big'), new Quantity(1));

    $cart-&gt;checkout();

    $this-&gt;assertTrue($cart-&gt;freeShipping())
}
</code></pre>

<p>or this:</p>

<pre><code class="php">/**
 * @test
 */
public function shippingIsFreeWhenYouOrderThreeOrMoreProductsAtLeastOneBigLatte()
{
    $cart = new Cart();

    $cart = $this-&gt;givenTheCartContainsThreeOrMoreProducts($cart);
    $cart = $this-&gt;andTheCartContainsOneOrMoreBigLattes($cart);

    $cart = $this-&gt;whenTheCartIsCheckedOut($cart);

    $this-&gt;thenShippingShouldBeFree($cart);
}
</code></pre>

<p>When you look at the first example, the domain rule is expressed in the name of the test only, the test code itself doesn't help you in understanding the actual rule that we're testing. You can see how the <code>Cart</code> is used, but you'll have a harder time finding out or validating what the actual rule is that's being tested. In the second example, there's no chance of missing the domain rule. The domain language is used to express the problem as if you were talking about it. It's a bit harder to see how the <code>Cart</code> is used, but it's easy to click through to the implementation of those methods to see the actual implementations.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Using three simple concepts, we can give our brains a bit of rest when looking at the code because they don't need to keep as much information in "working memory" to understand it.
I hope these tips will help you to make your code easier to grasp for yourself and your coworkers! Hope to see you for the next post!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some tips for better PHPUnit tests]]></title>
            <link href="/blog/2017/08/01/tips-for-better-phpunit-tests"/>
            <updated>2017-08-01T10:00:00+00:00</updated>
            <id>/blog/2017/08/01/tips-for-better-phpunit-tests</id>
            <content type="html"><![CDATA[<p>Writing good unit tests can be a pain. When you write your tests superfluously, you're testing more than the single unit, and they start failing with reasons not related to the <em>Subject Under Test (SUT)</em>. Or your tests become unreadable, and you can't figure out what they were supposed to be testing. Or they test only the one situation where everything goes according to plan, and not possible errors. Of course we want to mitigate all that! Let's see some simple tips to keep your test suite clean and working all the time.</p>

<h2 id="test-the-unhappy-path-first">Test the unhappy path first</h2>

<p>You could've sworn that your test was complete, but there seem to be exceptional cases that you missed. When writing unit tests -and doing TDD in particular- thinking about what might go wrong is very important: how should your unit fail, and when? What should happen when it fails? Should it throw exceptions? If you start with this, you won't forget to do it, and you'll write more robust code as a side-effect.</p>

<h2 id="assertions-have-a-structure">Assertions have a structure</h2>

<p>You might not know it, but most PHPUnit assertions have their parameters in the same order. They almost always take <code>$expected</code> and <code>$actual</code> as first and second parameters respectively. The third (and optional) parameter is often <code>$message</code>, which is a specific message you can write to make PHPUnit rapport back to you with when something fails. This is important, because in case of failure, PHPUnit will report you that your assertion's actual value doesn't match what you expected (so order is significant here). Let's see some examples:</p>

<pre><code class="php">$this-&gt;assertEquals($expected, $actual, $message);
$this-&gt;assertSame($expected, $actual, $message);
$this-&gt;assertTrue($condition, $message);
</code></pre>

<p>As you can see, the <code>assertTrue()</code> call misses an <code>$expected</code> part, as it's already made clear in the name of the assertion.</p>

<h2 id="use-the-correct-assertion">Use the correct assertion</h2>

<p>To me, the daddy of all assertions is <code>assertEquals</code>, it's the basis of a unit test. You assert that your <em>Subject Under Test</em> gives a return value that's equal to what you expect it to return. If you're in doubt about which assertion is the right one to use, always pick <code>assertEquals</code>. The added benifit you get, is that PHPUnit displays really nice diffs between the <code>$expected</code> and <code>$actual</code> values if they don't match. That's much less useful when you use <code>assertTrue</code>, and it can only tell you that <code>False</code> is not equal to <code>True</code>.</p>

<p><img src="/images/2017-08-01-tips-for-better-phpunit-tests/phpunit-diff.png" alt="Diff that PHPUnit shows when expected is different than the actual value" /></p>

<h2 id="pick-names-that-make-sense">Pick names that make sense</h2>

<p>PHPUnit expects you to start the name of your test methods with <code>test</code>, so that you get names like <code>testItThrowsAnExceptionWhenNetworkIsDown()</code>. Although that name is quite descriptive (and it should be!) it doesn't read very well. We can, however, make much more readable function names using underscores. What do you think of <code>test_it_throws_an_exception_when_network_is_down()</code>? It might not fit your coding standard (i'm looking at you, PSR-2), but isn't readability worth the occasional exception to some rules that are meant for readability? Also note, that be reading the name of the test method like this, it's totally clear to me what that test does, and I don't have to go in and read the code if I don't need to change it.</p>

<h2 id="data-providers-for-clear-failure-messages">Data Providers for clear failure messages</h2>

<p>If you need to test the same method with a huge number of inputs and make the same assertion over and over again, you might be tempted to write your assertion inside a <code>foreach</code> loop or something similar.</p>

<pre><code class="php">public function test_prices_cast_to_strings()
{
    $validPrices = array(
        '$100' =&gt; new Price(10000),
        '$10' =&gt; new Price(1000),
        '$1' =&gt; new Price(100),
        '$0.10' =&gt; new Price(10),
        '$0.01' =&gt; new Price(1),
    );

    foreach ($validPrices as $expectedString =&gt; $price) {
        $this-&gt;assertEquals($expectedString, (string) $price);
    }
}
</code></pre>

<p>The problem with this, is that all your assertions happen on the same line, and PHPUnit will rapport a failure in one of those assertions as a failure on that line. Then you'll have to play detective and start looking through your test data to see where things break. This is where PHPUnit Data Providers come in handy, check it out:</p>

<pre><code class="php">/**
 * @dataProvider validPrices
 */
public function test_prices_cast_to_strings($expectedString, $price)
{
    $this-&gt;assertEquals($expectedString, (string) $price);
}

public function validPrices()
{
    return array(
        array('$100', new Price(10000)),
        array('$10', new Price(1000)),
        array('$1', new Price(100)),
        array('$0.10', new Price(10)),
        array('$0.01', new Price(1)),
    );
}
</code></pre>

<p>Now PHPUnit will tell you which input data made the test fail. Don't you think this also cleans up the test so much more? No more <code>foreach</code> that didn't add any meaning to the test! What's also good to know, is that the <code>@dataProvider</code> annotation also works in conjunction with the <code>@expectedException</code> annotation, so you can also easily test if your method throws exceptions for invalid input.</p>

<pre><code class="php">/**
 * @dataProvider invalidPrices
 * @expectedException InvalidArgumentException
 */
public function test_prices_throw_when_built_from_non_integer_value($nonInteger)
{
    $price = new Price($nonInteger);
}

public function invalidPrices()
{
    return array(
        array('foo'),
        array(null),
        array(true),
        array(false),
        array(0.01),
        array('1'),
    );
}
</code></pre>

<h2 id="programming-against-interfaces">Programming against interfaces</h2>

<p>When you're writing tests for a SOLID codebase, be it in a test-first fashion, or writing tests after the facts, you'll be glad you used interfaces for your <em>Subject Under Test</em>'s dependencies. Not only do they give you the obvious benefits of "being able to swap out dependencies with a totally different implementation" or "not caring about specifics, if you just adhere to the contract", but also this means that you can test your class without its dependencies! Look at this example, where <code>Bank</code> has two dependencies:</p>

<pre><code class="php">&lt;?php

final class Bank
{
    private $clock;
    private $log;

    public function __construct(Clock $clock, TransactionLog $log)
    {
        $this-&gt;clock = $clock;
        $this-&gt;log = $log;
    }

    // ...
}
</code></pre>

<p>Of course, <code>Bank</code> cannot operate without its dependencies, so in our test we'll have to instantiate it correctly, but we'll use test doubles, so that we can test <code>Bank</code> with e.g. a <code>Clock</code> that we control:</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn(new DateTime('2017-07-15 10:00:00'));

$log = $this-&gt;getMock('TransactionLog');

$bank = new Bank($clock, $log);
</code></pre>

<p>Now that we know that <code>Clock</code> will always return a given time, we can make assertions that e.g. a <code>Bank</code> transaction was done at the time the clock returned, instead of taking a guess and using stuff like <code>time()</code> or <code>new DateTime('now')</code>. On the <code>TransactionLog</code>, we could assert that a certain method got called (because we expect a transaction to be made), and thus validate if the <code>Bank</code> communicates correctly with it:</p>

<pre><code class="php">$now = new DateTime('2017-07-15 10:00:00');
$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn($now);

$transaction = new Transaction('Toon', 'Hans', 100, $now);
$log = $this-&gt;getMock('TransactionLog');
$log
    -&gt;expects($this-&gt;once())
    -&gt;method('log')
    -&gt;with($this-&gt;equalTo($transaction));

$bank = new Bank($clock, $log);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>On the last line we do the call that your code would actually do to make a bank transaction (this is example code, beware). This makes the <code>Bank</code> log a <code>Transaction</code> in the <code>TransactionLog</code>. Since we control the clock, we can assert on the correct time in the <code>Transaction</code>. Also note that this is a complete test. The rather invisible assertion is the <code>$this-&gt;equalTo()</code> call. We're asserting that <code>Bank</code> communicates correctly to the <code>TransactionLog</code>.</p>

<h2 id="interface-discovery">Interface Discovery</h2>

<p>When we're doing TDD, the PHPUnit test doubles can help us "discovering" what an interface must be, in order to have a dependency that properly supports our <em>Subject Under Test</em>. This works because PHPUnit's mocks will mock any non-existing interfaces. Let's say we want the bank to trigger a WebHook whenever a transaction was made, containing the transaction details.</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$log = $this-&gt;getMock('TransactionLog');

// The WebHooks interface doesn't exist yet
$webhooks = $this-&gt;getMock('WebHooks');
$webhooks
    -&gt;expects($this-&gt;once())
    -&gt;method('trigger')
    -&gt;with($this-&gt;equalTo('{"transaction": {"from": "Toon", "to": "Hans", "amount": 100}}'));

$bank = new Bank($clock, $log, $webhooks);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>Without having an interface, we can already define what we want to see happening. Our test then fails, because the <code>trigger()</code> method didn't get called, so we can start implementing. When we're done, we'll see that our <code>Bank</code> class tests green, and we have discovered a very simple interface for the <code>WebHooks</code> that we can now create (see a whole blog post about this in the Further Reading section).</p>

<pre><code class="php">&lt;?php

interface WebHooks
{
    public function trigger($jsonContents);
}
</code></pre>

<h2 id="further-reading">Further Reading</h2>

<p>These were only a few of the things that you can do to make your testsuite better than it is right now! There are lots of ways to improve even further. My strategy is to not only refactor the code (when tests are green of course), but also the tests, to make them as comprehensive and robust as possible. Think about how you can make them easy to understand for the next person looking to improve or change them. Here's some more reading material that can help you out:</p>

<ul>
<li><a href="https://phpunit.de/manual/current/en/">The PHPUnit manual</a></li>
<li><a href="https://github.com/mockery/mockery">Much nicer test doubles with Mockery</a></li>
<li><a href="http://verraes.net/2011/03/interface-discovery-with-phpunit-mock-objects/">Interface Discovery with PHPUnit's Mock Objects</a></li>
</ul>

<p>That's it, enjoy writing better tests!</p>
]]></content>
        </entry>
    </feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[CX Social Dev Blog]]></title>
    <link href="/blog/categories/Testing.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-02-21T08:32:10+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Some tips for better PHPUnit tests]]></title>
            <link href="/blog/2017/08/01/tips-for-better-phpunit-tests"/>
            <updated>2017-08-01T10:00:00+00:00</updated>
            <id>/blog/2017/08/01/tips-for-better-phpunit-tests</id>
            <content type="html"><![CDATA[<p>Writing good unit tests can be a pain. When you write your tests superfluously, you're testing more than the single unit, and they start failing with reasons not related to the <em>Subject Under Test (SUT)</em>. Or your tests become unreadable, and you can't figure out what they were supposed to be testing. Or they test only the one situation where everything goes according to plan, and not possible errors. Of course we want to mitigate all that! Let's see some simple tips to keep your test suite clean and working all the time.</p>

<h2 id="test-the-unhappy-path-first">Test the unhappy path first</h2>

<p>You could've sworn that your test was complete, but there seem to be exceptional cases that you missed. When writing unit tests -and doing TDD in particular- thinking about what might go wrong is very important: how should your unit fail, and when? What should happen when it fails? Should it throw exceptions? If you start with this, you won't forget to do it, and you'll write more robust code as a side-effect.</p>

<h2 id="assertions-have-a-structure">Assertions have a structure</h2>

<p>You might not know it, but most PHPUnit assertions have their parameters in the same order. They almost always take <code>$expected</code> and <code>$actual</code> as first and second parameters respectively. The third (and optional) parameter is often <code>$message</code>, which is a specific message you can write to make PHPUnit rapport back to you with when something fails. This is important, because in case of failure, PHPUnit will report you that your assertion's actual value doesn't match what you expected (so order is significant here). Let's see some examples:</p>

<pre><code class="php">$this-&gt;assertEquals($expected, $actual, $message);
$this-&gt;assertSame($expected, $actual, $message);
$this-&gt;assertTrue($condition, $message);
</code></pre>

<p>As you can see, the <code>assertTrue()</code> call misses an <code>$expected</code> part, as it's already made clear in the name of the assertion.</p>

<h2 id="use-the-correct-assertion">Use the correct assertion</h2>

<p>To me, the daddy of all assertions is <code>assertEquals</code>, it's the basis of a unit test. You assert that your <em>Subject Under Test</em> gives a return value that's equal to what you expect it to return. If you're in doubt about which assertion is the right one to use, always pick <code>assertEquals</code>. The added benifit you get, is that PHPUnit displays really nice diffs between the <code>$expected</code> and <code>$actual</code> values if they don't match. That's much less useful when you use <code>assertTrue</code>, and it can only tell you that <code>False</code> is not equal to <code>True</code>.</p>

<p><img src="/images/2017-08-01-tips-for-better-phpunit-tests/phpunit-diff.png" alt="Diff that PHPUnit shows when expected is different than the actual value" /></p>

<h2 id="pick-names-that-make-sense">Pick names that make sense</h2>

<p>PHPUnit expects you to start the name of your test methods with <code>test</code>, so that you get names like <code>testItThrowsAnExceptionWhenNetworkIsDown()</code>. Although that name is quite descriptive (and it should be!) it doesn't read very well. We can, however, make much more readable function names using underscores. What do you think of <code>test_it_throws_an_exception_when_network_is_down()</code>? It might not fit your coding standard (i'm looking at you, PSR-2), but isn't readability worth the occasional exception to some rules that are meant for readability? Also note, that be reading the name of the test method like this, it's totally clear to me what that test does, and I don't have to go in and read the code if I don't need to change it.</p>

<h2 id="data-providers-for-clear-failure-messages">Data Providers for clear failure messages</h2>

<p>If you need to test the same method with a huge number of inputs and make the same assertion over and over again, you might be tempted to write your assertion inside a <code>foreach</code> loop or something similar.</p>

<pre><code class="php">public function test_prices_cast_to_strings()
{
    $validPrices = array(
        '$100' =&gt; new Price(10000),
        '$10' =&gt; new Price(1000),
        '$1' =&gt; new Price(100),
        '$0.10' =&gt; new Price(10),
        '$0.01' =&gt; new Price(1),
    );

    foreach ($validPrices as $expectedString =&gt; $price) {
        $this-&gt;assertEquals($expectedString, (string) $price);
    }
}
</code></pre>

<p>The problem with this, is that all your assertions happen on the same line, and PHPUnit will rapport a failure in one of those assertions as a failure on that line. Then you'll have to play detective and start looking through your test data to see where things break. This is where PHPUnit Data Providers come in handy, check it out:</p>

<pre><code class="php">/**
 * @dataProvider validPrices
 */
public function test_prices_cast_to_strings($expectedString, $price)
{
    $this-&gt;assertEquals($expectedString, (string) $price);
}

public function validPrices()
{
    return array(
        array('$100', new Price(10000)),
        array('$10', new Price(1000)),
        array('$1', new Price(100)),
        array('$0.10', new Price(10)),
        array('$0.01', new Price(1)),
    );
}
</code></pre>

<p>Now PHPUnit will tell you which input data made the test fail. Don't you think this also cleans up the test so much more? No more <code>foreach</code> that didn't add any meaning to the test! What's also good to know, is that the <code>@dataProvider</code> annotation also works in conjunction with the <code>@expectedException</code> annotation, so you can also easily test if your method throws exceptions for invalid input.</p>

<pre><code class="php">/**
 * @dataProvider invalidPrices
 * @expectedException InvalidArgumentException
 */
public function test_prices_throw_when_built_from_non_integer_value($nonInteger)
{
    $price = new Price($nonInteger);
}

public function invalidPrices()
{
    return array(
        array('foo'),
        array(null),
        array(true),
        array(false),
        array(0.01),
        array('1'),
    );
}
</code></pre>

<h2 id="programming-against-interfaces">Programming against interfaces</h2>

<p>When you're writing tests for a SOLID codebase, be it in a test-first fashion, or writing tests after the facts, you'll be glad you used interfaces for your <em>Subject Under Test</em>'s dependencies. Not only do they give you the obvious benefits of "being able to swap out dependencies with a totally different implementation" or "not caring about specifics, if you just adhere to the contract", but also this means that you can test your class without its dependencies! Look at this example, where <code>Bank</code> has two dependencies:</p>

<pre><code class="php">&lt;?php

final class Bank
{
    private $clock;
    private $log;

    public function __construct(Clock $clock, TransactionLog $log)
    {
        $this-&gt;clock = $clock;
        $this-&gt;log = $log;
    }

    // ...
}
</code></pre>

<p>Of course, <code>Bank</code> cannot operate without its dependencies, so in our test we'll have to instantiate it correctly, but we'll use test doubles, so that we can test <code>Bank</code> with e.g. a <code>Clock</code> that we control:</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn(new DateTime('2017-07-15 10:00:00'));

$log = $this-&gt;getMock('TransactionLog');

$bank = new Bank($clock, $log);
</code></pre>

<p>Now that we know that <code>Clock</code> will always return a given time, we can make assertions that e.g. a <code>Bank</code> transaction was done at the time the clock returned, instead of taking a guess and using stuff like <code>time()</code> or <code>new DateTime('now')</code>. On the <code>TransactionLog</code>, we could assert that a certain method got called (because we expect a transaction to be made), and thus validate if the <code>Bank</code> communicates correctly with it:</p>

<pre><code class="php">$now = new DateTime('2017-07-15 10:00:00');
$clock = $this-&gt;getMock('Clock');
$clock
    -&gt;method('getTime')
    -&gt;willReturn($now);

$transaction = new Transaction('Toon', 'Hans', 100, $now);
$log = $this-&gt;getMock('TransactionLog');
$log
    -&gt;expects($this-&gt;once())
    -&gt;method('log')
    -&gt;with($this-&gt;equalTo($transaction));

$bank = new Bank($clock, $log);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>On the last line we do the call that your code would actually do to make a bank transaction (this is example code, beware). This makes the <code>Bank</code> log a <code>Transaction</code> in the <code>TransactionLog</code>. Since we control the clock, we can assert on the correct time in the <code>Transaction</code>. Also note that this is a complete test. The rather invisible assertion is the <code>$this-&gt;equalTo()</code> call. We're asserting that <code>Bank</code> communicates correctly to the <code>TransactionLog</code>.</p>

<h2 id="interface-discovery">Interface Discovery</h2>

<p>When we're doing TDD, the PHPUnit test doubles can help us "discovering" what an interface must be, in order to have a dependency that properly supports our <em>Subject Under Test</em>. This works because PHPUnit's mocks will mock any non-existing interfaces. Let's say we want the bank to trigger a WebHook whenever a transaction was made, containing the transaction details.</p>

<pre><code class="php">$clock = $this-&gt;getMock('Clock');
$log = $this-&gt;getMock('TransactionLog');

// The WebHooks interface doesn't exist yet
$webhooks = $this-&gt;getMock('WebHooks');
$webhooks
    -&gt;expects($this-&gt;once())
    -&gt;method('trigger')
    -&gt;with($this-&gt;equalTo('{"transaction": {"from": "Toon", "to": "Hans", "amount": 100}}'));

$bank = new Bank($clock, $log, $webhooks);
$bank-&gt;payment('Toon', 'Hans', 100);
</code></pre>

<p>Without having an interface, we can already define what we want to see happening. Our test then fails, because the <code>trigger()</code> method didn't get called, so we can start implementing. When we're done, we'll see that our <code>Bank</code> class tests green, and we have discovered a very simple interface for the <code>WebHooks</code> that we can now create (see a whole blog post about this in the Further Reading section).</p>

<pre><code class="php">&lt;?php

interface WebHooks
{
    public function trigger($jsonContents);
}
</code></pre>

<h2 id="further-reading">Further Reading</h2>

<p>These were only a few of the things that you can do to make your testsuite better than it is right now! There are lots of ways to improve even further. My strategy is to not only refactor the code (when tests are green of course), but also the tests, to make them as comprehensive and robust as possible. Think about how you can make them easy to understand for the next person looking to improve or change them. Here's some more reading material that can help you out:</p>

<ul>
<li><a href="https://phpunit.de/manual/current/en/">The PHPUnit manual</a></li>
<li><a href="https://github.com/mockery/mockery">Much nicer test doubles with Mockery</a></li>
<li><a href="http://verraes.net/2011/03/interface-discovery-with-phpunit-mock-objects/">Interface Discovery with PHPUnit's Mock Objects</a></li>
</ul>

<p>That's it, enjoy writing better tests!</p>
]]></content>
        </entry>
    </feed>